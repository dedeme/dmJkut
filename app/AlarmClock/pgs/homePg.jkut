// Copyright 14-May-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Home page.

import "data/cts";
import "data/alarm";
import "main";
import "i18n";

Q = ui.q;
II = i18n.tlt;

/// \<domo> -> ()
mk = async \wg -> {
  Rp = await client.send({
    prg: cts.appName,
    source: "Home",
    rq: "idata"
  });

  Alarms = Rp.alarms;
  arr.sort(Alarms, \a1, a2 -> return a1[1] < a2[1];);

  butonSpan = Q("span");
  entry = ui.field("_accept")
    .style("width:50px")
  ;
  accept = Q("button")
    .att("id", "_accept")
    .text(II("Add"))
  ;

  // Control -------------------------------------------------------------------

  add = async \t -> {
    // \ ->s
    badFormat = \ -> {
      or = II("or");
      return II("Bad Format. Use") + ":\n"+
        "  HH,MM " + or + " HH.MM " + or + " HH:MM"
      ;
    };

    sep = t.includes(",")
      ? ","
      : t.includes(".")
        ? "."
        : t.includes(":")
          ? ":"
          : "";
    if (sep == "") {
      ui.alert(II("Separator is missing"));
      return;
    }

    parts = t.split(sep);
    if (parts.length != 2) {
      ui.alert(badFormat());
      return;
    }
    H = math.fromStr(parts[0]);
    ms = parts[1].length == 1 ? "0" + parts[1] : parts[1];
    M = math.fromStr(ms);
    if (!H | !M) {
      ui.alert(badFormat());
      return;
    }
    h = H!;
    m = M!;
    if (h < 0 | h > 23) {
      ui.alert(II("Hour out of range"));
      return;
    }
    if (m < 0 | m > 59) {
      ui.alert(II("Minutes out of range"));
      return;
    }

    tm = time.now();
    hnow = time.hour(tm);
    mnow = time.minute(tm);

    dayAlarm = h > hnow | (hnow == h & m > mnow)
      ? tm
      : time.addDays(tm, 1)
    ;
    butonSpan.removeAll().add(ui.img("wait.gif"));
    Rp = await client.send({
      prg: cts.appName,
      source: "Home",
      rq: "add",
      key: cryp.genK(6) + ":" + tm,
      tm: time.mk(
          time.day(dayAlarm), time.month(dayAlarm), time.year(dayAlarm),
          h, m, 0
        )
    });

    if (Rp.isDup) ui.alert(II("Duplicated alarm"));
    window.location.reload(true);
  };

  // \<alarm> -> ()
  del = async \A -> {
    if (ui.confirm(II("Remove the alarm") + " '" + alarm.timeToStr(A) + "'")) {
      await client.ssend({
        prg: cts.appName,
        source: "Home",
        rq: "del",
        alarm: A
      });
      mk(wg);
    }
  };

  // View ----------------------------------------------------------------------

  accept.on("click", \e -> add(entry.getValue()););

  trs = arr.map(Alarms, \A -> return Q("tr")
      .add(Q("td")
        .klass("frame")
        .style("text-align: right")
        .text(alarm.timeToStr(A)))
      .add(Q("td")
        .style("Text-align: left")
        .add(ui.link(\e -> del(A);)
          .add(ui.img("delete"))))
    ;);

  wg
    .removeAll()
    .add(Q("table")
      .att("align", "center")
      .add(Q("tr")
        .add(Q("td")
          .att("colspan", 2)
          .add(Q("div")
            .klass("head")
            .text(II("New Alarm")))))
      .add(Q("tr")
        .add(Q("td")
          .add(entry))
        .add(Q("td")
          .add(butonSpan
            .add(accept))))
      .add(Q("tr")
        .add(Q("td")
          .att("colspan", 2)
          .add(Q("hr"))))
      .add(Q("tr")
        .add(Q("td")
          .att("colspan", 2)
          .add(Q("div")
            .klass("head")
            .text(II("Programmed Alarms")))))
      .adds(Alarms.length == 0
          ? [Q("tr")
              .add(Q("td")
                .klass("frame")
                .att("colspan", 2)
                .style("text-align:center")
                .text(II("Without Alarms")))
            ]
          : trs
        ))
  ;
  entry.e.focus();
};

