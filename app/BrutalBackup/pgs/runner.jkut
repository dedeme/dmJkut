// Copyright 15-May-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Runner page.

import "i18n";
import "data/cts";
import "wgs/progressBar";

Q = ui.q;
II = i18n.tlt;

/// Constructor
/// \<domo>, s -> ()
mk = async \wg, id -> {
  Rp = await client.send({
    prg: cts.appName,
    source: "Runner",
    rq: "run",
    id: id
  });
  tm = math.toInt(Rp.tm);

  startTime = time.now();
  tmTimer = timer.mk(1000);
  bkTimer = timer.mk(1000);
  progressDiv = Q("div");
  TmProgressBar = [[]];
  BkProgressBar = [[]];
  editor = Q("textarea")
    .att("rows", 10)
    .att("cols", 80)
    .att("spellcheck", false)
    .disabled(true)
  ;

  if (tm < 0) {
    TmProgressBar! = progressBar.mk(progressDiv, 0);
    TmProgressBar!.lock(II("Time to read files list is not kown yet"));
  } else {
    TmProgressBar = progressBar.mk(progressDiv, tm);
    TmProgressBar.show();
  }

  // Control -------------------------------------------------------------------

  // \<event> -> ()
  toList = \ev -> {
    window.location.assign("");
  };

  // \-> ()
  bkProgress = async \ -> {
    Rp = await client.send({
      prg: cts.appName,
      source: "Runner",
      rq: "state",
      id: id
    });
    State = arr.map(Rp.state, math.toInt);
    Errors = Rp.errors;

    if (arr.size(State) == 0) {
      timer.stop(bkTimer);
      BkProgressBar!.lock(II("Backup finalized"));
    } else {
      BkProgressBar.setValue(State[0]);
    }

    editor.text(arr.join(Errors, "\n"));
  };

  // \ -> ()
  tmProgress = async \ -> {
    Rp = await client.send({
      prg: cts.appName,
      source: "Runner",
      rq: "state",
      id: id
    });
    State = arr.map(Rp.state, math.toInt);
    Errors = Rp.errors;

    if (arr.size(State) != 1) {
      timer.stop(tmTimer);
      await client.send({
        prg: cts.appName,
        source: "Runner",
        rq: "setTm",
        id: id,
        tm: time.now() - startTime
      });
      end = arr.size(State) == 2 ? State[1] : 0;
      BkProgressBar! = progressBar.mk(progressDiv, end);
      BkProgressBar!.show();
      timer.run(bkTimer, bkProgress);
    } else {
      TmProgressBar!.setValue((time.now - startTime) / 1000);
    }

    editor.text(arr.join(Errors, "\n"));
  };


  // View ----------------------------------------------------------------------

  wg
    .removeAll()
    .add(Q("table")
      .klass("main")
      .add(Q("tr")
        .add(Q("td")
          .style("width: 5px;white-space:nowrap;")
          .add(Q("div")
            .klass("head")
            .text(i18n.fmt(II("Backup of '%0'"), [id]))))
        .add(Q("td")
          .style("text-align: right")
          .add(ui.link(toList)
            .klass("link")
            .text(II("List"))))))
    .add(Q("hr"))
    .add(progressDiv)
    .add(Q("table")
      .att("align", "center")
      .add(Q("tr")
        .add(Q("td")
          .add(editor))))
  ;

  timer.run(tmTimer, tmProgress);
};
