// Copyright 07-May-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Index page.

import "i18n";
import "msgPg";
import "data/cts";
import "data/indexTree";

Q = ui.q;
II = i18n.tlt;

/// \<domo>, s -> ()
mk = async \wg, pack -> {
  Rp = await client.ssend({
    prg: "CDoc",
    source: "IndexPg",
    rq: "index",
    pack: pack
  });

  if (!Rp.index) {
    msgPg.mk(wg, II("Library path not found o not valid."), true);
    return;
  }

  Tree = indexTree.fromJs(Rp.index!);
  linkPrefix = "?" + pack + "@";

  Q("@title").text(cts.appName + " - " + pack);

  Trs = [];
  add(Trs, Tree.Trees, "", 0, linkPrefix);

  wg
    .removeAll()
    .add(Q("div")
      .klass("frame")
      .add(Q("table")
        .klass("main")
        .adds(Trs)))
  ;
};

// [<domo>...], [<indexTree>...], s, i, s -> ()
add = \Trs, Trees, ppath, space, linkPrefix -> {
  path = ppath != "" ? ppath + "/" : ppath;

  arr.sort(Trees, \T1, T2 ->
    return T1.Doc
      ? T2.Doc
        ? str.less(str.toUpper(T1.id), str.toUpper(T2.id))
        : false
      : T2.Doc
        ? true
        : str.less(str.toUpper(T1.id), str.toUpper(T2.id))
    ;
  );
  for (T = Trees) {
    if (T.Doc) {
      arr.push(Trs, Q("tr")
        .add(Q("td")
          .style('width:10px;padding-left:' + space + 'px')
          .html(str.fmt(
              '<a href="%v%v%v">%v</a>',
              [linkPrefix, path, T.id, T.id]
            )))
        .add(Q("td")
          .style("padding-left:10px")
          .text(T.Doc!))
      );
    } else {
      arr.push(Trs, Q("tr")
        .add(Q("td")
          .style('padding-left:' + space + 'px')
          .html('<b>' + T.id + '</b>'))
        .add(Q("td"))
      );
      add(Trs, T.Trees, path + T.id, space + 20, linkPrefix);
    }
  }
};
