// Copyright 27-Jun-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Charts page.

import "libdm/menu";
import "libdm/modalBox";
import "libdm/lineChart";
import "data/model";
import "data/result";
import "data/modelEval";
import "i18n";
import "fns";

Q = ui.q;
II = i18n.tlt;

/// \<domo>, s -> ()
mk = async \wg, modelId -> {
  // [[n...]] | []
  Params = [];
  Url = ui.url();
  Uparams = dic.get(Url, "2");
  if (Uparams) {
    try {
      A = js.r(Uparams!);
      ok = arr.reduce(
        A, true, \r, e -> return r & sys.type(e) == "number" & e >= 0;
      );
      if (ok) arr.push(Params, A);
    } catch (e) {}
  }

  Rp = await client.send({
    prg: "CMMarket",
    source: "CosPg",
    rq: "idata",
    modelId,
    params: Params // Can be []
  });
  if (!Rp.ok) {
    ui.alert(i18n.fmt(II("%0%1 not found."), [modelId, sys.toStr(Params)]));
    window.location.assign("?");
    return;
  }
  Model = model.fromJs(Rp.model);
  Result = result.fromJs(Rp.result);
  MdEval = modelEval.fromJs(Rp["eval"]);
  Cos = Rp.cos; // [s...]

  Nlosses = [0];
  RatiosSum = [0.0];


  modalDiv = Q("div");
  ModalBox = modalBox.mk(modalDiv, true);
  clientResultsDiv = Q("div");
  GrDivs = []; // [[<domo>...]]

  nrows = math.toInt((arr.size(Cos) - 1) / 3) + 1;
  for (i = 0:nrows) {
    Row = []; // [[<domo>...]
    for (j = 0:3) {
      dv = Q("div");
      ico = i * 3 + j;
      if (ico < arr.size(Cos)) {
        wait(dv, Cos[ico]);
      }
      arr.push(Row, dv);
    }
    arr.push(GrDivs, Row);
  }

  // \s, <linechart>, <data> -> ()
  showBigChart = \co, Data -> {
    Ch = lineChart.mkExample();
    Ch.ExArea.width = 800;
    Ch.ExArea.height = 400;
    Ch.ExArea.Atts.background = "#ffffff";
    Ch.InAtts.background = "#e9e9e9";
    Ch.Labels.onPopup = true;

    modalDiv
      .removeAll()
      .add(Q("div")
        .klass("head")
        .text(co))
      .add(lineChart.mkWg(Ch, Data))
      .add(Q("button")
        .text(II("Close"))
        .on("click", \e -> modalBox.show(ModalBox, false);))
    ;
    modalBox.show(ModalBox, true);
  };

  // \ -> ()
  mkCharts = async \ -> {
    // \n -> ()
    mkChart = async \ico -> {
      co = Cos[ico];
      div = GrDivs[math.toInt(ico / 3)][ico % 3];

      Rp = await client.send({
        prg: "CMMarket",
        source: "CosPg",
        rq: "co",
        modelId,
        params: MdEval.params,
        co
      });

      Result = result.fromJs(Rp.result);
      Refs = arr.dropWhile(Rp.refs, \r -> return r < 0;);
      skip = arr.size(Rp.refs) - arr.size(Refs);
      Dates = arr.drop(Rp.dates, skip);
      Labels = arr.map(Dates, \d -> return d[4:6];);
      Qs = arr.drop(Rp.qs, skip);

      RefsUp = arr.fromIter(iter.map(
        [0:arr.size(Qs)],
        \i -> {
          q = Qs[i];
          r = Refs[i];
          return r > q ? [r] : [];
        }
      ));
      RefsDown = arr.fromIter(iter.map(
        [0:arr.size(Qs)],
        \i -> {
          q = Qs[i];
          r = Refs[i];
          return r < q ? [r] : [];
        }
      ));
      if (Result.profits < 0) Nlosses! += 1;
      RatiosSum! += Result.profits;

      Ch = lineChart.mkExample();
      Ch.ExArea.width = 300;
      Ch.ExArea.height = 150;
      Ch.ExArea.Atts.background = "#ffffff";
      Ch.InAtts.background = "#e9e9e9";

      Data = lineChart.mkData(
        Labels,
        [ RefsUp,
          RefsDown,
          arr.map(Qs, \q -> return [q];)],
        [ lineChart.mkLine(1, "#4060a0", false),
          lineChart.mkLine(1, "#a06040", false),
          lineChart.mkLine(1, "#000000", false)
        ]
      );

      Data.maxMinRound = \mx, mn -> return mx > 10 ? 0 : -1;;
      PrevLabel = [Labels[0]];
      Data.drawLabel = \l, i -> {
        if (i == 0) return false;
        if (l != PrevLabel! & (l == "01" | l == "05" | l == "09")) {
          PrevLabel! = l;
          return true;
        }
        return false;
      };
      Data.drawGrid = \l, i -> return false;;

      div
        .removeAll()
        .add(Q("table")
          .add(Q("tr")
            .add(Q("td")
              .style("text-align:left")
              .text(co))
            .add(Q("td")
              .style("text-align:right")
              .add(Q("span")
                .text(
                    math.toIso(Result.profits * 100, 2) + "% [" +
                    math.toIso(Result.sales, 0) + "] "
                  ))
              .add(ui.img(Result.profits < 0 ? "losses" : "profits")
                .style("vertical-align:middle"))))
          .add(Q("tr")
            .add(Q("td")
              .att("colspan", 2)
              .add(lineChart.mkWg(Ch, Data)
                .on("click", \e -> showBigChart(co, Data);)))))
      ;
    };

    for (i = 0:arr.size(Cos)) await mkChart(i);

    clientResultsDiv
      .removeAll()
      .add(Q("table")
        .att("align", "center")
        .add(Q("tr")
          .add(Q("td")
            .klass("rframe")
            .add(Q("span")
              .text("" + (arr.size(Cos) - Nlosses!) + " "))
            .add(ui.img("profits")
              .style("vertical-align: middle")))
          .add(Q("td")
            .klass("rframe")
            .add(Q("span")
              .text("" + Nlosses))
            .add(ui.img("losses")
              .style("vertical-align: middle")))
          .add(Q("td")
            .klass("rframe")
            .text(math.toIso(RatiosSum! * 100 / arr.size(Cos), 2) + "%"))))
     ;
  };

  wg
    .removeAll()
    .add(Q("div")
      .klass("head")
      .text(II("Companies")))
    .add(Q("div").klass("separator"))
    .add(Q("table")
      .att("align", "center")
      .klass("flat")
      .add(Q("tr")
        .add(Q("td")
          .klass("chead")
          .text(II("Model")))
        .adds(arr.map(Model.paramNames, \n -> return Q("td")
            .klass("rhead")
            .text(n)
          ;)))
      .add(Q("tr")
        .add(Q("td")
          .klass("cframe")
          .text(Model.name))
        .adds(iter.map(
          [0:arr.size(MdEval.params)],
          \i -> return Q("td")
            .klass("rframe")
            .text(fns.paramFmt(Model.paramTypes[i], MdEval.params[i]))
          ;))))
    .add(Q("div").klass("separator2"))
    .add(Q("table")
      .att("align", "center")
      .klass("flat")
      .add(Q("tr")
        .add(Q("td")
          .klass("rhead")
          .text(II("Assets")))
        .add(Q("td")
          .klass("rhead")
          .text(II("Profits (%)")))
        .add(Q("td")
          .klass("rhead")
          .text(II("Eval.")))
        .add(Q("td")
          .klass("rhead")
          .text(II("Sales"))))
      .add(Q("tr")
        .add(Q("td")
          .klass("rframe")
          .text(math.toIso(Result.assets, 2)))
        .add(Q("td")
          .klass("rframe")
          .text(math.toIso(Result.profits * 100, 2)))
        .add(Q("td")
          .klass("rframe")
          .text(math.toIso(fns.evaluate(Result.assets, Result.profits), 0)))
        .add(Q("td")
          .klass("rframe")
          .text(math.toIso(Result.sales, 0)))))
    .add(Q("div").klass("separator2"))
    .add(Q("table")
      .att("align", "center")
      .klass("flat")
      .add(Q("tr")
        .add(Q("td")
          .klass("rhead")
          .text(II("H. Eval.")))
        .add(Q("td")
          .klass("rhead")
          .text(II("H. Sales")))
        .add(Q("td")
          .klass("rhead")
          .text(II("Eval.")))
        .add(Q("td")
          .klass("rhead")
          .text(II("Sales"))))
      .add(Q("tr")
        .add(Q("td")
          .klass("rframe")
          .text(math.toIso(fns.evaluate(MdEval.hassets, MdEval.hprofits), 0)))
        .add(Q("td")
          .klass("rframe")
          .text(math.toIso(MdEval.hsales, 0)))
        .add(Q("td")
          .klass("rframe")
          .text(math.toIso(fns.evaluate(MdEval.assets, MdEval.profits), 0)))
        .add(Q("td")
          .klass("rframe")
          .text(math.toIso(MdEval.sales, 0)))))
    .add(Q("div").klass("separator"))
    .add(clientResultsDiv)
    .add(Q("div").klass("separator2"))
    .add(Q("table")
      .att("align", "center")
      .klass("frame")
      .adds(arr.map(GrDivs, \R -> return Q("tr")
          .adds(arr.map(R, \dv -> return Q("td").add(dv);))
        ;)))
    .add(ModalBox.wg)
  ;

  mkCharts();
};

// \<domo>, s -> ()
wait = \div, co -> div
    .removeAll()
    .add(Q("table")
      .att("align", "center")
      .add(Q("tr")
        .add(Q("td")
          .style("text-align:center")
          .text(co)))
      .add(Q("tr")
        .add(Q("td")
          .style("text-align:center")
          .add(ui.img("wait.gif")))))
  ;;
