// Copyright 27-Jun-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Orders page.

import "libdm/menu";
import "data/model";
import "data/result";
import "data/modelEval";
import "data/order";
import "data/cts";
import "data/broker";
import "i18n";
import "fns";

Q = ui.q;
II = i18n.tlt;

/// \<domo>, s -> ()
mk = async \wg, modelId -> {
  // [[n...]] | []
  Params = [];
  Url = ui.url();
  Uparams = dic.get(Url, "2");
  if (Uparams) {
    try {
      A = js.r(Uparams!);
      ok = arr.reduce(
        A, true, \r, e -> return r & sys.type(e) == "number" & e >= 0;
      );
      if (ok) arr.push(Params, A);
    } catch (e) {}
  }

  Rp = await client.send({
    prg: "CMMarket",
    source: "OperationsPg",
    rq: "idata",
    modelId,
    params: Params // Can be []
  });
  if (!Rp.ok) {
    ui.alert(i18n.fmt(II("%0%1 not found."), [modelId, sys.toStr(Params)]));
    window.location.assign("?");
    return;
  }
  Model = model.fromJs(Rp.model);
  Result = result.fromJs(Rp.result);
  MdEval = modelEval.fromJs(Rp["eval"]);
  Nicks = Rp.nicks; // [s...]
  LastCloses = Rp.lastCloses; // [n...]
  Orders = arr.map(Rp.orders, \O -> return order.fromJs(O););

  // \s, [s...], [s...], [s...], {s...}, [s...], n -> <domo>
  mkTr = \date, Buys, Sells, Portfolio, Quarantine, cash -> {
    arr.sort(Portfolio, str.less);
    arr.sort(Quarantine, str.less);

    return Q("tr")
      .add(Q("td")
        .klass("lframe")
        .text(time.toIso(time.fromStr(date)!)))
      .add(Q("td")
        .klass("lframe")
        .style("width:100px")
        .text(arr.join(Buys, ", ")))
      .add(Q("td")
        .klass("lframe")
        .style("width:100px")
        .text(arr.join(Sells, ", ")))
      .add(Q("td")
        .klass("lframe")
        .style("width:300px")
        .text(arr.join(Portfolio, ", ") + " [" + arr.size(Portfolio) + "]"))
      .add(Q("td")
        .klass("lframe")
        .style("width:200px")
        .text(arr.join(Quarantine, ", ") + " [" + arr.size(Quarantine) + "]"))
      .add(Q("td")
        .klass("rframe")
        .text(math.toIso(cash, 2)))
    ;
  };

  Assets = [0];
  Trs = []; // [<domo>...]
  if (arr.size(Orders) > 0) {
    LastDate = [""];
    Cash = [cts.initialCapital];
    Buys = []; // [s...]
    Sells = []; // [s...]
    Quarantine = {}; // {s...} :: {nick -> date}
    Portfolio = {}; // {[n, n]...} :: {nick -> [stock, price]}

    for (O = Orders) {
      date = O.date;
      QRemoves = []; //[s...]
      for (nk, d = Quarantine)
        if (d <= date) arr.push(QRemoves, nk);

      for (nk = QRemoves) dic.remove(Quarantine, nk);

      if (!LastDate!) {
        LastDate! = date;
      } else if (date != LastDate!) {
        arr.push(
          Trs,
          mkTr(
            LastDate!, Buys, Sells,
            dic.keys(Portfolio), dic.keys(Quarantine), Cash!
          )
        );
        arr.clear(Buys);
        arr.clear(Sells);
        LastDate! = date;
      }
      nk = O.nick;
      switch (O.type) {
        order.sell: {
          arr.push(Sells, nk);
          pr = Portfolio[nk][1];
          dic.remove(Portfolio, nk);
          Cash! += broker.sell(O.stocks, O.price);
          dt0 = time.fromStr(date)!;
          dt = time.addDays(dt0, (O.price >= pr * cts.noLossMultiplicator)
            ? cts.daysWin
            : cts.daysLoss
          );
          dic.put(Quarantine, nk, time.toStr(dt)); // = out of quaretine.
        }
        order.buy: {
          arr.push(Buys, nk);
          dic.put(Portfolio, nk, [O.stocks, O.price]);
          Cash! -= broker.buy(O.stocks, O.price);
        }
      }
    }
    arr.push(
      Trs,
      mkTr(
        LastDate!, Buys, Sells,
        dic.keys(Portfolio), dic.keys(Quarantine), Cash!
      )
    );
    Assets! = arr.reduce(
      dic.toArr(Portfolio),
      Cash!,
      \r, Tp ->
        return r + broker.sell(
            Tp[1][0], LastCloses[arr.index(Nicks, \n -> return n == Tp[0];)]
          );
    );
  } else {
    arr.push(Trs, Q("tr")
      .add(Q("td")
        .att("rowspan", "5")
        .text(II("Without Data"))))
    ;
  }

  wg
    .removeAll()
    .add(Q("div")
      .klass("head")
      .text(II("Historic")))
    .add(Q("div").klass("separator"))
    .add(Q("table")
      .att("align", "center")
      .klass("flat")
      .add(Q("tr")
        .add(Q("td")
          .klass("chead")
          .text(II("Model")))
        .adds(arr.map(Model.paramNames, \n -> return Q("td")
            .klass("rhead")
            .text(n)
          ;)))
      .add(Q("tr")
        .add(Q("td")
          .klass("cframe")
          .text(Model.name))
        .adds(iter.map(
          [0:arr.size(MdEval.params)],
          \i -> return Q("td")
            .klass("rframe")
            .text(fns.paramFmt(Model.paramTypes[i], MdEval.params[i]))
          ;))))
    .add(Q("div").klass("separator2"))
    .add(Q("table")
      .att("align", "center")
      .klass("flat")
      .add(Q("tr")
        .add(Q("td")
          .klass("rhead")
          .text(II("Assets")))
        .add(Q("td")
          .klass("rhead")
          .text(II("Profits (%)")))
        .add(Q("td")
          .klass("rhead")
          .text(II("Eval.")))
        .add(Q("td")
          .klass("rhead")
          .text(II("Sales"))))
      .add(Q("tr")
        .add(Q("td")
          .klass("rframe")
          .text(math.toIso(Result.assets, 2)))
        .add(Q("td")
          .klass("rframe")
          .text(math.toIso(Result.profits * 100, 2)))
        .add(Q("td")
          .klass("rframe")
          .text(math.toIso(fns.evaluate(Result.assets, Result.profits), 0)))
        .add(Q("td")
          .klass("rframe")
          .text(math.toIso(Result.sales, 0)))))
    .add(Q("div").klass("separator2"))
    .add(Q("table")
      .att("align", "center")
      .klass("flat")
      .add(Q("tr")
        .add(Q("td")
          .klass("rhead")
          .text(II("H. Eval.")))
        .add(Q("td")
          .klass("rhead")
          .text(II("H. Sales")))
        .add(Q("td")
          .klass("rhead")
          .text(II("Eval.")))
        .add(Q("td")
          .klass("rhead")
          .text(II("Sales"))))
      .add(Q("tr")
        .add(Q("td")
          .klass("rframe")
          .text(math.toIso(fns.evaluate(MdEval.hassets, MdEval.hprofits), 0)))
        .add(Q("td")
          .klass("rframe")
          .text(math.toIso(MdEval.hsales, 0)))
        .add(Q("td")
          .klass("rframe")
          .text(math.toIso(fns.evaluate(MdEval.assets, MdEval.profits), 0)))
        .add(Q("td")
          .klass("rframe")
          .text(math.toIso(MdEval.sales, 0)))))
    .add(Q("div")
      .klass("head")
      .text(II("Assets")))
    .add(Q("table")
      .att("align", "center")
      .klass("white")
      .add(Q("tr")
        .add(Q("td")
          .klass("rframe")
          .text(math.toIso(Assets!, 2)))))
    .add(Q("div")
      .klass("head")
      .text(II("Orders")))
    .add(Q("table")
      .att("align", "center")
      .klass("flat")
      .add(Q("tr")
        .add(Q("td")
          .klass("lhead")
          .style("text-align:center")
          .text(II("Date")))
        .add(Q("td")
          .klass("lhead")
          .style("text-align:center")
          .text(II("Buys")))
        .add(Q("td")
          .klass("lhead")
          .style("text-align:center")
          .text(II("Sells")))
        .add(Q("td")
          .klass("lhead")
          .style("text-align:center")
          .text(II("Portfolio")))
        .add(Q("td")
          .klass("lhead")
          .style("text-align:center")
          .text(II("Quarantine")))
        .add(Q("td")
          .klass("rhead")
          .style("text-align:center")
          .text(II("Cash"))))
      .adds(Trs))
  ;
};

