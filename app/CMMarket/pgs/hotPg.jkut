// Copyright 04-Jul-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Description page.

import "libdm/menu";
import "data/model";
import "data/modelEval";
import "i18n";
import "fns";

Q = ui.q;
II = i18n.tlt;

// \n, n, n -> s
color = \max, min, value -> {
  df = max - min;
  red = math.toInt((max - value) * 256 / df );
  blue = math.toInt((value - min) * 256 / df );
  return "rgb(" + red + ",80," + blue + ")";
};


// \<domo>, s, b -> ()
mk2 = async \wg, modelId, isHistoric -> {
  Rp = await client.send({
    prg: "CMMarket",
    source: "ResultsPg",
    rq: "idata",
    modelId
  });
  Md = model.fromJs(Rp.model);
  Evals = arr.map(Rp.evals, modelEval.fromJs);

  Max = isHistoric
    ? [fns.evaluate(Evals[0].hassets, Evals[0].hprofits)]
    : [fns.evaluate(Evals[0].assets, Evals[0].profits)]
  ;
  Min = [Max!];
  for (Eval = Evals) {
    ev = isHistoric
      ? fns.evaluate(Eval.hassets, Eval.hprofits)
      : fns.evaluate(Eval.assets, Eval.profits)
    ;
    if (ev > Max!) Max! = ev;
    else if (ev < Min!) Min! = ev;
  }
  max = Max!;
  min = Min!;

  // \-> <domo>
  oneParam = \ -> {
    return Q("table")
      .klass("flat")
      .att("align", "center")
      .add(Q("tr")
        .add(Q("td")
          .klass("rhead")
          .text(Md.paramNames[0]))
        .add(Q("td")))
      .adds(arr.map(Evals, \Eval -> {
        ev = isHistoric
          ? fns.evaluate(Eval.hassets, Eval.hprofits)
          : fns.evaluate(Eval.assets, Eval.profits)
        ;
        return Q("tr")
          .add(Q("td")
            .klass("rframe")
            .style("font-size:small")
            .text(fns.paramFmt(Md.paramTypes[0], Eval.params[0])))
          .add(Q("td")
            .klass("border")
            .att("title", math.toIso(ev, 0))
            .style(
              "width:50px;" +
              "cursor:pointer;" +
              "background:" + color(max, min, ev)
            ))
            .on("click", \e -> window.location.assign(
              "?" + Md.id + "&charts&" + js.w([Eval.params[0]])
            );)
      ;}))
    ;
  };

  // \-> <domo>
  twoParams = \ -> {
    pm1 = Evals[0].params[0];
    ncols = iter.count(iter.takeWhile(
      arr.toIter(Evals),
      \Eval -> return Eval.params[0] == pm1;
    ));
    Row = [0.0];
    for (j = 0:ncols) arr.push(Row, Evals[j].params[1]);
    Rows = [Row];
    for (i = 0:math.toInt(arr.size(Evals) / ncols)) {
      Row = [Evals[i * ncols].params[0]];
      for (j = 0:ncols) {
        Eval = Evals[i * ncols + j];
        ev = isHistoric
          ? fns.evaluate(Eval.hassets, Eval.hprofits)
          : fns.evaluate(Eval.assets, Eval.profits)
        ;
        arr.push(Row, ev);
      }
      arr.push(Rows, Row);
    }

    return Q("table")
      .klass("flat")
      .att("align", "center")
      .add(Q("tr")
        .add(Q("td"))
        .add(Q("td")
          .klass("rhead")
          .text(Md.paramNames[0]))
        .adds(arr.fromIter(iter.map([0:ncols], \i -> return Q("td");))))
      .add(Q("tr")
        .add(Q("td")
          .klass("rhead")
          .text(Md.paramNames[1]))
        .add(Q("td"))
        .adds(arr.fromIter(iter.map([1:ncols], \i -> return Q("td")
            .klass("rframe")
            .style("font-size:small")
            .text(fns.paramFmt(Md.paramTypes[1], Rows[0][i]))
          ;))))
      .adds(arr.fromIter(iter.map([1: arr.size(Rows)], \i -> return Q("tr")
          .add(Q("td"))
          .add(Q("td")
            .klass("rframe")
            .style("font-size:small")
            .text(fns.paramFmt(Md.paramTypes[0], Rows[i][0])))
          .adds(arr.fromIter(iter.map([1:ncols], \j -> return Q("td")
              .klass("border")
              .att("title", math.toIso(Rows[i][j], 0))
              .style(
                  "cursor:pointer;" +
                  "background:" + color(max, min, Rows[i][j])
                )
              .on("click", \e -> window.location.assign(
                  "?" + Md.id + "&charts&" + js.w([Rows[i][0], Rows[0][j]])
                );)
            ;)))
          ;)))
    ;
  };

  Lopts = [
    menu.toption("c", II("Current"), \ -> mk2(wg, modelId, false);),
    menu.separator(),
    menu.toption("h", II("Historic"), \ -> mk2(wg, modelId, true);)
  ];
  menuWg = menu.mk(Lopts, [], isHistoric ? "h" : "c", false);

  wg
    .removeAll()
    .add(menuWg)
    .add(arr.size(Md.paramNames) == 1 ? oneParam() : twoParams())
  ;

};

/// \<domo>, s -> ()
mk = \wg, modelId -> mk2(wg, modelId, false);;

