// Copyright 01-Jun-2023 ºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Daily charts, main page.

import "libdm/menu";
import "libdm/clock";
import "data/cts";
import "data/chart/dailyChart";
import "wgs/dmenu";
import "i18n";
import "cosSummaryChart";
import "ixsSummaryChart";
import "coChart";

Q = ui.q;
II = i18n.tlt;

// \n -> s
color = \v ->
  return "color:" + (v > 0 ? "#00AAFF" : v < 0 ? "#FF8100" : "#404040");;

/// Contents maker.
///   wg       : Container.
///   dbmenu   : Double menu.
///   mSel     : Submenu selection.
///   order    : Order to show companies.
///   isReverse: If order is reverse.
/// \<domo>, <dmenu>, s, i, b -> ()
mk2 = async \wg, dbmenu, mSel, order, isReverse -> {
  Rp = await client.send({
    prg: cts.appName,
    module: "DailyPg",
    source: "Daily",
    rq: "idata"
  });
  CosData = arr.map(Rp.CosData, dailyChart.fromJs);
  IxsData = arr.map(Rp.IxsData, dailyChart.fromJs);
  CosSel = Rp.CosSel; // [s...]
  Rebuys = Rp.Rebuys; // [s...]
  serverName = Rp.serverName;
  activity = Rp.activity;
  Order = [order];
  IsReverse = [isReverse];

  Profitss = arr.reduce(
    CosData,
    [0, 0],
    \R, D -> {
      cl = D.close;
      q = arr.peek(D.quotes);
      Total = arr.reduce(
        D.invs,
        [0, 0],
        \R, I -> return [
            R[0] + I.stocks * (q - (I.isNew ? I.price : cl)),
            R[1] + I.stocks * (q - I.price)
          ];
      );
      return [R[0] + Total[0], R[1] + Total[1]];
    }
  );
  dayProfits = Profitss[0];
  totalProfits = Profitss[1];

  serverWg = Q("span").text(serverName);
  activityWg = Q("span")
    .text(activity == cts.active ? "· · · ·" : "")
  ;
  Show = [[]];

  // Control -------------------------------------------------------------------

    // \ -> ()
    reactivate = async \ -> {
      if (!ui.confirm(II("Reactivate daily charts?"))) return;

      serverWg
        .removeAll()
        .add(ui.img("wait.gif")
          .style("vertical-align:middle"))
      ;
      await client.send({
        prg: cts.appName,
        module: "DailyPg",
        source: "Daily",
        rq: "reactivate"
      });
      mk2(wg, dbmenu, mSel, Order!, IsReverse!);
    };

    // \ -> ()
    newServer = \ -> ui.alert(II("Currently this functions is deactivated"));;

    // \i -> ()
    updateActivityWg = \tic -> {
      activityWg
        .removeAll()
        .text(tic < 0
            ? ""
            : iter.reduce([0:tic], "", \r, i -> return  r + " ·";)
          )
      ;
    };

    // \s, b -> ()
    setSelected = async \nick, isSel -> {
      await client.send({
        prg: cts.appName,
        module: "DailyPg",
        source: "Daily",
        rq: "setSelected",
        nick,
        isSel
      });

      mk2(wg, dbmenu, mSel, Order!, IsReverse!);
    };

  // View ----------------------------------------------------------------------

  mkCoHead = \D -> {
    // \ -> <domo>
    separator = \ -> return Q("span").html("&nbsp;&nbsp;");;

    // \n -> s
    color = \v ->
      return "color:" + (v > 0 ? "#00aaff" : v < 0 ? "#ff8100" : "#a9a9a9")
    ;;

    nick = D.nick;
    close = D.close;
    quote = arr.peek(D.quotes);
    ref = D.invs[0].ref;
    StDayTt = arr.reduce(
      D.invs,
      [0, 0, 0],
      \R, I ->  {
        stocks = I.stocks;
        price = I.price;
        return [
          R[0] + stocks,
          R[1] + stocks * (quote - (I.isNew ? price : close)),
          R[2] + stocks * (quote - price)
        ];
      }
    );
    stocks = StDayTt[0];
    dailyProfits = StDayTt[1];
    totalProfits = StDayTt[2];
    isSel = arr.any(CosSel, \c -> return c == nick;);
    isRebuy = arr.any(Rebuys, \r -> return r == nick;);
    dif = (quote - close) / close;
    rdif = close > ref ? ref / quote : quote / ref;


    return Q("tr")
        .add(Q("td").klass("chartLeft")
          .add(Q("span")
            .text(nick))
          .add(separator())
          .add(isSel
            ? ui.link(\e -> setSelected(nick, false);)
              .add(ui.img("unlink"))
            : ui.link(\e -> setSelected(nick, true);)
              .add(ui.img("link")))
          .add(separator())
          .add(Q("span")
            .style("font-size:small")
            .text(math.toIso(quote, quote >= 10 ? 2 : 3)))
          .add(separator())
          .add(dif > 0
            ? ui.img("money_plus")
            : dif < 0
              ? ui.img("money_minus")
              : ui.img("money"))
          .add(separator())
          .add(Q("span")
            .style("font-size:small;" + color(dif))
            .text(math.toIso(dif * 100, 2) + "%"))
          .add(Q("br"))
          .add(Q("span")
            .style("font-size:small;" + color(close > ref
                ? -1
                : isRebuy ? 0 : 1
              ))
            .text(math.toIso(rdif * 100, 2) + "%")
          ))
        .add(stocks > 0
          ? Q("td")
            .klass("chartRight")
            .add(Q("span")
              .style(color(dailyProfits))
              .text(math.toIso(dailyProfits, 2)))
            .add(Q("br"))
            .add(Q("span")
              .style(color(totalProfits))
              .text(math.toIso(totalProfits, 2)))
          : Q("td").klass("chartRight"))
    ;
  };

  // SUMMARY

  // \ -> ()
  mkSummary = \ -> {
    YesterdayValue = [0.0];
    TodayValue = [0,0];
    Labels = CosData[0].hours;
    size = arr.size(Labels);
    Values = arr.mk(size, 0);
    for (CD = CosData) {
      cl = CD.close;
      Quotes = CD.quotes;
      quote = arr.peek(Quotes);
      StYsTt = arr.reduce(
        CD.invs,
        [0, 0, 0],
        \R, I -> {
          stocks = I.stocks;
          price = I.price;
          return [
            R[0] + stocks,
            R[1] + stocks * (I.isNew ? price : cl),
            R[2] + stocks * price
          ];
        }
      );
      stocks = StYsTt[0];
      YesterdayValue! += StYsTt[1];
      ttPrice = StYsTt[2];
      for (i = 0:size) Values[i] += stocks * Quotes[i] - ttPrice;
      TodayValue! += stocks * quote;
    }
    yesterdayValue = YesterdayValue!;
    dailyProfits = TodayValue! - yesterdayValue;
    ratio = (dailyProfits) / yesterdayValue;
    CosChartValues = [arr.map(Values, \v -> return [v];)];

    MeData = IxsData[0];
    meYesterday = MeData.close;
    MeRatios = arr.map(
      MeData.quotes,
      \q -> return (q - meYesterday) / meYesterday;
    );
    IxsChartValues = arr.fromIter(iter.map(
      [1:arr.size(IxsData)],
      \i -> {
        Data = IxsData[i];
        yesterDay = Data.close;
        Quotes = Data.quotes;
        Values = arr.mk(size, [0]);
        usaZeroesV = [true];
        for (j = 0:size) {
          if (i == 3 & usaZeroesV!) {
            if (Quotes[j] == Quotes[0]) {
              Values[j] = [];
              continue;
            }
            usaZeroesV! = false;
          }
          Values[j] = j < 3
            ? [0]
            :[(MeRatios[j] - (Quotes[j] - yesterDay) / yesterDay)*100]
          ;
        }
        return Values;
      }
    ));

    // \s -> <domo>
    ixsText = \index -> {
      text = index == cts.meNick
        ? "DEMEX"
        : index == cts.ibexNick
          ? "IBEX"
          : index == cts.euroNick
            ? "EUROSTOXX"
            : "SP-500"
      ;
      txColor = index == cts.meNick
        ? "#000000"
        : index == cts.ibexNick
          ? "#000080"
          : index == cts.euroNick
            ? "#008000"
            : "#800000"
      ;

      Data = arr.find(IxsData, \D -> return D.nick == index;)!;
      v0 = Data.close;
      vf = arr.peek(Data.quotes);
      nmColor = vf > v0 ? "#00AAFF" : vf < v0 ? "#FF8100" : "#000000";
      return Q("span")
        .add(Q("span")
          .style("color:" + txColor)
          .html(text + ":&nbsp;"))
        .add(Q("span")
          .style("color:" + nmColor)
          .text(math.toIso(vf, 2) + "[" + math.toIso((vf-v0)*100/v0, 2) + "%]"))
      ;
    };



    wg
      .removeAll()
      .add(Q("div").style("text-align:center;")
        .add(Q("div")
          .klass("head")
          .style("padding-bottom:8px")
          .html(II("Summary")))
        .add(Q("div")
          .add(Q("span")
            .klass("frame")
            .style(
              'font-size:x-large;color:' +
              (ratio > 0 ? "#00AAFF" : ratio < 0 ? "#FF8100" : "#000000")
            )
            .html(
              " " + math.toIso(ratio * 100, 2) + "% | " +
              math.toIso(dailyProfits, 2) + "€ "
            )))
        .add(cosSummaryChart.mk(Labels, CosChartValues))
        .add(Q("table")
          .att("align", "center")
          .add(Q("tr")
            .add(Q("td")
              .style("text-align:left")
              .add(ixsText(cts.meNick)))
            .add(Q("td")
              .style("text-align:right")
              .add(ixsText(cts.euroNick))))
          .add(Q("tr")
            .add(Q("td")
              .style("text-align:left")
              .add(ixsText(cts.ibexNick)))
            .add(Q("td")
              .style("text-align:right")
              .add(ixsText(cts.usaNick))))
          .add(Q("tr")
            .add(Q("td")
              .att("colspan", 2)
              .add(ixsSummaryChart.mk(Labels, IxsChartValues)))))
        .add(Q("table")
          .att("align", "center")
          .add(Q("tr")
            .add(Q("td")
              .style("vertical-align:bottom")
              .add(clock.wg(clock.mk())
                .klass("frame")
                .style(
                  "background:radial-gradient(#000333,#e6f6f6);" +
                  "margin-top: 8px;"
                )))
            .add(Q("td")
              .style("vertical-align:bottom")
              .add(Q("iframe")
                .klass("frame")
                .att("width", "450px")
                .att("height", "133px")
                .att(
                  "src",
                  "http://www.aemet.es/es/eltiempo/prediccion/" +
                  "municipios/mostrarwidget/rivas-vaciamadrid-id28123?" +
                  "w=g4p01110001ohmffffffw450z133x4f86d9t95b6e9r0s4n1"
                ))))))
    ;
  };

  // COMPANIES

  // \ -> ()
  mkCos = \ -> {
    CosData2 =
      mSel == "portfolio"
        ? arr.filter(
            CosData,
            \D -> return arr.any(D.invs, \i -> return i.stocks > 0;);
          )
        : mSel == "sel"
          ? arr.filter(
              CosData,
              \D -> return arr.any(CosSel, \c -> return c == D.nick;);
            )
          : CosData
    ;
    switch (Order!) {
      cts.chartOrderSignal:
        arr.sort(
          CosData2,
          \D1, D2 -> {
            fn = \D -> {
              cl = D.close;
              q = arr.peek(D.quotes);
              return arr.reduce(D.invs, 0,
                \r, i -> return Math.max(r, cl > i.ref ? i.ref / q : q / i.ref);
              );
            };
            return fn(D1) > fn(D2);
          });
      cts.chartOrderDay:
        arr.sort(
          CosData2,
          \D1, D2 -> return (arr.peek(D1.quotes) - D1.close) / D1.close >
            (arr.peek(D2.quotes) - D2.close) / D2.close;
        );
      cts.chartOrderNick:
        arr.sort(CosData2, \D1, D2 -> return D1.nick < D2.nick;);
    }
    if (IsReverse!) arr.reverseIn(CosData2);

    menu = Q("table")
      .att("align", "center")
      .style("padding-bottom:6px")
      .add(Q("tr")
        .add(Q("td")
          .add(Q("span")
            .html(II("Order by") + ":&nbsp;&nbsp;&nbsp;"))
          .add(ui.link(\e -> { Order! = cts.chartOrderNick; Show!(); })
            .klass(Order! == cts.chartOrderNick ? "link frame" : "link")
            .text(II("Nick")))
          .add(Q("span")
            .html("&nbsp;&nbsp;&nbsp;"))
          .add(ui.link(\e -> { Order! = cts.chartOrderDay; Show!(); })
            .klass(Order! == cts.chartOrderDay ? "link frame" : "link")
            .text(II("Day")))
          .add(Q("span")
            .html("&nbsp;&nbsp;&nbsp;"))
          .add(ui.link(\e -> { Order! = cts.chartOrderSignal; Show!(); })
            .klass(Order! == cts.chartOrderSignal ? "link frame" : "link")
            .text(II("Signal")))
          .add(Q("span")
            .html("&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;"))
          .add(ui.link(\e -> { IsReverse! = !IsReverse!; Show!();})
            .klass(IsReverse! ? "link frame" : "link")
            .text(II("Reverse")))))
    ;

    size = arr.size(CosData2);
    table = Q("table")
      .att("align", "center")
      .klass("frame")
      .adds(size == 0
        ? [Q("tr")
          .add(Q("td")
            .text(II("No selected company")))
        ]
        : arr.fromIter(iter.map(
          [0:math.toInt((size - 1) / 3) + 1],
          \row ->
            return Q("tr")
              .adds(iter.map(
                [0:3],
                \col -> {
                  ix = row * 3 + col;
                  if (ix >= size) return Q("td");
                  D = CosData2[ix];
                  Labels = D.hours;
                  Values = [arr.map(D.quotes, \q -> return [q];)];
                  isRebuy = arr.any(Rebuys, \c -> return c == D.nick;);
                  ref = D.invs[0].ref;
                  isToSell = D.close > ref;
                  limRef = isToSell ? ref * 1.01 : ref * 0.99;
                  withRef0 = isToSell
                    ? arr.any(D.quotes, \q -> return q < limRef;)
                    : arr.any(D.quotes, \q -> return q > limRef;)
                  ;
                  withRef = withRef0
                    ? isToSell ? -1 : 1
                    : 0
                  ;
                  return Q("td")
                    .add(Q("table")
                      .klass("main")
                      .add(mkCoHead(D))
                      .add(Q("tr")
                        .add(Q("td")
                          .att("colspan", 2)
                          .add(Q("span")
                            .add(coChart.mk(
                                Labels, Values, isRebuy, withRef, ref
                              ))))))
                  ;
                }
              ));
        )))
    ;
    wg
      .removeAll()
      .add(menu)
      .add(table)
    ;
  };

  // \ -> ()
  Show! = \ -> {
    Lopts = [
      dmenu.mkHiddenButton(dbmenu),
      menu.separator2(),
      menu.tlink("summary", II("Summary"), ["daily"]),
      menu.separator2(),
      menu.tlink("portfolio", II("Portfolio"), ["daily"]),
      menu.separator(),
      menu.tlink("all", II("All CO's"), ["daily"]),
      menu.separator(),
      menu.tlink("sel", II("Selection"), ["daily"])
    ];

    Ropts = [
      menu.mkEntry([], activityWg),
      activity == cts.active | time.hour(time.now()) > 12 ?
        activity == cts.active
          ? menu.toption(activity, "[·]", reactivate)
          : menu.toption(activity, II("Sleeping"), reactivate)
        : menu.mkEntry([], activityWg),
      menu.separator2(),
      menu.mkEntry(
        [],
        Q("span")
          .style(color(dayProfits))
          .text(math.toIso(dayProfits, 2))
      ),
      menu.separator(),
      menu.mkEntry(
        [],
        Q("span")
          .style(color(totalProfits))
          .text(math.toIso(totalProfits, 2))
      ),
      menu.separator2(),
      menu.mkEntry([], serverWg),
      menu.separator(),
      menu.toption(">>", ">>", newServer)
    ];
    dmenu.setDownMenu(dbmenu, menu.mk(Lopts, Ropts, mSel, false));

    switch (mSel) {
      "portfolio", "all", "sel": mkCos();
      default: mkSummary();
    }
  };

  Show!();

  Tic = [0];
  tm = timer.mk(15000);
  timer.run(tm, \ -> {
    tic = Tic!;

    if (tic == 3) {
      timer.stop(tm);
      mk2(wg, dbmenu, mSel, Order!, IsReverse!);
      return 0;
    }

    Tic! += 1;
    if (activity == cts.active) {
      updateActivityWg(3 - tic);
    } else {
      updateActivityWg(-1);
    }

    return 1;
  });
};

/// Contents maker.
///   wg    : Container.
///   dbmenu: Double menu.
///   lcPath: Location path.
/// \<domo>, <dmenu>, [s...] -> ()
mk = async \wg, dbmenu, LcPath ->
  mk2(wg, dbmenu, LcPath ? LcPath[0] : "summary", cts.chartOrderSignal, false);;

