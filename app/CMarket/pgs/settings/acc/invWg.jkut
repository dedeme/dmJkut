// Copyright 11-Jul-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Accounting annotations of all one investor widget.

import "libdm/menu";
import "libdm/datePicker";
import "wgs/msg";
import "data/cts";
import "data/acc/ann";
import "data/acc/opr";
import "annotationsWg";
import "i18n";

Q = ui.q;
II = i18n.tlt;

// \s, <domo>, n -> <field>
mkField = \name, wg, width -> return {name, wg, width};;

// \s, s -> s
checkEmpty = \field, value ->
  if (value) return "";
  else return i18n.fmt(II("'%0' is empty"), [field]);
;

// \s, s -> s
checkInt = \field, value ->
  if (value & math.isDigits(value)) return "";
  else return i18n.fmt(II("'%0' is not a positive integer"), [field]);
;

// \s , s -> s
checkFloat = \field, value ->
  if (value & math.fromIso(value)) return "";
  else return i18n.fmt(II("'%0' is not a positive number"), [field]);
;

// \s -> s
dt2s = \d -> return time.toStr(time.fromIso(d, "/")!);;

/// \<domo>, i, s -> ()
mk2 = async \wg, inv, year0 -> {
  Rp = await client.send({
    prg: cts.appName,
    module: "Settings",
    source: "acc/InvWg",
    rq: "idata",
    inv,
    year: year0
  });
  if (!Rp.ok)
    msg.error(II("Some error was found.<br>See Log."), \->{});
  year = Rp.year; // s
  Years = Rp.years; // [s...]
  Anns = arr.map(Rp.anns, ann.fromJs);
  arr.sort(Anns, \A1, A2 -> return A1.date > A2.date;); // reverse order
  cash = Rp.cash; // n

  editor = Q("div");
  dtPck = datePicker.mk(true, time.now(), \d->{});

  ShowSelector = [[]];

  // Control -------------------------------------------------------------------

  // \<ann> -> ()
  sendAnn = async \Ann -> {
    await client.ssend({
      prg: cts.appName,
      module: "Settings",
      source: "acc/InvWg",
      rq: "new",
      inv,
      annotation: ann.toJs(Ann)
    });
    mk2(wg, inv, year);
  };

  // \i -> ()
  del = async \annId -> {
    Ann = arr.find(Anns, \A -> return A.id == annId;);
    if (!Ann) {
      ui.alert(i18n.fmt(II("Annotation con id '%0' not found"), ["" + annId]));
      return;
    }
    AnnJs = ann.toJs(Ann!);
    if (ui.confirm(i18n.fmt(II("Delete %0?"), [js.w(AnnJs)]))) {
      await client.ssend({
        prg: cts.appName,
        module: "Settings",
        source: "acc/InvWg",
        rq: "del",
        inv,
        annId
      });
      mk2(wg, inv, year);
    }
  };

  // \s -> ()
  changeYear = \y -> mk2(wg, inv, y);;

  // View ----------------------------------------------------------------------

  // \s, <domo> -> <domo>
  mkTypeDate = \tp, dt -> {
    dt.style("width:80px;text-align:center");
    return Q("tr").add(Q("td")
      .add(Q("table")
        .klass("main")
        .add(Q("tr")
          .add(Q("td")
            .klass("frame2")
            .style("text-align:center;vertical-align:bottom;")
            .html("<big><b>" + tp + "</big></b>"))
          .add(Q("td")
            .add(Q("table")
              .att("align", "right")
              .add(Q("tr")
                .add(Q("td").style("text-align:center;")
                  .html(II("Date"))))
              .add(Q("tr")
                .add(Q("td")
                .add(datePicker.mkText(dtPck, dt)))))))))
    ;
  };

  // \[<Field>...] -> <domo>
  mkFields = \Fields ->
    return Q("table")
      .klass("main")
      .add(Q("tr")
        .adds(arr.map(Fields, \F -> return Q("td")
            .style("text-align:center;")
            .html(F.name)
          ;)))
      .add(Q("tr")
        .adds(arr.map(Fields, \F -> return Q("td")
            .style("text-align:center;")
            .add(F.wg.style("width:" + F.width + "px"))
          ;)))
  ;;

  // \(\->()) -> <domo>
  mkCancelAccept = \f ->
    return Q("tr")
      .add(Q("td")
        .style("text-align:right;")
        .add(ui.link(\e -> ShowSelector!();)
          .klass("link")
          .text(II("Cancel")))
        .add(Q("span").html("&nbsp;&nbsp;&nbsp;"))
        .add(ui.link(\e -> f();)
          .klass("link")
          .text(II("Accept"))))
  ;;

  // \ -> ()
  sell = \ -> {
    // \<domo> -> s
    v = \field -> return str.trim(field.getValue());;
    dtf = Q("input").att("type", "text");
    nkf = Q("input").att("type", "text");
    stf = Q("input").att("type", "text");
    prf = Q("input").att("type", "text");
    ui.changePoint(prf);
    // \<ev> -> ()
    f = \ -> {
      R = [checkEmpty(II("Date"), v(dtf))];
      if (!R!) R! = checkEmpty(II("Nick"), v(nkf));
      if (!R!) R! = checkInt(II("Stocks"), v(stf));
      if (!R!) R! = checkFloat(II("Price"), v(prf));
      if (!R!)
        sendAnn(ann.mk(-1, dt2s(v(dtf)), opr.mkSe(
          v(nkf), math.fromStr(v(stf))!, math.fromIso(v(prf))!
        )));
      else
        ui.alert(R!);
    };

    editor
      .removeAll().
      add(Q("table")
        .klass("main")
        .add(mkTypeDate(II("Sell"), dtf))
        .add(mkFields([
          mkField(II("Nick"), nkf, 50),
          mkField(II("Stocks"), stf, 40),
          mkField(II("Price"), prf, 75)
        ]))
        .add(mkCancelAccept(f)));
  };

  // \ -> ()
  buy = \ -> {
    // \<domo> -> s
    v = \field -> return str.trim(field.getValue());;
    dtf = Q("input").att("type", "text");
    nkf = Q("input").att("type", "text");
    stf = Q("input").att("type", "text");
    prf = Q("input").att("type", "text");
    ui.changePoint(prf);
    // \<ev> -> ()
    f = \ -> {
      R = [checkEmpty(II("Date"), v(dtf))];
      if (!R!) R! = checkEmpty(II("Nick"), v(nkf));
      if (!R!) R! = checkInt(II("Stocks"), v(stf));
      if (!R!) R! = checkFloat(II("Price"), v(prf));
      if (!R!)
        sendAnn(ann.mk(-1, dt2s(v(dtf)), opr.mkBu(
          v(nkf), math.fromStr(v(stf))!, math.fromIso(v(prf))!
        )));
      else
        ui.alert(R!);
    };

    editor
      .removeAll().
      add(Q("table")
        .klass("main")
        .add(mkTypeDate(II("Buy"), dtf))
        .add(mkFields([
          mkField(II("Nick"), nkf, 50),
          mkField(II("Stocks"), stf, 40),
          mkField(II("Price"), prf, 75)
        ]))
        .add(mkCancelAccept(f)));
  };

  // \ -> ()
  income = \ -> {
    // \<domo> -> s
    v = \field -> return str.trim(field.getValue());;
    dtf = Q("input").att("type", "text");
    amf = Q("input").att("type", "text");
    ui.changePoint(amf);
    // \<ev> -> ()
    f = \ -> {
      R = [checkEmpty(II("Date"), v(dtf))];
      if (!R!) R! = checkFloat(II("Amount"), v(amf));
      if (!R!)
        sendAnn(ann.mk(-1, dt2s(v(dtf)), opr.mkIn(
          math.fromIso(v(amf))!
        )));
      else
        ui.alert(R!);
    };

    editor
      .removeAll().
      add(Q("table")
        .klass("main")
        .add(mkTypeDate(II("Income"), dtf))
        .add(mkFields([
          mkField(II("Amount"), amf, 80)
        ]))
        .add(mkCancelAccept(f)));
  };

  // \ -> ()
  withdrawal = \ -> {
    // \<domo> -> s
    v = \field -> return str.trim(field.getValue());;
    dtf = Q("input").att("type", "text");
    amf = Q("input").att("type", "text");
    ui.changePoint(amf);
    // \<ev> -> ()
    f = \ -> {
      R = [checkEmpty(II("Date"), v(dtf))];
      if (!R!) R! = checkFloat(II("Amount"), v(amf));
      if (!R!)
        sendAnn(ann.mk(-1, dt2s(v(dtf)), opr.mkWi(
          math.fromIso(v(amf))!
        )));
      else
        ui.alert(R!);
    };

    editor
      .removeAll().
      add(Q("table")
        .klass("main")
        .add(mkTypeDate(II("Withdrawal"), dtf))
        .add(mkFields([
          mkField(II("Amount"), amf, 80)
        ]))
        .add(mkCancelAccept(f)));
  };

  // \ -> ()
  profits = \ -> {
    // \<domo> -> s
    v = \field -> return str.trim(field.getValue());;
    dtf = Q("input").att("type", "text");
    amf = Q("input").att("type", "text");
    ui.changePoint(amf);
    def = Q("input").att("type", "text");
    // \<ev> -> ()
    f = \ -> {
      R = [checkEmpty(II("Date"), v(dtf))];
      if (!R!) R! = checkFloat(II("Amount"), v(amf));
      if (!R!) R! = checkEmpty(II("Description"), v(def));
      if (!R!)
        sendAnn(ann.mk(-1, dt2s(v(dtf)), opr.mkPr(
          math.fromIso(v(amf))!, v(def)
        )));
      else
        ui.alert(R!);
    };

    editor
      .removeAll().
      add(Q("table")
        .klass("main")
        .add(mkTypeDate(II("Profits"), dtf))
        .add(mkFields([
          mkField(II("Amount"), amf, 80),
          mkField(II("Description"), def, 220)
        ]))
        .add(mkCancelAccept(f)));
  };

  // \ -> ()
  fees = \ -> {
    // \<domo> -> s
    v = \field -> return str.trim(field.getValue());;
    dtf = Q("input").att("type", "text");
    amf = Q("input").att("type", "text");
    ui.changePoint(amf);
    def = Q("input").att("type", "text");
    // \<ev> -> ()
    f = \ -> {
      R = [checkEmpty(II("Date"), v(dtf))];
      if (!R!) R! = checkFloat(II("Amount"), v(amf));
      if (!R!) R! = checkEmpty(II("Description"), v(def));
      if (!R!)
        sendAnn(ann.mk(-1, dt2s(v(dtf)), opr.mkFe(
          math.fromIso(v(amf))!, v(def)
        )));
      else
        ui.alert(R!);
    };

    editor
      .removeAll().
      add(Q("table")
        .klass("main")
        .add(mkTypeDate(II("Fees"), dtf))
        .add(mkFields([
          mkField(II("Amount"), amf, 80),
          mkField(II("Description"), def, 220)
        ]))
        .add(mkCancelAccept(f)));
  };

  // \ -> ()
  diffP = \ -> {
    // \<domo> -> s
    v = \field -> return str.trim(field.getValue());;
    dtf = Q("input").att("type", "text");
    amf = Q("input").att("type", "text");
    ui.changePoint(amf);
    def = Q("input").att("type", "text");
    // \<ev> -> ()
    f = \ -> {
      R = [checkEmpty(II("Date"), v(dtf))];
      if (!R!) R! = checkFloat(II("Amount"), v(amf));
      if (!R!) R! = checkEmpty(II("Diff. +"), v(def));
      if (!R!)
        sendAnn(ann.mk(-1, dt2s(v(dtf)), opr.mkPd(
          math.fromIso(v(amf))!, v(def)
        )));
      else
        ui.alert(R!);
    };

    editor
      .removeAll().
      add(Q("table")
        .klass("main")
        .add(mkTypeDate(II("Fees"), dtf))
        .add(mkFields([
          mkField(II("Amount"), amf, 80),
          mkField(II("Diff. +"), def, 220)
        ]))
        .add(mkCancelAccept(f)));
  };

  // \ -> ()
  diffN = \ -> {
    // \<domo> -> s
    v = \field -> return str.trim(field.getValue());;
    dtf = Q("input").att("type", "text");
    amf = Q("input").att("type", "text");
    ui.changePoint(amf);
    def = Q("input").att("type", "text");
    // \<ev> -> ()
    f = \ -> {
      R = [checkEmpty(II("Date"), v(dtf))];
      if (!R!) R! = checkFloat(II("Amount"), v(amf));
      if (!R!) R! = checkEmpty(II("Description"), v(def));
      if (!R!)
        sendAnn(ann.mk(-1, dt2s(v(dtf)), opr.mkNd(
          math.fromIso(v(amf))!, v(def)
        )));
      else
        ui.alert(R!);
    };

    editor
      .removeAll().
      add(Q("table")
        .klass("main")
        .add(mkTypeDate(II("Diff. -"), dtf))
        .add(mkFields([
          mkField(II("Amount"), amf, 80),
          mkField(II("Description"), def, 220)
        ]))
        .add(mkCancelAccept(f)));
  };

  // \ -> ()
  ShowSelector! = \ -> {
    // \ -> <domo>
    td = \ -> return Q("td").style("width:50%;");;
    // \s, (\ev->()) -> <domo>
    lk = \tx, f -> return ui.link(f).klass("link").html(tx);;
    editor
      .removeAll()
      .add(Q("table").klass("main")
        .add(Q("tr")
          .add(td().add(lk(II("Sell"), \e -> sell();)))
          .add(td().add(lk(II("Buy"), \e -> buy();))))
        .add(Q("tr")
          .add(td().add(lk(II("Income"), \e -> income();)))
          .add(td().add(lk(II("Withdrawal"), \e -> withdrawal();))))
        .add(Q("tr")
          .add(td().add(lk(II("Profits"), \e -> profits();)))
          .add(td().add(lk(II("Fees"), \e -> fees();))))
        .add(Q("tr")
          .add(td().add(lk(II("Diff. +"), \e -> diffP();)))
          .add(td().add(lk(II("Diff. -"), \e -> diffN();)))))
    ;
  };

  Lopts = [];
  arr.eachIx(Years, \y, i -> {
    if (i > 0) arr.push(Lopts, menu.separator());
    arr.push(Lopts, menu.toption(y, y, \ -> changeYear(y);));
  });
  menuWg = menu.mk(Lopts, [], year, false);

  annsWg = Q("div");
  if (year == Years[0]) annotationsWg.mk(annsWg, Anns, [del]);
  else annotationsWg.mk(annsWg, Anns, []);

  ShowSelector!();

  wg
    .removeAll()
    .add(menuWg)
    .add(Q("div")
      .add(Q("div")
        .klass("head")
        .html(II("Annotations")))
      .add(Q("table")
        .att("align", "center")
        .klass("frame3")
          .add(Q("tr")
            .add(Q("td")
              .add(editor)))
          .add(Q("tr")
            .add(Q("td")
              .add(Q("hr"))))
        .add(Q("tr")
          .add(Q("td")
            .add(Q("table")
              .att("align", "right")
              .add(Q("tr")
                .add(Q("td")
                  .klass("rlabel")
                  .add(Q("span")
                    .html(II("Cash:"))))
                .add(Q("td")
                  .klass("number")
                  .text(math.toIso(cash, 2)))
                .add(Q("td"))))))
        .add(Q("tr")
          .add(Q("td").klass("frame")
            .add(annsWg)))))
  ;
};

/// \<domo>, i -> ()
mk = \wg, inv -> mk2(wg, inv, "");;
