// Copyright 03-Sep-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Budget data

import "plan";

/// Constructor
/// \[<budgetMonth>.] -> d<budget>
mk = \entries -> return {entries};;

/// Returns an empty budget.
/// \<plan> -> <budget>
mkEmpty = \Plan -> arr.fromIter(iter.map(
    [0:12], \i -> return mkEmptyMonth(Plan);
  ));;

/// Sets the amount of an annotation.
/// If accId is not found, it does nothing.
///   Budget : Budget.
///   monthIx: From 0 to 11 both inclusive.
///   accId  : Account identifier.
///   am     : Amount.
/// \<budget>, n, s, n -> ()
setAmount = \Budget, monthIx, accId, am -> {
  Anns = Budget.entries[monthIx].anns;
  for (i = 0:arr.size(Anns)) {
    if (Anns[i].accId == accId) {
      Anns[i] = mkAnn(accId, am);
      break;
    }
  }
};

/// Remove accounts not used and add new empty accounts
/// \<budget>, <plan> -> ()
cleanAndComplete = \Budget, Plan -> {
  Months = Budget.entries;
  for (i = 0:12) Months[i] = cleanAndCompleteMonth(Months[i], Plan);
};

/// Returns the value of an account between months. It is ever positive.
/// fromMonthIx and toMonthIx are between 0 and 11, both inclusive.
/// \<budget>, s, n, n -> n
accAmount = \Budget, accId, fromMonthIx, toMonthIx -> {
  sumV = [0];
  for (i = fromMonthIx:toMonthIx) {
    Month = Budget.entries[i];
    for (A = Month.anns) if (A.accId == accId) sumV! += A.am;
  }
  return sumV!;
};

/// Returns the budget balance between months.
/// fromMonthIx and toMonthIx are between 0 and 11, both inclusive.
/// \<budget>, <plan>, n, n -> n
totalAmount = \Budget, Plan, fromMonthIx, toMonthIx -> {
  sumV = [0];
  for (i = fromMonthIx:toMonthIx) {
    Month = Budget.entries[i];
    for (A = Month.anns)
      if (plan.isIncome(Plan, A.accId)) sumV! += A.am;
      else sumV! -= A.am;
  }
  return sumV!;
};

/// \<budget> -> JS
toJs = \B -> return arr.map(B.entries, monthToJs);;

/// \JS -> <budget>
fromJs = \A -> return mk(arr.map(A, monthFromJs));;

// Month -----------------------------------------------------------------------

/// Returns a budgetMonth data.
/// \[<budgetAnn>.] -> d<budgetMonth>
mkMonth = \anns -> return {anns};;

/// Returns an empty budgetMonth data.
/// \<plan> -> <budgetMonth>
mkEmptyMonth = \Plan -> return mkMonth(arr.map(Plan.entries, \E ->
    return mkAnn(E.id, 0);
  ));;

/// Remove accounts not used and add new empty accounts
/// \<budgetMonth>, <plan> -> ()
cleanAndCompleteMonth = \Month, Plan -> {
  Anns = Month.anns;
  NewAnns = arr.map(Plan.entries, \E -> {
    for (Ann = Anns)
      if (Ann.accId == E.id) return mkAnn(Ann.accId, Ann.am);
    return mkAnn(E.id, 0);
  });
  arr.clear(Anns);
  for (Ann = NewAnns) arr.push(Anns, Ann);
};

/// \<monthBudget> -> JS
monthToJs = \M -> return arr.map(M.anns, annToJs);;

/// \js -> <monthBudget>
monthFromJs = \A -> return mkMonth(arr.map(A, annFromJs));;

// Annotation ------------------------------------------------------------------

/// Returns a budget annotation.
/// \s, n -> d<budgetAnn>
mkAnn = \accId, am -> return {accId, am};;

/// \<budgetAnn> -> JS
annToJs = \Ann -> return [Ann.accId, Ann.am];;

/// \JS -> <budgetAnn>
annFromJs = \A -> return mkAnn(A[0], A[1]);;
