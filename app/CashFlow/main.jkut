// Copyright 29-Aug-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Program starting.

import "libdm/menu";
import "data/cts";
import "data/month";
import "pgs/msgPg";
import "pgs/yearPg";
import "pgs/budgetPg";
import "pgs/planPg";
import "fns";
import "i18n";

Q = ui.q;
II = i18n.tlt;

// \<domo> -> ()
mk = async \wg -> {
  ok = await client.connect();
  if (!ok) {
    ui.alert(II("KtWeb session is closed.\nAuthenticating from KtWeb:Main."));
    window.location.assign("http://" + window.location.host + "/Main");
    return;
  }

  Rp = await client.send({
    prg: "Main", // Call to KtWeb:Main
    source: "Main",
    rq: "lang"
  });
  if (Rp.lang == "en") i18n.en();

  Url = ui.url();

  now = time.now();
  page = dic.hasKey(Url, "0") ? Url["0"] : "budget";

  currentYear = time.fmt("%Y", now);
  selectedYear = dic.hasKey(Url, "1")
    ? fns.validateYear(Url["1"])
    : currentYear
  ;

  isUntil = dic.hasKey(Url, "2")
    ? Url["2"] == "true"
    : false
  ;

  currentMonth = time.month(now);
  selectedMonth = dic.hasKey(Url, "3")
    ? month.toIx(Url["3"])
    : currentMonth
  ;

  selLink = page + "&" + selectedYear;
  myear = menu.tlink("year&" + selectedYear, selectedYear, []);
  if (selectedYear != currentYear) myear.wg.setStyle("color", "#800000");
  Lopts = [
    myear,
    menu.separator(),
    menu.tlink("budget&" + selectedYear, II("Budget"), []),
    menu.separator(),
    menu.tlink("plan&" + selectedYear, II("Plan"), [])
  ];
  menuWg = menu.mk(Lopts, [], selLink, false);

  body = Q("div");
  switch (page) {
    "year": yearPg.mk(body, selectedYear);
    "plan": planPg.mk(body, selectedYear);
    default: budgetPg.mk(
        body, selectedYear, isUntil, selectedMonth
      );
  }

  wg
    .removeAll()
    .add(menuWg)
    .add(body)
  ;
};

// Main ========================================================================

wg = Q("div");

/// Load main window
load = \ -> {
  mk(wg);
};

client.init(true, "KtWeb", \ -> {
  msgWg = Q("div");
  msgPg.mk(msgWg, II("Session is expired."), true);
  Q("@body")
    .removeAll()
    .add(msgWg)
    .add(cts.foot)
  ;
});

Q("@body")
  .removeAll()
  .add(wg)
  .add(cts.foot)
  .add(ui.upTop("up"))
;

load();

try {
  Q("#autofocus").e.focus();
} catch (e) {}

