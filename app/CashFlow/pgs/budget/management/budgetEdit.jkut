// Copyright 03-Sep-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Budget edit page.

import "data/diary";
import "data/budget";
import "data/plan";
import "data/month";
import "data/cts";
import "data/budgetEntry";
import "wgs/numberField";
import "i18n";

Q = ui.q;
II = i18n.tlt;

// Editor budget entry.
// \b, s, n, n -> d<budgetEntry>
mkBudgetEntry = budgetEntry.mk;

// \[<budgetEntry>.] -> n
sumBudget = budgetEntry.sumBudget;

// \[<budgetEntry>.] -> n
sumReal = budgetEntry.sumReal;

// \[<budgetEntry>.] -> n
sumDif = budgetEntry.sumDif;

/// Constructor
///   wg: Container.
///   selectedYear: Year edited.
///   selectedMonth: Month edited (from 1 to 12).
///   Plan: Budget plan.
///   Diary: Diary annotations.
///   Budget: Current budget.
///   PreviousBudget: Previous Budget.
///   updateFinalBalanceFn: Funtion to update balance.
/// \<domo>, s, n, <plan>, <diary>, <budget>, <budget>, (\-> ()) -> ()
mk = \wg, selectedYear, selectedMonth,
      Plan, Diary, Budget, PreviousBudget, updateFinalBalanceFn -> {

  showOp = [[]];

  // Control -------------------------------------------------------------------

  // \ -> ()
  updateBudget = async \ -> {
    await client.ssend({
      prg: cts.appName,
      source: "BudgetEdit",
      rq: "updateBudget",
      year: selectedYear,
      budget: budget.toJs(Budget)
    });

    updateFinalBalanceFn();
    showOp!();
  };

  // \s -> ()
  setReal = \id -> {
    budget.setAmount(
      Budget,
      selectedMonth - 1,
      id,
      diary.accAmount(Diary, id, selectedMonth - 1, selectedMonth)
    );
    updateBudget();
  };

  // \s -> ()
  setMonth = \id -> {
    m = selectedMonth <= 0 ? 12 : selectedMonth - 1;
    B = selectedMonth <= 0 ? PreviousBudget : Budget;
    am = budget.accAmount(B, id, m - 1, m);
    if (am == 0) {
      ui.alert(II("There is not value for previous month"));
      showOp!();
      Q("#" + id).e.focus();
      return;
    }
    budget.setAmount(Budget, selectedMonth - 1, id, am);
    updateBudget();
  };

  // \s -> ()
  setYear = \id -> {
    am = budget.accAmount(PreviousBudget, id, selectedMonth - 1, selectedMonth);
    if (am == 0) {
      ui.alert(II("There is not value for previous year"));
      showOp!();
      Q("#" + id).e.focus();
      return;
    }
    budget.setAmount(Budget, selectedMonth - 1, id, am);
    updateBudget();
  };

  // \s, n -> ()
  changeAmount = \id, am -> {
    if (am < 0) {
      ui.alert(II("Values less than 0 are not allowed"));
      showOp!();
      Q("#" + id).e.focus();
      return;
    }
    budget.setAmount(Budget, selectedMonth - 1, id, am);
    updateBudget();
  };

  // View ----------------------------------------------------------------------

  // \ -> ()
  showOp! = \ -> {
    BudgetModel = []; // [<budgetEntry>.]
    for (Pe = Plan.entries) {
      arr.push(BudgetModel, mkBudgetEntry(
        Pe.isIncome, Pe.id,
        budget.accAmount(Budget, Pe.id, selectedMonth -1, selectedMonth),
        diary.accAmount(Diary, Pe.id, selectedMonth -1, selectedMonth)
      ));
    }

    Incomes = arr.filter(BudgetModel, \E -> return E.isIncome;);
    arr.sort(Incomes, \E1, E2 -> return E1.accId < E2.accId;);
    Expenses = arr.filter(BudgetModel, \E -> return !E.isIncome;);
    arr.sort(Expenses, \E1, E2 -> return E1.accId < E2.accId;);
    sz = arr.size(Incomes) > arr.size(Expenses)
      ? arr.size(Incomes)
      : arr.size(Expenses)
    ;

    wg
      .removeAll()
      .add(Q("div")
        .style("padding:5px;text-align:center")
        .html("<hr><br>" + II("Budget")))
        .add(Q("table")
          .att("align", "center")
          .klass("summary")
          .add(Q("tr")
            .add(Q("td")
              .att("colspan", "5")
              .style("text-align:center")
              .text(II("Incomes")))
            .add(Q("td")
              .text(""))
            .add(Q("td")
              .att("colspan", "5")
              .style("text-align:center")
              .text(II("Expenses"))))
          .add(Q("tr")
            .add(Q("td")
              .klass("frameTx")
              .style("background-color:#d9d9d9")
              .text(II("Account")))
            .add(Q("td")
              .klass("frameTx")
              .style("background-color:#d9d9d9")
              .text(""))
            .add(Q("td")
              .klass("frameTx")
              .style("background-color:#d9d9d9;white-space: nowrap;")
              .text(II("Budget (A)")))
            .add(Q("td")
              .klass("frameTx")
              .style("background-color:#d9d9d9;white-space: nowrap;")
              .text(II("Real (B)")))
            .add(Q("td")
              .klass("frameTx")
              .style("background-color:#d9d9d9;white-space: nowrap;")
              .text(II("Dif. (B - A))")))
            .add(Q("td")
              .klass("frameTx")
              .text(""))
            .add(Q("td")
              .klass("frameTx")
              .style("background-color:#d9d9d9")
              .text(II("Account")))
            .add(Q("td")
              .klass("frameTx")
              .style("background-color:#d9d9d9")
              .text(""))
            .add(Q("td")
              .klass("frameTx")
              .style("background-color:#d9d9d9;white-space: nowrap;")
              .text(II("Budget (A)")))
            .add(Q("td")
              .klass("frameTx")
              .style("background-color:#d9d9d9;white-space: nowrap;")
              .text(II("Real (B)")))
            .add(Q("td")
              .klass("frameTx")
              .style("background-color:#d9d9d9;white-space: nowrap;")
              .text(II("Dif. (B - A))"))))
          .adds(iter.map([0:sz], \i -> return Q("tr")
              .adds(i >= arr.size(Incomes)
                ? iter.map([0:5], \j -> return Q("td")
                    .klass("frameTx")
                    .style("background-color:#f9f9f9")
                  ;)
                : [
                    Q("td")
                      .klass("frameTx")
                      .style("background-color:#d9d9d9")
                      .att("title", plan.desc(Plan, Incomes[i].accId))
                      .text(Incomes[i].accId),
                    Q("td")
                      .klass("frameTx")
                      .style("background-color:#f9f9f9;white-space: nowrap;")
                      .add(ui.link(\ev -> setReal(Incomes[i].accId);)
                        .klass("link")
                        .text(II("real")))
                      .add(Q("span").html("&nbsp;&nbsp;"))
                      .add(ui.link(\ev -> setMonth(Incomes[i].accId);)
                        .klass("link")
                        .text(II("month")))
                      .add(Q("span").html("&nbsp;&nbsp;"))
                      .add(ui.link(\ev -> setYear(Incomes[i].accId);)
                        .klass("link")
                        .text(II("year")))
                        ,
                    Q("td")
                      .klass("frameNm")
                      .style("background-color:#f9f9f9")
                      .add(numberField.mk(
                          Incomes[i].accId, Expenses[0].accId,
                          Incomes[i].budget, changeAmount
                        )),
                    Q("td")
                      .klass("frameNm")
                      .style("background-color:#f9f9f9")
                      .text(math.toIso(Incomes[i].real, 2)),
                    Q("td")
                      .klass("frameNm")
                      .style("background-color:#f9f9f9")
                      .text(math.toIso(Incomes[i].dif, 2))
                  ])
              .add(Q("td")
                .klass("frameTx"))
              .adds(i >= arr.size(Expenses)
                ? iter.map([0:5], \j -> return Q("td")
                    .klass("frameTx")
                    .style("background-color:#f9f9f9")
                  ;)
                : [
                    Q("td")
                      .klass("frameTx")
                      .style("background-color:#d9d9d9")
                      .att("title", plan.desc(Plan, Expenses[i].accId))
                      .text(Expenses[i].accId),
                    Q("td")
                      .klass("frameTx")
                      .style("background-color:#f9f9f9;white-space: nowrap;")
                      .add(ui.link(\ev -> setReal(Expenses[i].accId);)
                        .klass("link")
                        .text(II("real")))
                      .add(Q("span").html("&nbsp;&nbsp;"))
                      .add(ui.link(\ev -> setMonth(Expenses[i].accId);)
                        .klass("link")
                        .text(II("month")))
                      .add(Q("span").html("&nbsp;&nbsp;"))
                      .add(ui.link(\ev -> setYear(Expenses[i].accId);)
                        .klass("link")
                        .text(II("year")))
                        ,
                    Q("td")
                      .klass("frameNm")
                      .style("background-color:#f9f9f9")
                      .add(numberField.mk(
                          Expenses[i].accId, Incomes[0].accId,
                          Expenses[i].budget, changeAmount
                        )),
                    Q("td")
                      .klass("frameNm")
                      .style("background-color:#f9f9f9")
                      .text(math.toIso(Expenses[i].real, 2)),
                    Q("td")
                      .klass("frameNm")
                      .style("background-color:#f9f9f9")
                      .text(math.toIso(Expenses[i].dif, 2))
                  ])
            ;))
          .add(Q("tr")
            .add(Q("td")
              .att("colsapan", "9")))
          .add(Q("tr")
            .add(Q("td")
              .klass("frameTx")
              .style("background-color:#d9d9d9")
              .text(II("Total")))
            .add(Q("td")
              .klass("frameNm")
              .style("background-color:#f9f9f9")
              .text(""))
            .add(Q("td")
              .klass("frameNm")
              .style("background-color:#f9f9f9")
              .text(math.toIso(sumBudget(Incomes), 2)))
            .add(Q("td")
              .klass("frameNm")
              .style("background-color:#f9f9f9")
              .text(math.toIso(sumReal(Incomes), 2)))
            .add(Q("td")
              .klass("frameNm")
              .style("background-color:#f9f9f9")
              .text(math.toIso(sumDif(Incomes), 2)))
            .add(Q("td")
              .klass("frameTx"))
            .add(Q("td")
              .klass("frameTx")
              .style("background-color:#d9d9d9")
              .text(II("Total")))
            .add(Q("td")
              .klass("frameNm")
              .style("background-color:#f9f9f9")
              .text(""))
            .add(Q("td")
              .klass("frameNm")
              .style("background-color:#f9f9f9")
              .text(math.toIso(sumBudget(Expenses), 2)))
            .add(Q("td")
              .klass("frameNm")
              .style("background-color:#f9f9f9")
              .text(math.toIso(sumReal(Expenses), 2)))
            .add(Q("td")
              .klass("frameNm")
              .style("background-color:#f9f9f9")
              .text(math.toIso(sumDif(Expenses), 2)))))
   ;
  };

  showOp!();
};

