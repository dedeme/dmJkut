// Copyright 03-Sep-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Budget view page.

import "libdm/modalBox";
import "data/diary";
import "data/budget";
import "data/plan";
import "data/month";
import "data/cts";
import "data/budgetEntry";
import "i18n";

Q = ui.q;
II = i18n.tlt;

// Editor budget entry.
// \b, s, n, n -> d<budgetEntry>
mkBudgetEntry = budgetEntry.mk;

// \[<budgetEntry>.] -> n
sumBudget = budgetEntry.sumBudget;

// \[<budgetEntry>.] -> n
sumReal = budgetEntry.sumReal;

// \[<budgetEntry>.] -> n
sumDif = budgetEntry.sumDif;

/// Constructor
///   wg: Container.
///   selectedYear: Year edited.
///   isUntil: 'true' if values calculates are of every month until 'selectedMonth'.
///   selectedMonth: Month edited (from 1 to 12).
///   Plan: Budget plan.
///   Diary: Diary annotations.
///   Budget: Current budget.
/// \<domo>, s, b, n, <plan>, <diary>, <budget> -> ()
mk = \wg, selectedYear, isUntil, selectedMonth, Plan, Diary, Budget -> {

  start = isUntil ? 0 : selectedMonth -1;
  DiaryEntries = diary.filterReverse(Diary, start, selectedMonth);

  BudgetModel = []; // [<budgetEntry>.]
  for (Pe = Plan.entries) {
    arr.push(BudgetModel, mkBudgetEntry(
      Pe.isIncome, Pe.id,
      budget.accAmount(Budget, Pe.id, start, selectedMonth),
      diary.accAmount(Diary, Pe.id, start, selectedMonth)
    ));
  }

  accWg = Q("div");
  accBox = modalBox.mk(accWg, false);

  /// Control ------------------------------------------------------------------

  // \ -> ()
  updateDiary = async \ -> {
    await client.ssend({
      prg: cts.appName,
      source: "BudgetView",
      rq: "updateDiary",
      year: selectedYear,
      diary: diary.toJs(Diary)
    });
    window.location.reload();
  };

  // \[n, <diaryEntry>] -> ()
  del = \Ann -> {
    if (!ui.confirm(i18n.fmt(II("Delete '%0'?"), [Ann[1].desc]))) return;

    diary.del(Diary, Ann[0]);
    updateDiary();
  };

  /// View ---------------------------------------------------------------------

  // \s -> ()
  account = \id -> {
    BudgetMs = []; // [n.]
    BudgetSs = []; // [n.]
    budgetSumV = [0];
    RealMs = []; // [n.]
    RealSs = []; // [n.]
    realSumV = [0];
    for (i = 0:12) {
      b = budget.accAmount(Budget, id, i, i + 1);
      budgetSumV! += b;
      arr.push(BudgetMs, b);
      arr.push(BudgetSs, budgetSumV!);
      r = diary.accAmount(Diary, id, i, i + 1);
      realSumV! += r;
      arr.push(RealMs, r);
      arr.push(RealSs, realSumV!);
    }

    accWg
      .removeAll()
      .add(Q("div")
        .klass("head")
        .text(id))
      .add(Q("table")
        .klass("main")
        .add(Q("tr")
          .add(Q("td"))
          .add(Q("td"))
          .add(Q("td")
            .att("colspan", "2")
            .style("text-align:center")
            .text(II("Budget (A)")))
          .add(Q("td"))
          .add(Q("td")
            .att("colspan", "2")
            .style("text-align:center")
            .text(II("Real (B)")))
          .add(Q("td"))
          .add(Q("td")
            .att("colspan", "2")
            .style("text-align:center")
            .text(II("Dif. (B - A))"))))
        .add(Q("tr")
          .add(Q("td"))
          .add(Q("td"))
          .add(Q("td")
            .klass("frameNm")
            .style("background-color:#d9d9d9")
            .text(II("Month")))
          .add(Q("td")
            .klass("frameNm")
            .style("background-color:#d9d9d9")
            .text(II("Sum")))
          .add(Q("td"))
          .add(Q("td")
            .klass("frameNm")
            .style("background-color:#d9d9d9")
            .text(II("Month")))
          .add(Q("td")
            .klass("frameNm")
            .style("background-color:#d9d9d9")
            .text(II("Sum")))
          .add(Q("td"))
          .add(Q("td")
            .klass("frameNm")
            .style("background-color:#d9d9d9")
            .text(II("Month")))
          .add(Q("td")
            .klass("frameNm")
            .style("background-color:#d9d9d9")
            .text(II("Sum"))))
        .adds(iter.map([0:12], \i -> return Q("tr")
            .add(Q("td")
              .klass("frameTx")
              .style("background-color:#d9d9d9")
              .text(month.name(i + 1)))
            .add(Q("td"))
          .add(Q("td")
            .klass("frameNm")
            .style("background-color:#f9f9f9")
            .text(math.toIso(BudgetMs[i], 2)))
          .add(Q("td")
            .klass("frameNm")
            .style("background-color:#f9f9f9")
            .text(math.toIso(BudgetSs[i], 2)))
          .add(Q("td"))
          .add(Q("td")
            .klass("frameNm")
            .style("background-color:#f9f9f9")
            .text(math.toIso(RealMs[i], 2)))
          .add(Q("td")
            .klass("frameNm")
            .style("background-color:#f9f9f9")
            .text(math.toIso(RealSs[i], 2)))
          .add(Q("td"))
          .add(Q("td")
            .klass("frameNm")
            .style("background-color:#f9f9f9")
            .text(math.toIso(BudgetMs[i] - RealMs[i], 2)))
          .add(Q("td")
            .klass("frameNm")
            .style("background-color:#f9f9f9")
            .text(math.toIso(BudgetSs[i] - RealSs[i], 2)));)))
      .add(Q("div")
        .klass("head")
        .add(Q("button")
          .text(II("Accept"))
          .on("click", \ev -> modalBox.show(accBox, false);)))
    ;

    modalBox.show(accBox, true);
  };


  Incomes = arr.filter(BudgetModel, \E -> return E.isIncome;);
  arr.sort(Incomes, \E1, E2 -> return E1.accId < E2.accId;);
  Expenses = arr.filter(BudgetModel, \E -> return !E.isIncome;);
  arr.sort(Expenses, \E1, E2 -> return E1.accId < E2.accId;);
  sz = arr.size(Incomes) > arr.size(Expenses)
    ? arr.size(Incomes)
    : arr.size(Expenses)
  ;

  wg
    .removeAll()
    .add(Q("div")
      .style("padding:5px;text-align:center")
      .html("<hr><br>" + II("Budget")))
      .add(Q("table")
        .att("align", "center")
        .klass("summary")
        .add(Q("tr")
          .add(Q("td")
            .att("colspan", "4")
            .style("text-align:center")
            .text(II("Incomes")))
          .add(Q("td")
            .text(""))
          .add(Q("td")
            .att("colspan", "4")
            .style("text-align:center")
            .text(II("Expenses"))))
        .add(Q("tr")
          .add(Q("td")
            .klass("frameTx")
            .style("background-color:#d9d9d9")
            .text(II("Account")))
          .add(Q("td")
            .klass("frameNm")
            .style("background-color:#d9d9d9")
            .text(II("Budget (A)")))
          .add(Q("td")
            .klass("frameNm")
            .style("background-color:#d9d9d9")
            .text(II("Real (B)")))
          .add(Q("td")
            .klass("frameNm")
            .style("background-color:#d9d9d9")
            .text(II("Dif. (B - A))")))
          .add(Q("td")
            .klass("frameTx")
            .text(""))
          .add(Q("td")
            .klass("frameTx")
            .style("background-color:#d9d9d9")
            .text(II("Account")))
          .add(Q("td")
            .klass("frameNm")
            .style("background-color:#d9d9d9")
            .text(II("Budget (A)")))
          .add(Q("td")
            .klass("frameNm")
            .style("background-color:#d9d9d9")
            .text(II("Real (B)")))
          .add(Q("td")
            .klass("frameNm")
            .style("background-color:#d9d9d9")
            .text(II("Dif. (B - A))"))))
        .adds(iter.map([0:sz], \i -> return Q("tr")
            .adds(i >= arr.size(Incomes)
              ? iter.map([0:4], \j -> return Q("td")
                  .klass("frameTx")
                  .style("background-color:#f9f9f9")
                ;)
              : [
                  Q("td")
                    .klass("frameTx")
                    .style("background-color:#d9d9d9")
                    .add(ui.link(\ev -> account(Incomes[i].accId);)
                      .klass("link")
                      .att("title", plan.desc(Plan, Incomes[i].accId))
                      .text(Incomes[i].accId)),
                  Q("td")
                    .klass("frameNm")
                    .style("background-color:#f9f9f9")
                    .text(math.toIso(Incomes[i].budget, 2)),
                  Q("td")
                    .klass("frameNm")
                    .style("background-color:#f9f9f9")
                    .text(math.toIso(Incomes[i].real, 2)),
                  Q("td")
                    .klass("frameNm")
                    .style("background-color:#f9f9f9")
                    .text(math.toIso(Incomes[i].dif, 2))
                ])
            .add(Q("td")
              .klass("frameTx"))
            .adds(i >= arr.size(Expenses)
              ? iter.map([0:4], \j -> return Q("td")
                  .klass("frameTx")
                  .style("background-color:#f9f9f9")
                ;)
              : [
                  Q("td")
                    .klass("frameTx")
                    .style("background-color:#d9d9d9")
                    .add(ui.link(\ev -> account(Expenses[i].accId);)
                      .klass("link")
                      .att("title", plan.desc(Plan, Expenses[i].accId))
                      .text(Expenses[i].accId)),
                  Q("td")
                    .klass("frameNm")
                    .style("background-color:#f9f9f9")
                    .text(math.toIso(Expenses[i].budget, 2)),
                  Q("td")
                    .klass("frameNm")
                    .style("background-color:#f9f9f9")
                    .text(math.toIso(Expenses[i].real, 2)),
                  Q("td")
                    .klass("frameNm")
                    .style("background-color:#f9f9f9")
                    .text(math.toIso(Expenses[i].dif, 2))
                ])
          ;))
        .add(Q("tr")
          .add(Q("td")
            .att("colsapan", "9")))
        .add(Q("tr")
          .add(Q("td")
            .klass("frameTx")
            .style("background-color:#d9d9d9")
            .text(II("Total")))
          .add(Q("td")
            .klass("frameNm")
            .style("background-color:#f9f9f9")
            .text(math.toIso(sumBudget(Incomes), 2)))
          .add(Q("td")
            .klass("frameNm")
            .style("background-color:#f9f9f9")
            .text(math.toIso(sumReal(Incomes), 2)))
          .add(Q("td")
            .klass("frameNm")
            .style("background-color:#f9f9f9")
            .text(math.toIso(sumDif(Incomes), 2)))
          .add(Q("td")
            .klass("frameTx"))
          .add(Q("td")
            .klass("frameTx")
            .style("background-color:#d9d9d9")
            .text(II("Total")))
          .add(Q("td")
            .klass("frameNm")
            .style("background-color:#f9f9f9")
            .text(math.toIso(sumBudget(Expenses), 2)))
          .add(Q("td")
            .klass("frameNm")
            .style("background-color:#f9f9f9")
            .text(math.toIso(sumReal(Expenses), 2)))
          .add(Q("td")
            .klass("frameNm")
            .style("background-color:#f9f9f9")
            .text(math.toIso(sumDif(Expenses), 2)))))

    // DIARY

    .add(Q("div")
      .style("padding:5px;text-align:center")
      .html("<hr><br>" + II("Diary")))
      .add(Q("table")
        .att("align", "center")
        .klass("summary")
        .add(Q("tr")
          .add(Q("td"))
          .add(Q("td")
            .klass("frameTx")
            .style("background-color:#d9d9d9")
            .text(II("Month")))
          .add(Q("td")
            .klass("frameTx")
            .style("background-color:#d9d9d9")
            .text(II("Description")))
          .add(Q("td")
            .klass("frameNm")
            .style("background-color:#d9d9d9")
            .text(II("Amount"))))
        .adds(arr.map(DiaryEntries, \Tp -> return Q("tr")
            .add(Q("td")
              .add(ui.link(\ev -> del(Tp);)
                .add(ui.img("delete"))))
            .add(Q("td")
              .klass("frameTx")
              .style("background-color:#f9f9f9")
              .text(Tp[1].month))
            .add(Q("td")
              .klass("frameTx")
              .style("background-color:#f9f9f9")
              .add(Q("table")
                .add(Q("tr")
                  .add(Q("td")
                    .att("colspan", "2")
                    .text(Tp[1].desc)))
                .adds(arr.map(Tp[1].anns, \A -> return Q("tr")
                    .add(Q("td")
                      .klass("frameTx")
                      .att("title", plan.desc(Plan, diary.annId(A)))
                      .text(diary.annId(A)))
                    .add(Q("td")
                      .klass("frameNm")
                      .text(math.toIso(diary.annAm(A), 2)))
                  ;))
                ))
            .add(Q("td")
              .klass("frameNm")
              .style("background-color:#f9f9f9")
              .text(math.toIso(Tp[1].am, 2)))
          ;)))

    // ACCOUNT

    .add(accBox.wg)
  ;

};
