// Copyright 29-Aug-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Budget management page.

import "data/cts";
import "data/plan";
import "data/cash";
import "data/diary";
import "data/budget";
import "data/problem";
import "budget/fixProblem";
import "budget/management";
import "i18n";

Q = ui.q;
II = i18n.tlt;

/// Constructor.
///   wg          : Widget.
///   selectedYear: Selected year.
///   isUntil: If the budget includes previous months.
///   selectedMonth: In range 1-12.
/// \<domo>, s, b, n -> ()
mk = async \wg, selectedYear, isUntil, selectedMonth -> {
  Rp = await client.send({
    prg: cts.appName,
    source: "BudgetPg",
    rq: "idata",
    year: selectedYear
  });

  Plan = plan.fromJs(Rp.plan);
  hcBalance = Rp.hcBalance; // n
  cBalanceV = [Rp.cBalance]; // [n]
  HcDiary = cash.fromJs(Rp.hcDiary);
  CDiary = diary.fromJs(Rp.cDiary);
  Budget = budget.fromJs(Rp.budget);
  PreviousBudget = budget.fromJs(Rp.previousBudget);

  showOp = [[]];

  // Control -------------------------------------------------------------------

  // \ -> ()
  fixBalance = async \ -> {
    hc = math.toIso(hcBalance, 2);
    c = math.toIso(cBalanceV!, 2);
    ui.alert(i18n.fmt(II("fixBalance hc(%0) c(%1)"), [hc, c]));

    cBalanceV! = hcBalance;
    await client.send({
      prg: cts.appName,
      source: "BudgetPg",
      rq: "updateBalance",
      year: selectedYear,
      value: cBalanceV!
    });

    showOp!();
  };

  // View ----------------------------------------------------------------------

  // \ -> ()
  showOp! = \ -> {
    Problem = problem.firstProblem(HcDiary, CDiary);
    if (!math.eq(hcBalance, cBalanceV!, 0.0001)) {
      fixBalance();
    } else if (Problem.ix != -1) {
      fixProblem.mk(wg, selectedYear, Plan, CDiary, Problem, \ -> showOp!(););
    } else {
      management.mk(
        wg, selectedYear, isUntil, selectedMonth,
        Plan, cBalanceV!, CDiary, Budget, PreviousBudget
      );
    }
  };

  showOp!();
};
