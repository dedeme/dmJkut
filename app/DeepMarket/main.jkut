// Copyright 24-Jul-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Application entry.

import "libdm/menu";
import "data/cts";
import "pgs/msgPg";
import "pgs/listPg";
import "pgs/hotMapPg";
import "pgs/rankingsPg";
import "pgs/chartsPg";
import "i18n";

Q = ui.q;
II = i18n.tlt;

// \<domo> -> ()
mk = async \wg -> {
  ok = await client.connect();
  if (!ok) {
    ui.alert(II("KtWeb session is closed.\nAuthenticating from KtWeb:Main."));
    window.location.assign("http://" + window.location.host + "/Main");
    return;
  }

  Rp0 = await client.send({
    prg: "Main", // Call to KtWeb:Main
    source: "Main",
    rq: "lang"
  });
  if (Rp0.lang == "en") i18n.en();

  Url = ui.url();
  daysWinOp = dic.get(Url, "0");
  if (!daysWinOp) {
    window.location.assign("?" + cts.daysWinDefault);
    return;
  }

  daysLossOp = daysWinOp ? dic.get(Url, "1") : [];
  if (!daysLossOp) {
    window.location.assign("?" + daysWinOp! + "&" + cts.daysLossDefault);
    return;
  }

  days = daysWinOp![1:] == "ranking"
      ? [math.toStr(cts.daysWinDefault), daysLossOp!]
      : [daysWinOp!, daysLossOp!]
  ;
  sel3V = dic.get(Url, "2");
  sel3 = sel3V &
        arr.any(
          ["nlst", "nhot", "flst", "fhot", "charts"],
          \s -> return s == sel3V!;
        )
    ? sel3V!
    : "nlst"
  ;

  Rp = await client.send({
    prg: "DeepMarket",
    source: "Main",
    rq: "idata",
    days
  });
  daysWin = Rp.daysWin; // s
  daysLoss = Rp.daysLoss; // s

  if ([daysWin, daysLoss] != days) {
    window.location.assign("?" + daysWin + "&" + daysLoss);
    return;
  }

  sel1 = daysWinOp & daysWinOp![1:] == "ranking" ? daysWinOp! : daysWin;

  // Control -------------------------------------------------------------------

  // \->()
  center = \ -> {
    if (!ui.confirm(II("Change near start corner for every group?"))) return;

    client.send({
      prg: "DeepMarket",
      source: "Main",
      rq: "center"
    });

    ui.alert(II("Soon the near star corner will be changed"));
  };

  // View ----------------------------------------------------------------------

  Lopts1 = []; // [<domo>...]
  for (d = cts.DaysWin) {
    arr.push(Lopts1, menu.tlink(d + "&" + daysLoss + "&" + sel3, d, []));
    arr.push(Lopts1, menu.separator());
  }
  arr.pop(Lopts1);
  Ropts1 = [
    menu.tlink("nranking&" + daysLoss + "&" + sel3, II("Near - Ranking"), []),
    menu.separator(),
    menu.tlink("franking&" + daysLoss + "&" + sel3, II("Far - Ranking"), [])
  ];
  menuWg1 = menu.mk(Lopts1, Ropts1, sel1 + "&" + daysLoss + "&" + sel3, false);

  if (daysWinOp & daysWinOp![1:] == "ranking") {
    body = Q("div");
    rankingsPg.mk(body, daysWinOp! == "nranking");
    wg
      .removeAll()
      .add(menuWg1)
      .add(body)
    ;
    return;
  }

  Lopts2 = []; //[<domo>...]
  for (d = cts.DaysLoss) {
    arr.push(Lopts2, menu.tlink(sel1 + "&" + d + "&" + sel3, d, []));
    arr.push(Lopts2, menu.separator());
  }
  arr.pop(Lopts2);

  Ropts2 = [menu.ioption("---", "center", center)];

  menuWg2 = menu.mk(Lopts2, Ropts2, daysWin + "&" + daysLoss + "&" + sel3, false);

  Lopts3 = [
    menu.tlink(daysWin + "&" + daysLoss + "&nlst", II("[Near - List]"), []),
    menu.separator(),
    menu.tlink(daysWin + "&" + daysLoss + "&nhot", II("[Near - Hot Map]"), []),
    menu.separator2(),
    menu.tlink(daysWin + "&" + daysLoss + "&flst", II("[Far - List]"), []),
    menu.separator(),
    menu.tlink(daysWin + "&" + daysLoss + "&fhot", II("[Far - Hot Map]"), [])
  ];
  Ropts3 = [
    menu.tlink(daysWin + "&" + daysLoss + "&charts", II("Charts"), [])
  ];
  menuWg3 = menu.mk(Lopts3, Ropts3, daysWin + "&" + daysLoss + "&" + sel3, false);

  body = Q("div");

  wg
    .removeAll()
    .add(menuWg1)
    .add(menuWg2)
    .add(menuWg3)
    .add(body)
  ;

  if (sel3 == "charts") {
    chartsPg.mk(body);
  } else {
    isNear = sel3 == "nlst" | sel3 == "nhot";
    Rp = await client.send({
      prg: cts.appName,
      source: "Main",
      rq: "results",
      days: "[" + daysWin + "-" + daysLoss + "]",
      isNear
    });
    ParNearStart = Rp.parNearStart; // [n, n] :: [start, approximation]
    ParFarStart = Rp.parFarStart; // [n, n] :: [start, approximation]
    ParStep = Rp.parStep; // [n, n] :: [start, approximation]
    Results = Rp.results; // [[[n, n, n, n]...]...]
                          // Matrix cts.simSteps x cts.simSteps of
                          // [assets, profits, points, sales]
    switch (sel3) {
      "nhot": hotMapPg.mk(body, ParNearStart, ParStep, Results);
      "fhot": hotMapPg.mk(body, ParFarStart, ParStep, Results);
      default: listPg.mk(
        body, isNear, ParNearStart, ParFarStart, ParStep, Results
      );
    }
  }
};

// Main ========================================================================

wg = Q("div");

/// Load main window
load = \ -> {
  mk(wg);
};

client.init(true, "KtWeb", \ -> {
  msgWg = Q("div");
  msgPg.mk(msgWg, II("Session is expired."), true);
  Q("@body")
    .removeAll()
    .add(msgWg)
    .add(cts.foot)
  ;
});

Q("@body")
  .removeAll()
  .add(wg)
  .add(cts.foot)
  .add(ui.upTop("up"))
;

load();
