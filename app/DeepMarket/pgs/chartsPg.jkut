// Copyright 28-Jul-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Charts page.

import "libdm/menu";
import "charts/cosPg";
import "charts/historicPg";
import "charts/operationsPg";
import "data/cts";
import "data/result";
import "i18n";

Q = ui.q;
II = i18n.tlt;

/// \<domo>, s -> ()
mk = async \wg -> {
  Url = ui.url();
  try {
    daysWinOp = dic.get(Url, "0");
    daysLossOp = dic.get(Url, "1");
    selOp = dic.get(Url, "2");
    if (
      !daysWinOp | !daysLossOp | !selOp |
      !math.isDigits(daysWinOp!) |
      !math.isDigits(daysLossOp!) |
      selOp! != "charts"
    )
      throw II("Malformed URL");
    daysWin = math.fromStr(daysWinOp!)!;
    daysLoss = math.fromStr(daysLossOp!)!;
    if (!arr.any(cts.DaysWin, \i -> return i == daysWin;))
      throw i18n.fmt(II("Value '%0' for 'days win' is not valid"), ["" + daysWin]);
    if (!arr.any(cts.DaysLoss, \i -> return i == daysLoss;))
      throw i18n.fmt(II("Value '%0' for 'days loss' is not valid"), ["" + daysLoss]);
  } catch (e) {
    ui.alert(e);
    window.location.assign("?");
    return;
  }

  daysWin = math.fromStr(Url["0"])!;
  daysLoss = math.fromStr(Url["1"])!;

  // [[n...]] | []
  PsOp = [];
  if (dic.get(Url, "3")) {
    try {
      if (!dic.get(Url, "4")) throw II("Malformed URL");
      if (!math.fromStr(Url["3"]) | !math.fromStr(Url["4"]))
      throw i18n.fmt(
        II("Value [%0,%1] for parameters is not valid"),
        [Url["3"], Url["4"]]
      );
      arr.push(PsOp, [math.fromStr(Url["3"])!, math.fromStr(Url["4"])!]);
    } catch (e) {
      ui.alert(e);
      window.location.assign("?");
      return;
    }
  }

  Rp = await client.send({
    prg: cts.appName,
    source: "ChartsPg",
    rq: "idata",
    daysWin,
    daysLoss,
    psOp: PsOp // [[n,n]] | []
  });
  Params = Rp.params;
  Result = result.fromJs(Rp.result);
  Cos = Rp.cos; // [s...]


  Chart = ["cos"];
  Show = [[]];

// Control ---------------------------------------------------------------------

  // \s -> ()
  go = \chart -> {
    Chart! = chart;
    Show!();
  };

// View ------------------------------------------------------------------------

  // \ -> ()
  Show! = async \ -> {
    Lopts = [
      menu.toption("cos", II("Companies"), \ -> go("cos");),
      menu.separator(),
      menu.toption("historic", II("Historic"), \ -> go("historic");),
      menu.separator(),
      menu.toption("operations", II("Operations"), \ -> go("operations");)
    ];
    menuWg = menu.mk(Lopts, [], Chart!, false);

    body1 = Q("div")
      .add(Q("div")
        .klass("head")
        .text(II("Companies")))
      .add(Q("div").klass("separator"))
      .add(Q("table")
        .att("align", "center")
        .klass("flat")
        .add(Q("tr")
          .add(Q("td")
            .klass("rhead")
            .text(II("Start")))
          .add(Q("td")
            .klass("rhead")
            .text(II("Approximation"))))
        .add(Q("tr")
          .add(Q("td")
            .klass("rframe")
            .text(math.toIso(Params[0] * 100, 2) + "%"))
          .add(Q("td")
            .klass("rframe")
            .text(math.toIso(Params[1] * 100, 2) + "%"))))
      .add(Q("div").klass("separator2"))
      .add(Q("table")
        .att("align", "center")
        .klass("flat")
        .add(Q("tr")
          .add(Q("td")
            .klass("rhead")
            .text(II("Assets")))
          .add(Q("td")
            .klass("rhead")
            .text(II("Profits (%)")))
          .add(Q("td")
            .klass("rhead")
            .text(II("Eval.")))
          .add(Q("td")
            .klass("rhead")
            .text(II("Sales"))))
        .add(Q("tr")
          .add(Q("td")
            .klass("rframe")
            .text(math.toIso(Result.assets, 2)))
          .add(Q("td")
            .klass("rframe")
            .text(math.toIso(Result.profits * 100, 2)))
          .add(Q("td")
            .klass("rframe")
            .text(math.toIso(Result.points, 0)))
          .add(Q("td")
            .klass("rframe")
            .text(math.toIso(Result.sales, 0)))))
      .add(Q("div").klass("separator"))
    ;

    body2 = Q("div");
    switch (Chart!) {
      "historic": historicPg.mk(body2, daysWin, daysLoss, Params);
      "operations": operationsPg.mk(body2, daysWin, daysLoss, Params);
      default: cosPg.mk(body2, daysWin, daysLoss, Params, Cos);
    }

    wg
      .removeAll()
      .add(menuWg)
      .add(body1)
      .add(body2)
    ;
  };

  Show!();
};

