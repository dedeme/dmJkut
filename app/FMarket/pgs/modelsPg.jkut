// Copyright 15-May-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Models page

import "libdm/menu";
import "i18n";
import "data/mdStats";
import "data/cts";
import "data/fns";
import "data/flea";

Q = ui.q;
II = i18n.tlt;

/// \<domo> -> ()
mk = async \wg -> {
  Rp = await client.send({
    prg: cts.appName,
    source: "ModelsPg",
    rq: "idata"
  });
  ModelIds = Rp.modelIds;
  MdStats = mdStats.fromJs(Rp.mdStats);

  MenuSel = ["ranking"];

  Show = [[]];

// Control ---------------------------------------------------------------------

  // \ -> ()
  ranking = \ -> {
    MenuSel! = "ranking";
    Show!();
  };

  // \s -> ()
  statistics = \modelId -> {
    MenuSel! = modelId;
    Show!();
  };

// View ------------------------------------------------------------------------

  // \ -> ()
  showRanking = \ ->
    wg
      .add(Q("table")
        .klass("border")
        .att("align", "center")
        .add(Q("tr")
          .add(Q("td")
            .klass("header")
            .text(II("Models")))
          .add(Q("td")
            .klass("header")
            .style("text-align: right")
            .text(II("Duplicates"))))
        .adds(arr.map(MdStats.GroupsRanking, \Gr ->
          return Q("tr")
            .add(Q("td")
              .klass("border")
              .style("text-align: left;font-family:monospace;white-space:pre")
              .text(mdStats.groupFormatIds(Gr)))
            .add(Q("td")
              .klass("border")
              .style("text-align: right")
              .text(fns.nFormat(Gr.duplicates, 0)))
        ;)))
    ;;

  // \ -> ()
  showStatistics = \ -> {
    // \[<orderFlea>...] -> <domo>
    bestsWorstsWg = \Ofs -> {
      // \<orderFlea> -> <domo>
      mkRow  = \Of -> {
        F = Of.Flea;
        // \ -> [<domo>...]
        mkModelsWg = \ ->
          return arr.map(flea.fmtModels(F), \fmt ->
            return Q("td")
              .klass("borderWhite")
              .style("text-align:left;font-family:monospace;white-space:pre")
              .text(fmt)
            ;
          );;

        return Q("tr")
          .add(Q("td")
            .klass("number")
            .text(fns.nFormat(Of.order + 1, 0)))
          .add(Q("td")
            .klass("border")
            .style("background:" + (F.isMale ? "#a0c0f0": "#f0c0a0"))
            .text(flea.fmtId(F)))
          .add(Q("td")
            .klass("borderWhite")
            .text(flea.fmtCycle(F)))
          .adds(mkModelsWg())
          .add(Q("td")
            .klass("number")
            .text(fns.nFormat(F.assets, 2)))
        ;
      };

      Trs = [];
      for (Of = Ofs) arr.push(Trs, mkRow(Of));

      return Q("table")
        .klass("border")
        .att("align", "center")
        .add(Q("tr")
          .add(Q("td")
            .klass("header")
            .style("text-align: right")
            .text(II("Pos.")))
          .add(Q("td")
            .klass("header")
            .style("text-align: left")
            .text(II("Id")))
          .add(Q("td")
            .klass("header")
            .style("text-align: left")
            .text(II("Cycle")))
          .add(Q("td")
            .klass("header")
            .att("colspan", 3)
            .style("text-align: left")
            .text(II("Models")))
          .add(Q("td")
            .klass("header")
            .style("text-align: right")
            .text(II("Assets"))))
        .adds(Trs)
      ;
    };

    Mds = MdStats.Models;
    Md = Mds[arr.index(Mds, \M -> return M.modelId == MenuSel!;)];
    wg
      .add(Q("table")
        .klass("border")
        .att("align", "center")
        .add(Q("tr")
          .add(Q("td")
            .klass("rlabel")
            .text(II("Fleas number")))
          .add(Q("td")
            .klass("number")
            .text(fns.nFormat(Md.nfleas, 0))))
        .add(Q("tr")
          .add(Q("td")
            .klass("rlabel")
            .text(II("Position average")))
          .add(Q("td")
            .klass("number")
            .text(fns.nFormat(Md.position, 0))))
        .add(Q("tr")
          .add(Q("td")
            .klass("rlabel")
            .text(II("Assets average")))
          .add(Q("td")
            .klass("number")
            .text(fns.nFormat(Md.assets, 2)))))
      .add(Q("div")
        .klass("head")
        .text(II("Bests")))
      .add(bestsWorstsWg(Md.Bests))
      .add(Q("div")
        .klass("head")
        .text(II("Worsts")))
      .add(bestsWorstsWg(Md.Worsts))
    ;
  };

  // \-> ()
  show = \ -> {
    MenuLeft = arr.reduce(
      ModelIds,
      [menu.toption("ranking", II("Ranking"), ranking)],
      \R, mId -> {
        arr.push(R, menu.separator());
        arr.push(R, menu.toption(mId, mId, \ -> statistics(mId);));
        return R;
      }
    );
    MenuLeft[1] = menu.separator2();

    menuWg = menu.mk(
      MenuLeft,
      [],
      MenuSel!,
      false
    );

    wg
      .removeAll()
      .add(menuWg)
    ;

    if (MenuSel! == "ranking") showRanking();
    else showStatistics();
  };
  Show! = show;

  show();
};

