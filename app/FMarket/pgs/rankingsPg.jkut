// Copyright 15-May-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Rankings page

import "libdm/menu";
import "data/flea";
import "data/ranking";
import "data/cts";
import "data/fns";
import "i18n";

Q = ui.q;
II = i18n.tlt;

/// \<domo> -> ()
mk = async \wg -> {
  Rp = await client.send({
    prg: cts.appName,
    source: "RankingsPg",
    rq: "idata"
  });
  // Ordered from after to before.
  Rankings = arr.map(Rp.rankings, ranking.fromJs);

  MenuSel = ["all"];

  Show = [[]];

// Control ---------------------------------------------------------------------

  // \ -> ()
  last = \ -> {
      MenuSel! = "last";
      Show!();
    };

  // \ -> ()
  all = \ -> {
      MenuSel! = "all";
      Show!();
    };

  // Returns an image of position.
  // \n, <flea>, n -> <domo>
  positionImg = \rankIx, Flea, fIx -> {
      rankIx1 = rankIx + 1;
      if (rankIx1 >= arr.size(Rankings)) return ui.img("rk-new");
      fIx1 = arr.index(Rankings[rankIx1].Fleas, \F -> return F.id == Flea.id;);
      if (fIx1 == -1) return ui.img("rk-new");
      if (fIx > fIx1 + 4) return ui.img("rk-down2");
      if (fIx > fIx1) return ui.img("rk-down");
      if (fIx < fIx1 - 4) return ui.img("rk-up2");
      if (fIx < fIx1) return ui.img("rk-up");
      return ui.img("rk-eq");
    };

  // \n, <flea> -> b
  isRemoved = \rankIx, Flea -> return rankIx == 0
      ? false
      : !arr.any(Rankings[rankIx - 1].Fleas, \F -> return F.id == Flea.id;)
    ;;

// View ------------------------------------------------------------------------

  // \ -> ()
  showLast = \ -> {
    // \<flea>, n -> <domo>
    mkRow = \F, i -> {
      // \ -> [<domo>...]
      mkModelsWg = \ -> return arr.map(flea.fmtModels(F), \fmt ->
          return Q("td")
            .klass("borderWhite")
            .style("text-align:left;font-family:monospace;white-space:pre")
            .text(fmt)
        ;);;

      return Q("tr")
        .add(Q("td")
          .add(positionImg(0, F, i)))
        .add(Q("td")
          .klass("border")
          .style("background:" + (F.isMale ? "#a0c0f0": "#f0c0a0"))
          .text(flea.fmtId(F)))
        .add(Q("td")
          .klass("borderWhite")
          .text(flea.fmtCycle(F)))
        .adds(mkModelsWg())
        .add(Q("td")
          .klass("number")
          .text(fns.nFormat(F.assets, 2)))
      ;
    };

    Ix = [-1];
    Trs = arr.map(Rankings[0].Fleas, \F -> {
      Ix! += 1;
      return mkRow(F, Ix!);
    });

    wg
      .add(Q("table")
        .klass("border")
        .att("align", "center")
        .add(Q("tr")
          .add(Q("td")
            .klass("header"))
          .add(Q("td")
            .klass("header")
            .style("text-align: left")
            .text(II("Id")))
          .add(Q("td")
            .klass("header")
            .style("text-align: left")
            .text(II("Cycle")))
          .add(Q("td")
            .klass("header")
            .att("colspan", 3)
            .style("text-align: left")
            .text(II("Models")))
          .add(Q("td")
            .klass("header")
            .style("text-align: right")
            .text(II("Assets"))))
        .adds(Trs))
    ;
  };

  // \ -> ()
  showAll = \ -> {
    nRks = arr.size(Rankings);
    nRks2 = math.toInt(nRks / 2);

    // \n, n -> [<domo>...]
    mkRows = \start, end ->
      return arr.cat([[
        Q("tr")
          .adds(arr.fromIter(iter.map([start: end], \i ->
            return Q("td")
              .klass("header")
              .att("colspan", 5)
              .text(fns.dFormat(Rankings[i].date))
            ;))),
        Q("tr")
          .adds(iter.reduce([start: end], [], \R, i ->
            return arr.cat([R, [
              Q("td")
                .klass("header"),
              Q("td")
                .klass("header")
                .style("text-align: left")
                .text(II("Id")),
              Q("td")
                .klass("header")
                .style("text-align: left")
                .text("C."),
              Q("td")
                .klass("header")
                .text(II("Ms.")),
              Q("td")
                .klass("header")
                .style("text-align: right")
                .text(II("Assets"))
            ]]);))
        ], arr.map(arr.fromIter([0:arr.size(Rankings[0].Fleas)]), \row ->
          return Q("tr")
            .adds(iter.reduce([start : end], [], \R, col -> {
                  F = Rankings[col].Fleas[row];
                  return arr.cat([R, [
                    Q("td")
                      .add(positionImg(col, F, row)),
                    Q("td")
                      .klass("border")
                      .style(
                          "text-align:right;" +
                          "text-decoration:"+ (
                            isRemoved(col, F)
                              ? "line-through;"
                              : "none;"
                          ) +
                          "background:" + (
                            F.id == Rankings[0].Fleas[0].id
                              ? "#ccad0f"
                              : F.id == Rankings[0].Fleas[1].id
                                ? "#b4b3ad"
                                : F.id == Rankings[0].Fleas[2].id
                                  ? "#9e6a25"
                                  : "rgb(250, 250, 250)"
                          )
                        )
                      .text("" + F.id),
                    Q("td")
                      .klass("borderWhite")
                      .style("text-align: right")
                      .text("" + F.cycle),
                    Q("td")
                      .klass("borderWhite")
                      .att("title", arr.join(flea.fmtModels(F), "\n"))
                      .style("color:#000080")
                      .text(flea.fmtModels2(F)),
                    Q("td")
                      .klass("number")
                      .text(fns.nFormat(F.assets, 2))
                  ]]);
                }));)
        ]);;

    wg
      .add(Q("table")
        .klass("border")
        .att("align", "center")
        .adds(mkRows(0, nRks2))
        .add(Q("tr")
          .add(Q("td")
            .att("colspan", nRks2 * 5)
            .add(Q("hr"))))
        .adds(mkRows(nRks2, nRks)))
    ;
  };

  // \-> ()
  show = \ -> {
    menuWg = menu.mk (
      [ menu.toption("last", II("Current"), last),
        menu.separator(),
        menu.toption("all", II("AllRankings"), all)
      ],
      [],
      MenuSel!,
      false
    );

    wg
      .removeAll()
      .add(menuWg)
    ;

    if (MenuSel! == "last") {
      showLast();
    } else {
      showAll();
    }
  };
  Show! = show;

  show();
};

