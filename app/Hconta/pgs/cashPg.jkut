// Copyright 20-Aug-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Cash page.

import "libdm/datePicker";
import "data/all";
import "data/acc";
import "data/cts";
import "data/diaryEntry";
import "wgs/accountSelector";
import "fns";
import "i18n";

Q = ui.q;
II = i18n.tlt;

/// \<domo>,s, s -> ()
mk = \wg, account, ix -> {
  ac = acc.descriptionOf(account) == "" | str.len(account) > 3 ? "" : account;
  acV = [ac == "" | !dic.hasKey(acc.accounts(), ac) ? cts.cash[:3] : ac];
  CashEntryIxs = acc.usedSubaccounts(cts.cash);
  lastIx = CashEntryIxs ? arr.peek(CashEntryIxs) : -1;

  ixn = math.isDigits(ix) ? math.toInt(math.fromStr(ix)!) : lastIx;
  ixFirstRowV = [ixn >= lastIx ? lastIx : ixn];

  accIn = Q("input")
    .att("type", "text")
    .klass("frame")
    .style("width:50px;color:#000000;text-align:center;")
    .disabled(true)
  ;
  description = ui.field("amm")
    .att("id", "autofocus")
    .style("width:270px")
    .on("focus", \e -> description.e.select();)
  ;
  ammIn = ui.field("accept")
    .att("id", "amm")
    .style("width:65px")
    .on("focus", \e -> ammIn.e.select();)
  ;
  listDiv = Q("div");

  dpV = [datePicker.mk(i18n.getLang(), time.now(), \s -> {})];
  listV = [[]];

  // Control -------------------------------------------------------------------

  // \<event> -> ()
  accept = async \ev -> {
    dateOp = datePicker.getDate(dpV!);
    if (!dateOp) {
      ui.alert(II("Date is missing"));
      return;
    }
    date = dateOp!;

    a = str.replace(str.trim(accIn.getValue()), ".", "");
    if (!a) {
      ui.alert(II("Account is missing"));
      return;
    }

    desc = str.trim(description.getValue());
    if (!desc) {
      ui.alert(II("Description is missing"));
      return;
    }

    amOp = fns.float(ammIn.getValue());
    if (!amOp) {
      ui.alert(i18n.fmt(II("'%0' is not a number"), [ammIn.getValue()]));
      return;
    }
    am = amOp!;
    if (am == 0) {
      ui.alert(II("Ammount is 0"));
      return;
    }

    Debits = {}; // {n.}
    if (am > 0) dic.put(Debits, cts.cash, am);
    else dic.put(Debits, a, -am);

    Credits = {}; // {n.}
    if (am > 0) dic.put(Credits, a, am);
    else dic.put(Credits, cts.cash, -am);

    Dentry = diaryEntry.mk(date, desc, Debits, Credits);
    ix = acc.addDiary(Dentry) + 4;

    arr.clear(CashEntryIxs);
    arr.cat(CashEntryIxs, acc.usedSubaccounts(cts.cash));
    ixFirstRowV! = CashEntryIxs ? arr.peek(CashEntryIxs) : -1;
    if (ix < ixFirstRowV!) ixFirstRowV! = ix;

    await all.send();
    accIn.value("");
    description.value("");
    ammIn.value("");
    listDiv.removeAll().add(listV!());
  };

  // \n -> n
  getEntriesIndex = \ix -> {
    size = arr.size(CashEntryIxs);
    for (i = 0:size)
      if (CashEntryIxs[i] == ix) return i;

    return size - 1;
  };

  // \<event> -> ()
  upClick = \e -> {
    i = getEntriesIndex(ixFirstRowV!);
    if (ixFirstRowV! > -1 & i < arr.size(CashEntryIxs) - 1) {
      ixFirstRowV! = CashEntryIxs[i + 1];
      listDiv.removeAll().add(listV!());
    }
  };

  // \<event> -> ()
  downClick = \e -> {
    i = getEntriesIndex(ixFirstRowV!);
    if (i > 0) {
      ixFirstRowV! = CashEntryIxs[i - 1];
      listDiv.removeAll().add(listV!());
    }
  };

  // \<event> -> ()
  dupClick = \e -> {
    i = getEntriesIndex(ixFirstRowV!) + math.toInt(cts.tableLen / 2);
    if(ixFirstRowV! > -1) {
      ixFirstRowV! = i < arr.size(CashEntryIxs)
        ? CashEntryIxs[i]
        : arr.peek(CashEntryIxs)
      ;
      listDiv.removeAll().add(listV!());
    }
  };

  // \<event> -> ()
  ddownClick = \e -> {
    i = getEntriesIndex(ixFirstRowV!) - math.toInt(cts.tableLen / 2);
    if (i > 0) {
      ixFirstRowV! = CashEntryIxs[i];
      listDiv.removeAll().add(listV!());
    }
  };

  // \<event> -> ()
  topClick = \e -> {
    if (ixFirstRowV! > -1) {
      ixFirstRowV! = arr.peek(CashEntryIxs);
      listDiv.removeAll().add(listV!());
    }
  };

  // \<event> -> ()
  bottomClick = \e -> {
    if (ixFirstRowV! > -1) {
      iV = [cts.tableLen - 1];
      if (iV! >= arr.size(CashEntryIxs)) iV! = arr.size(CashEntryIxs) - 1;
      ixFirstRowV! = CashEntryIxs[iV!];
      listDiv.removeAll().add(listV!());
    }
  };

  // \n -> ()
  monthClick = \m -> {
    if (ixFirstRowV! > -1) {
      Diary = acc.diary();
      size = arr.size(CashEntryIxs);
      iV = [0];
      while (true) {
        E = Diary[CashEntryIxs[iV!]];
        iV! += 1;
        if (time.month(E.date) >= m | iV! == size) break;
      }
      ixFirstRowV! = CashEntryIxs[iV! - 1];
      listDiv.removeAll().add(listV!());
    }
  };

  // View ----------------------------------------------------------------------

  dateField = Q("input")
    .att("type", "text")
    .klass("frame")
    .style("width:80px;color:#000000;text-align:center;")
  ;
  acceptBt = Q("button")
    .att("id", "accept")
    .html(II("Accept"))
    .on("click", accept)
  ;

  // \s, s -> ()
  helpAccountClick = \account, desc -> {
    acV! = account[:3];
    accIn
      .att("title", desc)
      .value(acc.accFormat(account))
    ;

    Sels = []; // [{n, s, s}.] :: [{n, desc, val}.]
    // \s, s -> ()
    addSels = \desc, val -> {
      toDoV = [true];
      for (E = Sels) {
        if (E.desc == desc & E.val == val){
          E.n += 1;
          toDoV! = false;
          break;
        }
      }
      if (toDoV!) arr.push(Sels, {n: 1, desc, val});
    };

    for (E = acc.diary()) {
      Debits = E.debits;
      Credits = E.credits;
      if (
        dic.size(Debits) == 1 &
        dic.size(Credits) == 1 &
        (dic.hasKey(Debits, cts.cash) | dic.hasKey(Credits, cts.cash))
      ) {
        if (dic.hasKey(Debits, account))
          addSels(E.description, "-" + math.toIso(Debits[account], 2));
        if (dic.hasKey(Credits, account))
          addSels(E.description, math.toIso(Credits[account], 2));
      }
    }

    if (Sels) {
      nV = [0];
      descV = [""];
      valV = [""];
      for (E = Sels) {
        if (E.n >= nV!) {
          nV! = E.n;
          descV! = E.desc;
          valV! = E.val;
        }
      }
      description.value(descV!);
      ammIn.value(valV!);
    }

    description.e.focus();
  };

  // \ -> <domo>
  listV! = \ -> {
    Diary = acc.diary();
    sumV = [0];
    Entries = arr.map(CashEntryIxs, \i -> {
      E = Diary[i];
      ammV = [0];
      for (a, v = E.debits) if (a == cts.cash) ammV! = v;
      for (a, v = E.credits) if (a == cts.cash) ammV! = -v;
      sumV! += ammV!;
      return {
        ix: i,
        date: E.date,
        desc: E.description,
        amm: ammV!,
        sum: sumV!
      };
    });

    // \ -> <domo>
    td = \ -> return Q("td").klass("frame").style("vertical-align:top;");;
    // \ -> <domo>
    tdr = \ -> return td().setStyle("text-align", "right");;
    // \ -> <domo>
    tdl = \ -> return td().setStyle("text-align", "left");;

    cutV = [0];
    for (ix = 0:arr.size(Entries)) {
      E = Entries[ix];
      if (E.ix >= ixFirstRowV!) {
        cutV! = ix + 1;
        break;
      }
    }
    return Q("table")
      .att("align", "center")
      .adds(arr.map(
        arr.reverse(arr.drop(arr.take(Entries, cutV!), cutV! - cts.tableLen)),
        \E -> return Q("tr")
            .add(tdr()
              .html("" + (E.ix + 1)))
            .add(td()
              .html(time.fmt("%D/%M", E.date)))
            .add(tdl()
              .add(ui.link(\ev ->
                  window.location.assign("?diary&" + acV! + "&" + E.ix);
                ).klass("link")
                .html(E.desc)))
            .add(tdr()
              .html(math.toIso(E.amm, 2)))
            .add(tdr()
              .html(math.toIso(E.sum, 2)))
          ;));
  };

  // \ -> <domo>
  left = \ -> return accountSelector.mk(acV!, helpAccountClick, true).wg;;

  // \ -> <domo>
  right = \ -> {
    dpV! = datePicker.mk(
      i18n.getLang(), time.now(), \m -> description.e.focus();
    );
    ui.changePoint(ammIn);
    if (!all.isLastYear()) {
      description.disabled(true);
      ammIn.disabled(true);
      acceptBt.disabled(true);
    }

    r = Q("td")
      .style("text-align:center;vertical-align:top;")
      .add(Q("div")
        .klass("head")
        .text(II("Cash")))
      .add(Q("table")
        .att("align", "center")
        .add(Q("tr")
          .add(Q("td").add(datePicker.mkText(dpV!, dateField)))
          .add(Q("td").add(accIn))
          .add(Q("td").add(description))
          .add(Q("td").add(ammIn))
          .add(Q("td").add(acceptBt))))
      .add(Q("hr"))
      .add(Q("table")
        .att("align", "center")
        .add(Q("tr")
          .add(Q("td").att("colspan", 3))
          .add(Q("td").klass("diary").add(ui.link(upClick)
            .setStyle("font-family", "monospace").html("&nbsp;\u2191&nbsp;")))
          .add(Q("td").klass("diary").add(ui.link(downClick)
            .setStyle("font-family", "monospace").html("&nbsp;\u2193&nbsp;")))
          .add(Q("td").klass("diary").add(ui.link(dupClick)
            .setStyle("font-family", "monospace").html("\u2191\u2191")))
          .add(Q("td").klass("diary").add(ui.link(ddownClick)
            .setStyle("font-family", "monospace").html("\u2193\u2193")))
          .add(Q("td").klass("diary").add(ui.link(topClick)
            .setStyle("font-family", "monospace").html("&nbsp;\u2912&nbsp;")))
          .add(Q("td").klass("diary").add(ui.link(bottomClick)
            .setStyle("font-family", "monospace").html("&nbsp;\u2913&nbsp;")))
          .add(Q("td").att("colspan", 3)))
        .add(Q("tr")
          .adds(iter.map([1:13], \i -> return Q("td")
              .klass("diary")
              .add(ui.link(\e -> monthClick(i);)
                .html("&nbsp;" + i + "&nbsp;"));
            ))))
      .add(Q("hr"))
      .add(listDiv)
    ;

    listDiv.add(listV!());
    return r;
  };

  wg
    .removeAll()
    .add(Q("table")
      .klass("main")
      .add(Q("tr")
        .add(all.isLastYear() ? left() : Q("div"))
        .add(right())))
  ;
};
