// Copyright 04-Jul-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Description page.

import "data/model";
import "data/modelEval";
import "i18n";
import "fns";

Q = ui.q;
II = i18n.tlt;

// \<domo>, s, b -> ()
mk2 = async \wg, modelId, historicOrder -> {
  Rp = await client.send({
    prg: "CMMarket",
    source: "ResultsPg",
    rq: "idata",
    modelId
  });
  Md = model.fromJs(Rp.model);
  Evals = arr.map(Rp.evals, modelEval.fromJs);
  if (historicOrder)
    arr.sort(Evals, \E1, E2 ->
      return fns.evaluate(E2.hassets, E2.hprofits) <
        fns.evaluate(E1.hassets, E1.hprofits);
    );
  else
    arr.sort(Evals, \E1, E2 ->
      return fns.evaluate(E2.assets, E2.profits) <
        fns.evaluate(E1.assets, E1.profits);
    );

  wg
    .removeAll()
    .add(Q("table")
      .att("align", "center")
      .klass("flat")
      .add(Q("tr")
        .adds(iter.map(
            [0:1+arr.size(Evals[0].params)],
            \i -> return Q("td");
          ))
        .add(Q("td")
          .klass("chead"))
        .add(Q("td")
          .klass("chead")
          .att("colspan", 4)
          .add(historicOrder
            ? ui.link(\e -> mk2(wg, modelId, false);)
              .klass("link")
              .text(II("Current"))
            : Q("div")
              .klass("frame")
              .text(II("Current"))
            ))
        .add(Q("td").klass("rhead"))
        .add(Q("td")
          .klass("chead")
          .att("colspan", 4)
          .add(historicOrder
            ? Q("div")
              .klass("frame")
              .text(II("Historic"))
            : ui.link(\e -> mk2(wg, modelId, true);)
              .klass("link")
              .text(II("Historic")))))
      .add(Q("tr")
        .add(Q("td"))
        .adds(arr.map(Md.paramNames, \n -> return Q("td")
          .klass("rhead")
          .text(n);))
        .add(Q("td").klass("rhead"))
        .add(Q("td")
          .klass("rhead")
          .text(II("Assets")))
        .add(Q("td")
          .klass("rhead")
          .text(II("Prfs.")))
        .add(Q("td")
          .klass("rhead")
          .text(II("Eval.")))
        .add(Q("td")
          .klass("rhead")
          .text(II("Sls.")))
        .add(Q("td").klass("rhead"))
        .add(Q("td")
          .klass("rhead")
          .text(II("Assets")))
        .add(Q("td")
          .klass("rhead")
          .text(II("Prfs.")))
        .add(Q("td")
          .klass("rhead")
          .text(II("Eval.")))
        .add(Q("td")
          .klass("rhead")
          .text(II("Sls."))))
      .adds(arr.map(Evals, \Ev -> return Q("tr")
        .add(Q("td")
          .add(Q("a")
            .klass("link")
            .att(
                "href",
                "?" + Md.id +
                "&charts&" +
                js.w(Ev.params)
              )
            .add(ui.img("see"))))
        .adds(iter.map([0:arr.size(Ev.params)], \i -> return Q("td")
            .klass("rframe")
            .text(fns.paramFmt(Md.paramTypes[i], Ev.params[i]))
          ;))
        .add(Q("td").klass("rhead"))
        .add(Q("td")
          .klass("rframe")
          .text(math.toIso(Ev.assets, 2)))
        .add(Q("td")
          .klass("rframe")
          .text(math.toIso(Ev.profits * 100, 2) + "%"))
        .add(Q("td")
          .klass("rframe")
          .text(math.toIso(fns.evaluate(Ev.assets, Ev.profits), 0)))
        .add(Q("td")
          .klass("rframe")
          .text(math.toIso(Ev.sales, 0)))
        .add(Q("td").klass("rhead"))
        .add(Q("td")
          .klass("rframe")
          .text(math.toIso(Ev.hassets, 2)))
        .add(Q("td")
          .klass("rframe")
          .text(math.toIso(Ev.hprofits * 100, 2) + "%"))
        .add(Q("td")
          .klass("rframe")
          .text(math.toIso(fns.evaluate(Ev.hassets, Ev.hprofits), 0)))
        .add(Q("td")
          .klass("rframe")
          .text(math.toIso(Ev.hsales, 0)));))
      )
  ;

};

/// \<domo>, s -> ()
mk = \wg, modelId -> mk2(wg, modelId, false);;

