// Copyright 01-Jun-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Functions.

import "model";
import "cts";

/// Returns a number ISO formatted using model parameter types.
///   type  : One of model.dayParam or model.percParam.
///   number: Number to format.
paramFmt = \type, number -> return switch(type) {
    model.percParam: math.toIso(number, 4)[2:];
    default: math.toIso(number, 0);
  };;

/// Format for integers < 100
///   v: Value
/// \n -> s
format00 = \n -> return (n < 10) ? "0" + n : "" + n;;

/// Returns 'true' if 'q' > 0
isValidQuote = \q -> return q > 0;;

/// Return qs['i'] if 'i' is > 0.
/// Otherwise return the last previous valid quote or 'def' if every previous
/// quote is <= 0.
/// \[n...], n, n -> n
validQuote = \Qs, i, def -> {
  q = [Qs[i]];
  I = [i];
  if (isValidQuote(q)) return q;
  I! -= 1;
  while (I! >= 0) {
    q = Qs[I!];
    if (isValidQuote(q)) return q;
    I! -= 1;
  }
  return def;
};

/// Returns profits in references:
///   APRX ->
///     In portofio: (q < ref ? q - ref : (q - ref) * inc) * stocks
///     Free       : (q > ref ? ref - q : (ref - q) * inc) * (cts.bet / q)
///   modelId  : Investor model identifier.
///   params   : Model parameters.
///   stocks   : Stocks number in portfolio. 0 if the company is not en portfolio.
///   q        : Current quote.
///   ref      : Reference at the beginning of day.
/// \s, [n.], n, m, n -> n
refProfits = \modelId, params, stocks, q, ref -> {
  if (modelId != "APRX") throw "Model " + modelId + " not implemented.";

  inc = params[1];
  return stocks > 0
    ? (q < ref ? q - ref : (q - ref) * inc) * stocks
    : (q > ref ? ref - q : (ref - q) * inc) * (cts.bet / q)
  ;
};

