// Copyright 11-Sep-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Ibex page.

import "libdm/menu";
import "libdm/oldChart";
import "libdm/modalBox";
import "data/cts";
import "data/ibex";
import "wgs/msg";
import "i18n";

Q = ui.q;
II = i18n.tlt;

msgWait = Q("div");

/// Constructor
/// \<domo> -> ()
mk = \wg -> {
  mk2(wg, "charts");
};

// Constructor with option.
//    wg: Container.
//    Ibex: Ibex quotes.
//    msel: Menu selection.
//  \<domo>, [<quote>.],s -> ()
mk2 = async \wg, msel -> {
  Rp = await client.send({
    prg: cts.appName,
    module: "Acc",
    source: "ibexPg",
    rq: "idata"
  });
  Ibex = ibex.fromJs(Rp.ibex);

  Lopts = [
    menu.toption("charts", II("Charts"), \ -> mk2(wg, "charts");),
    menu.separator(),
    menu.toption("data", II("Data"), \ -> mk2(wg, "data");)
  ];
  Ropts = [menu.toption("update", II("Update"), \ -> update(wg, msel);)];
  menuWg = menu.mk(Lopts, Ropts, msel, false);

  body = Q("div");

  if (msel == "data") data(body, Ibex);
  else charts(body, arr.reverse(Ibex.qs));

  wg
    .removeAll()
    .add(menuWg)
    .add(body)
    .add(msgWait)
  ;
};

// Control ---------------------------------------------------------------------

// \ -> ()
update = async \wg, msel -> {
  box = modalBox.mk(
    Q("div")
      .add(Q("div")
        .style("text-align:center")
        .add(ui.img("wait2.gif").klass("frame"))),
    false
  );
  msgWait
    .removeAll()
    .add(box.wg);
  modalBox.show(box, true);

  Rp = await client.send({
    prg: cts.appName,
    module: "Acc",
    source: "ibexPg",
    rq: "update"
  });

  modalBox.show(box,false);

  if (Rp.withError) {
    if (Rp.withWarnings)
      msg.error(II("Errors and warnings found.<br>See log."), \ -> {});
    else
      msg.error(II("Errors found.<br>See log."), \ -> {});
  } else if (Rp.withWarnings) {
    msg.info(II("Warnings found.<br>See log."), \ -> {});
  } else {
    msg.ok(II("Download ok."), \->{});
  }

  mk2(wg, msel);
};

// View ------------------------------------------------------------------------

// \<domo>, <ibex> -> ()
data = \wg, Ibex -> {
  Cos = Ibex.cos;
  arr.sort(Cos, \c1, c2 -> return c1 < c2;);
  cosSz = arr.size(Cos);
  cosSz2 = cosSz % 2 == 0 ? cosSz / 2 : math.toInt(cosSz / 2) + 1;

  tbCos = Q("table")
    .klass("frame")
    .adds(iter.map([0:cosSz2], \i -> return Q("tr")
      .add(Q("td")
        .style("align:left")
        .text(Cos[i]))
      .add(Q("td")
        .html("&nbsp;&nbsp;"))
      .add(Q("td")
        .style("align:left")
        .text(i + cosSz2 >= cosSz ? "" : Cos[i + cosSz2]));))
  ;

  viewer = Q("textarea")
    .att("cols", 70)
    .att("rows", 25)
    .att("disabled", true)
    .text(
      "| " + fcenter(II("Date"), 8) +
      " |" + fright(II("Open"), 10) +
      " |" + fright(II("CloseN"), 10) +
      " |" + fright(II("Max."), 10) +
      " |" + fright(II("Min."), 10) +
      " |" + fright(II("Vol."), 16) +
      " |\n" +
      "|-" + ffill("-", 8) +
      "-|" + ffill("-", 10) +
      "-|" + ffill("-", 10) +
      "-|" + ffill("-", 10) +
      "-|" + ffill("-", 10) +
      "-|" + ffill("-", 16) +
      "-|\n" +
      arr.join(arr.map(Ibex.qs, \Qt -> return
        "| " + fcenter(Qt.date, 8) +
        " |" + fright(math.toIso(Qt.open, 2), 10) +
        " |" + fright(math.toIso(Qt.close, 2), 10) +
        " |" + fright(math.toIso(Qt.max, 2), 10) +
        " |" + fright(math.toIso(Qt.min, 2), 10) +
        " |" + fright(math.toIso(Qt.vol, 0), 16) +
        " |"
        ;), "\n") +
      "\n"
    )
    ;

  wg
    .removeAll()
    .add(Q("table")
      .att("align", "center")
      .add(Q("tr")
        .add(Q("td")
          .klass("head")
          .text(II("Companies")))
        .add(Q("td"))
        .add(Q("td")
          .klass("head")
          .text(II("Quotes"))))
      .add(Q("tr")
        .add(Q("td")
          .style("vertical-align:top")
          .add(tbCos))
        .add(Q("td"))
        .add(Q("td")
          .add(viewer))))
  ;
};

// \<domo>, [<quote>.] -> ()
charts = \wg, Qs -> {
  Es = arr.map(Qs, \Qt -> return {date: Qt.date, total: Qt.close};);
  now = time.now();
  today = time.toStr(now);

  Chart = oldChart.mkExample();
  Chart.ExArea.width = 600;
  Chart.ExArea.height = 200;
  Chart.ExArea.Atts.Border.width = 0;
  Chart.InPadding.top = 10;
  Chart.InPadding.right = 10;
  Chart.InPadding.bottom = 20;
  Chart.InPadding.left = 85;
  Chart.ChartPadding.top = 4;
  Chart.ChartPadding.right = 2;
  Chart.ChartPadding.bottom = 4;
  Chart.ChartPadding.left = 2;

  // LAST MONTH

  month = today[:6];
  E00s = arr.dropWhile(Es, \E -> return E.date[:6] <  month;);
  E0s = arr.size(E00s) > 1 ? E00s : Es[-2:];
  Ef0 = E0s[0];
  El0 = arr.peek(E0s);
  total0 = El0.total - Ef0.total;

  back0 = total0 > 0
    ? "#e9e9f2"
    : total0 < 0
      ? "#f2e9e9"
      : "#e9e9e9"
    ;
  Chart.ExArea.Atts.background = back0;

  Lb0s = [];
  Val0s = [[]];
  for (E = E0s) {
    arr.push(Lb0s, time.toIso(time.fromStr(E.date)!));
    arr.push(Val0s[0], [E.total]);
  }
  Att0s = [
    oldChart.mkLine(2, "#0041aa", false)
  ];
  Data0 = oldChart.mkData(Lb0s, Val0s, Att0s);
  Data0.round = 0;
  Data0.Labels = Lb0s;
  Data0.SetValues = [Val0s[0]];
  Data0.SetAtts = Att0s;
  Data0.drawGrid = \lb, i -> {
    if (i == 0) return false;
    return i % 3 == 0;
  };
  Data0.drawLabel = Data0.drawGrid;
  Data0.mapLabel = \lb, i -> return lb[:2];;


  lastMonth = Q("table")
    .att("align", "center")
    .add(Q("tr")
      .add(Q("td")
        .klass("frame0")
        .style("background-color:" + back0)
        .add(oldChart.mkWg(Chart, Data0))))
  ;

  // CURRENT YEAR

  year = today[:4];
  E10s = arr.dropWhile(Es, \E -> return E.date[:4] <  year;);
  E1s = arr.size(E10s) > 1 ? E10s : Es[-2:];
  Ef1 = E1s[0];
  El1 = arr.peek(E1s);
  total1 = El1.total - Ef1.total;

  Chart.ChartPadding.top = 2;
  Chart.ChartPadding.bottom = 2;
  back1 = total1 > 0
    ? "#e9e9f2"
    : total1< 0
      ? "#f2e9e9"
      : "#e9e9e9"
    ;
  Chart.ExArea.Atts.background = back1;

  Lb1s = [];
  Val1s = [[]];
  for (E = E1s) {
    arr.push(Lb1s, time.toIso(time.fromStr(E.date)!));
    arr.push(Val1s[0], [E.total]);
  }
  Att1s = [
    oldChart.mkLine(1.5, "#0041aa", false)
  ];
  Data1 = oldChart.mkData(Lb1s, Val1s, Att1s);
  Data1.round = 0;
  Data1.Labels = Lb1s;
  Data1.SetValues = [Val1s[0]];
  Data1.SetAtts = Att1s;
  Data1.drawGrid = \lb, i -> {
    if (i == 0) return false;
    return Lb1s[i - 1][3:5] != lb[3:5] ? true : false;
  };
  Data1.drawLabel = Data1.drawGrid;
  Data1.mapLabel = \lb, i -> return lb[3:5];;

  currentYear = Q("table")
    .att("align", "center")
    .add(Q("tr")
      .add(Q("td")
        .klass("frame0")
        .style("background-color:" + back1)
        .add(oldChart.mkWg(Chart, Data1))))
  ;

  // LAST YEAR

  year2 = time.toStr(time.addDays(now, -365));
  E20s = arr.dropWhile(Es, \E -> return E.date < year2;);
  E2s = arr.size(E20s) > 1 ? E20s : Es[-2:];
  Ef2 = E2s[0];
  El2 = arr.peek(E2s);
  total2 = El2.total - Ef2.total;

  back2 = total2 > 0
    ? "#e9e9f2"
    : total2< 0
      ? "#f2e9e9"
      : "#e9e9e9"
    ;
  Chart.ExArea.Atts.background = back2;

  Lb2s = [];
  Val2s = [[]];
  for (E = E2s) {
    arr.push(Lb2s, time.toIso(time.fromStr(E.date)!));
    arr.push(Val2s[0], [E.total]);
  }
  Att2s = [
    oldChart.mkLine(1.5, "#0041aa", false)
  ];
  Data2 = oldChart.mkData(Lb2s, Val2s, Att2s);
  Data2.round = 0;
  Data2.Labels = Lb2s;
  Data2.SetValues = [Val2s[0]];
  Data2.SetAtts = Att2s;
  Data2.drawGrid = \lb, i -> {
    if (i == 0) return false;
    return Lb2s[i - 1][3:5] != lb[3:5] ? true : false;
  };
  Data2.drawLabel = Data2.drawGrid;
  Data2.mapLabel = \lb, i -> return lb[3:5];;

  lastYear = Q("table")
    .att("align", "center")
    .add(Q("tr")
      .add(Q("td")
        .klass("frame0")
        .style("background-color:" + back2)
        .add(oldChart.mkWg(Chart, Data2))))
  ;

  // ALL

  E3s = Es;
  Ef3 = E3s[0];
  El3 = arr.peek(E3s);
  total3 = El3.total - Ef3.total;

  back3 = total3 > 0
    ? "#e9e9f2"
    : total3 < 0
      ? "#f2e9e9"
      : "#e9e9e9"
    ;
  Chart.ExArea.Atts.background = back3;

  Lb3s = [];
  Val3s = [[]];
  for (E = E3s) {
    arr.push(Lb3s, time.toIso(time.fromStr(E.date)!));
    arr.push(Val3s[0], [E.total]);
  }
  Att3s = [
    oldChart.mkLine(1.5, "#0041aa", false)
  ];
  Data3 = oldChart.mkData(Lb3s, Val3s, Att3s);
  Data3.round = 0;
  Data3.Labels = Lb3s;
  Data3.SetValues = [Val3s[0]];
  Data3.SetAtts = Att3s;
  Data3.drawGrid = \lb, i -> {
    if (i == 0) return false;
    return Lb3s[i - 1][3:5] != lb[3:5] & str.index("01 04 07 10", lb[3:5]) != -1
      ? true
      : false;
  };
  Data3.drawLabel = Data3.drawGrid;
  Data3.mapLabel = \lb, i -> return lb[3:5] == "01" ? lb[6:] : lb[3:5];;

  all = Q("table")
    .att("align", "center")
    .add(Q("tr")
      .add(Q("td")
        .klass("frame0")
        .style("background-color:" + back3)
        .add(oldChart.mkWg(Chart, Data3))))
  ;


  wg
    .removeAll()
    .add(Q("div").klass("head").html(II("Last Month")))
    .add(lastMonth)
    .add(lastMonth)
    .add(Q("div").klass("head").html(II("Current Year")))
    .add(currentYear)
    .add(Q("div").klass("head").html(II("Last Year")))
    .add(lastYear)
    .add(Q("div").klass("head").html(II("All")))
    .add(all)
  ;
};

// \s, n -> s
fcenter = \tx, n -> {
  len = str.len(tx);
  if (n < len) return tx[:n];
  dif = n - len;
  left = math.toInt(dif / 2);
  right = dif - left;
  return iter.reduce(
      [0:right],
      iter.reduce([0:left], tx, \r, i -> return " " + r;),
      \r, i -> return r + " ";
    );
};

// \s -> n -> s
fright = \tx, n -> {
  len = str.len(tx);
  if (n < len) return tx[:n];
  dif = n - len;
  return iter.reduce([0:dif], tx, \r, i -> return " " + r;);
};

// \s, n -> s
ffill = \ch, n -> return iter.reduce([0:n], "", \r, i -> return r + ch;);;
