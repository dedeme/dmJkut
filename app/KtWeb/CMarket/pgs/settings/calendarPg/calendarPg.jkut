// Copyright 01-Jun-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Accounting information, main page.

import "libdm/datePicker";
import "wgs/msg";
import "wgs/wrule";
import "pgs/settings/calendarPg/wgs/whour";
import "data/cts";
import "data/fns";
import "data/calendar/calendar";
import "data/calendar/timetable";
import "data/calendar/marketDay";
import "i18n";

Q = ui.q;
II = i18n.tlt;

/// Contents maker.
///   wg    : Container.
/// \<domo> -> ()
mk = async \wg -> {
  Rp = await client.send({
    prg: cts.appName,
    module: "Settings",
    source: "CalendarPg",
    rq: "idata"
  });
  Calendar = calendar.fromJs(Rp.calendar);

  generalDiv = Q("div").style("padding-bottom:15px");
  holidaysDiv = Q("div");
  specialDaysDiv = Q("div");

  Gopen = [[]];
  Gclose = [[]];

  // Control -------------------------------------------------------------------

  // \ -> ()
  generalChange = \ -> {
    TT = timetable.mk(
      whour.hour(Gopen!), whour.minute(Gopen!),
      whour.hour(Gclose!), whour.minute(Gclose!)
    );
    client.send({
    prg: cts.appName,
    module: "Settings",
    source: "CalendarPg",
    rq: "setGeneral",
    timetable: timetable.toJs(TT)
    });
  };

  // \[s...] -> ()
  holidaysChange = async \Ls -> {
    await client.send({
    prg: cts.appName,
    module: "Settings",
    source: "CalendarPg",
    rq: "setHolidays",
    holidays: Ls
    });
    mk(wg);
  };

  // \[<marketDay>...] -> ()
  specialDaysChange = async \Ls -> {
    await client.send({
    prg: cts.appName,
    module: "Settings",
    source: "CalendarPg",
    rq: "setSpecialDays",
    specialDays: arr.map(Ls, marketDay.toJs)
    });
    mk(wg);
  };

  // \[s...], s -> ()
  addHoliday = \Ls, d -> {
    now = time.toStr(time.now());
    if (d < now) {
      msg.error(II("Date before today"), \ -> {});
      return;
    }
    if (arr.any(Ls, \e -> return e == d;)) {
      msg.error(i18n.fmt(II("Date '%0' is duplicated"), [d]), \ -> {});
      return;
    }
    arr.push(Ls, d);
    holidaysChange(Ls);
  };

  // \[s...], s -> ()
  delHoliday = \Ls, d -> {
    if (ui.confirm(i18n.fmt(II("Delete '%0'?"), [d])))
      holidaysChange(arr.filter(Ls, \e -> return e != d;));
  };

  // \[<marketDay>...], s, n, n, n, n -> ()
  addSpecialDay = \Ls, d, hopen, mopen, hclose, mclose -> {
    now = time.toStr(time.now());
    if (d < now) {
      msg.error(II("Date before today"), \ -> {});
      return;
    }
    if (arr.any(Ls, \S -> return S.date == d;)) {
      msg.error(i18n.fmt(II("Date '%0' is duplicated"), [d]), \ -> {});
      return;
    }
    arr.push(Ls, marketDay.mk(d, hopen, mopen, hclose, mclose));
    specialDaysChange(Ls);
  };

  // \[<marketDay>...], s -> ()
  delSpecialDay = \Ls, d -> {
    if (ui.confirm(i18n.fmt(II("Delete '%0'?"), [d]))) {
      specialDaysChange(arr.filter(Ls, \S -> return S.date != d;));
    }
  };

  // View ----------------------------------------------------------------------

  Gopen! = whour.mk(
    Calendar.General.hopen, Calendar.General.mopen, generalChange
  );
  Gclose! = whour.mk(
    Calendar.General.hclose, Calendar.General.mclose, generalChange
  );

  /// \ -> ()
  generalWg = \ -> generalDiv
      .removeAll()
      .add(Q("table")
        .att("align", "center")
        .klass("frame")
        .add(Q("tr")
          .add(Q("td")
            .klass("head")
            .text(II("Open")))
          .add(Q("td")
            .klass("head")
            .text(II("CloseN"))))
        .add(Q("tr")
          .add(Q("td").style("padding:0px")
            .add(Q("hr")))
          .add(Q("td").style("padding:0px")
            .add(Q("hr"))))
        .add(Q("tr")
          .add(Q("td")
            .add(whour.wg(Gopen!).klass("frame")))
          .add(Q("td")
            .add(whour.wg(Gclose!).klass("frame")))))
    ;;

  // \ -> ()
  holidaysWg = \ -> {
    Ls = arr.copy(Calendar.Holidays);
    arr.sort(Ls, \e1, e2 -> return e1 < e2;);

    // \ -> [<domo>...]
    list = \ -> return !Ls
      ? [ Q("tr")
          .add(Q("td"))
          .add(Q("td")
            .add(Q("table")
              .att("align", "center")
              .klass("frame4")
              .add(Q("tr")
                .add(Q("td")
                  .html(II("Without dates"))))))
        ]
      : arr.map(Ls, \d -> return Q("tr")
          .add(Q("td")
            .add(ui.link(\e -> delHoliday(Ls, d);)
              .add(ui.img("minus"))))
          .add(Q("td")
            .style("text-align:center")
            .text(i18n.getLang() == "es"
                ? time.toIso(time.fromStr(d)!)
                : time.toEn(time.fromStr(d)!)))
        ;)
      ;;

    dpInput = Q("input")
      .att("type", "text")
      .style("text-align:center;width:166px")
    ;
    dp = datePicker.mk(
      i18n.getLang() == "es",
      time.now(),
      \d -> if (d == "") {
          dt = time.now();
          datePicker.setDate(dp, dt);
          dpInput.value(i18n.getLang() == "es"
            ? time.toIso(time.fromStr(dt)!)
            : time.toEn(time.fromStr(dt)!)
          );
        }
    );

    holidaysDiv
      .removeAll()
      .add(Q("table")
        .att("align", "center")
        .klass("frame")
        .add(Q("tr")
          .add(Q("td")
            .add(ui.link(
                \e -> addHoliday(Ls, time.toStr(datePicker.getDate(dp)!));
              ).add(ui.img("plus"))))
          .add(Q("td")
            .add(datePicker.mkText(dp, dpInput))))
        .add(Q("tr")
          .add(Q("td").att("colspan", 2)
            .add(Q("hr"))))
        .adds(list()))
    ;
  };

  // \ -> ()
  specialDaysWg = \ -> {
    Ls = arr.copy(Calendar.SpecialDays);
    arr.sort(Ls, \S1, S2 -> return S1.date < S2.date;);

  // \ -> [<domo>...]
    list = \ -> return !Ls
      ? [ Q("tr")
          .add(Q("td"))
          .add(Q("td")
            .add(Q("table")
              .att("align", "center")
              .klass("frame4")
              .add(Q("tr")
                .add(Q("td")
                  .html(II("Without dates"))))))
          .add(Q("td"))
          .add(Q("td"))
        ]
      : arr.map(Ls, \S -> return Q("tr")
          .add(Q("td")
            .add(ui.link(\e -> delSpecialDay(Ls, S.date);)
              .add(ui.img("minus"))))
          .add(Q("td")
            .style("text-align:center")
            .text(i18n.getLang() == "es"
                ? time.toIso(time.fromStr(S.date)!)
                : time.toEn(time.fromStr(S.date)!)))
          .add(Q("td")
            .style("text-align:center")
            .text(fns.format00(S.hopen) + ":" + fns.format00(S.mopen)))
          .add(Q("td")
            .style("text-align:center")
            .text(fns.format00(S.hclose) + ":" + fns.format00(S.mclose)))
        ;)
      ;;

    dpInput = Q("input")
      .att("type", "text")
      .style("text-align:center;width:166px")
    ;
    dp = datePicker.mk(
      i18n.getLang() == "es",
      time.now(),
      \d -> if (d == "") {
          dt = time.now();
          datePicker.setDate(dp, dt);
          dpInput.value(i18n.getLang() == "es"
            ? time.toIso(time.fromStr(dt)!)
            : time.toEn(time.fromStr(dt)!)
          );
        }
    );

    open = whour.mk(whour.hour(Gopen!), whour.minute(Gopen!), \ -> {});
    close = whour.mk(whour.hour(Gclose!), whour.minute(Gclose!), \ -> {});
    specialDaysDiv
      .removeAll()
      .add(Q("table")
        .att("align", "center")
        .klass("frame")
        .add(Q("tr")
          .add(Q("td")
            .add(ui.link(\ev -> {
              addSpecialDay(
                Ls, time.toStr(datePicker.getDate(dp)!),
                whour.hour(open), whour.minute(open),
                whour.hour(close), whour.minute(close)
              );
            }).add(ui.img("plus"))))
          .add(Q("td")
            .add(datePicker.mkText(dp, dpInput)))
          .add(Q("td")
            .add(whour.wg(open).klass("frame")))
          .add(Q("td")
            .add(whour.wg(close).klass("frame"))))
        .add(Q("tr")
          .add(Q("td")
            .att("colspan", 4).add(Q("hr"))))
        .add(Q("tr")
          .add(Q("td"))
          .add(Q("td")
            .klass("head")
            .text(II("Date")))
          .add(Q("td")
            .klass("head")
            .text(II("Open")))
          .add(Q("td")
            .klass("head")
            .text(II("CloseN"))))
        .add(Q("tr")
          .add(Q("td")
            .att("colspan", 4)
            .add(Q("hr"))))
        .adds(list()))
    ;
  };

  generalWg();
  holidaysWg();
  specialDaysWg();

  wg
    .removeAll()
    .add(Q("div")
      .style("text-align:center")
      .add(Q("div")
        .klass("head")
        .text(II("Calendar")))
      .add(Q("table")
        .klass("main")
        .add(Q("tr")
          .add(Q("td")
            .att("colspan", 2)
            .add(wrule.mkBig(II("General Time Table")))))
        .add(Q("tr")
          .add(Q("td")
            .att("colspan", 2)
            .add(generalDiv)))
        .add(Q("tr")
          .add(Q("td")
            .style("width:50%;vertical-align:top")
            .add(wrule.mkBig(II("Holidays")))
            .add(holidaysDiv))
          .add(Q("td")
            .style("width:50%;vertical-align:top")
            .add(wrule.mkBig(II("Special days")))
            .add(specialDaysDiv)))))
  ;
};

