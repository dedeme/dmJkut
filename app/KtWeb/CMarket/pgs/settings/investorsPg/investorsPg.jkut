// Copyright 01-Jun-2023 ºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Accounting information, main page.

import "libdm/modalBox";
import "libdm/menu";
import "wgs/msg";
import "data/cts";
import "data/model";
import "data/investor/investor";
import "data/investor/istrategy";
import "data/fns";
import "i18n";

Q = ui.q;
II = i18n.tlt;

/// Contents maker.
///   wg         : Container.
/// \<domo>, n -> ()
mk = async \wg -> {
  Rp = await client.send({
    prg: cts.appName,
    module: "Settings",
    source: "InvestorsPg",
    rq: "idata"
  });
  Models = arr.map(Rp.models, model.fromJs);
  Investor = investor.fromJs(Rp.investor);

  waitBox = modalBox.mk(ui.img("wait2.gif"), false);
  editorDiv = Q("div");
  paramsDiv = Q("div");

  EditorView = [[]];

  // Control -------------------------------------------------------------------

  // \ -> ()
  update = async \ -> {
    modalBox.show(waitBox, true);
    Rp = await client.send({
      prg: cts.appName,
      module: "Settings",
      source: "InvestorsPg",
      rq: "updateAll"
    });
    modalBox.show(waitBox, false);
    if (!Rp.ok) {
      msg.error(cts.failMsg, \ -> {});
      return;
    }
    mk(wg);
  };

  // \s -> ()
  edit = \nick -> {
    EditorView!(nick);
    window.scroll(0, 0);
  };

  // \ -> ()
  cancel = \ -> editorDiv.removeAll();;

  // \s, s, [f...] -> ()
  accept = async \nickName, modelId, Params -> {
    await client.send({
      prg: cts.appName,
      module: "Settings",
      source: "InvestorsPg",
      rq: "update",
      nickName,
      modelId,
      params: Params
    });
    mk(wg);
  };
  // View ----------------------------------------------------------------------

  // \s, s, [f...] -> ()
  paramsView = \nick, modelId, Params -> {
    Md = arr.find(Models, \md -> return md.id == modelId;)!;
    sel = Q("select");
    for (M = Models) {
      op = Q("option").text(M.id);
      if (M.id == Md.id) op.att("selected", true);
      sel.e.add(op.e);
    }
    sel.on(
      "change",
      \e -> {
          Md = Models[sel.e.selectedIndex];
          paramsView(nick, Md.id, Md.paramBases);
        }
    );

    paramsWg = Q("table").klass("frame")
      .add(Q("tr")
        .adds(iter.map(
          [0:arr.size(Md.paramNames)],
          \i -> return Q("td")
            .add(Q("div")
              .add(Q("div")
                .style("text-align:center")
                .text(Md.paramNames[i]))
              .add(\-> {
                  inp = ui.field("Zord" + (i + 1))
                    .att("id", "Zord" + i)
                    .style("width:80px")
                    .on("change", \e -> {
                        V = math.fromIso(e.target.value);
                        if (!V) {
                          ui.alert(i18n.fmt(
                            II("Bad number [%0]"), [e.target.value]
                          ));
                          paramsView(nick, modelId, Params);
                          return;
                        }
                        v = V!;
                        Params[i] = v;
                      })
                    .value(math.toIso(Params[i], 6))
                  ;
                  ui.changePoint(inp);
                  return inp;
                }()))
          ;)))
    ;

    paramsDiv
      .removeAll()
      .add(Q("table")
        .add(Q("tr")
          .add(Q("td")
            .add(sel))
          .add(Q("td")
            .style("text-align:right")
            .add(ui.link(\e ->
                paramsView(
                  nick,
                  Investor.base.modelId,
                  Investor.base.params
                )
              ;).klass("link")
              .text(II("Default Model")))))
        .add(Q("tr")
          .add(Q("td")
            .att("colspan", 2)
            .att("align", "center")
            .add(paramsWg)))
        .add(Q("tr")
          .add(Q("td")
            .att("colspan", 2)
            .style("text-align:center")
            .add(Q("button")
              .text(II("Cancel"))
              .on("click", \e -> cancel();))
            .add(Q("span").text(" "))
            .add(Q("button")
              .att("id", "Zord" + arr.size(Md.paramNames))
              .text(II("Accept"))
              .on("click", \e -> {
                accept(nick, modelId, Params);
              })))))
    ;
  };

  // \s -> ()
  EditorView! = \nick -> {
    Str = nick == "" ? Investor.base : Investor.nicks[nick];
    Md = arr.find(Models, \md -> return md.id == Str.modelId;)!;
    paramsView(nick, Md.id, Str.params);

    editorDiv
      .removeAll()
      .add(Q("div")
        .klass("head")
        .text(nick == ""
          ? II("Default Model")
          : i18n.fmt(II("%0 Model"), [nick])
        ))
      .add(Q("table")
        .att("align", "center")
        .add(Q("tr")
          .add(Q("td")
            .att("colspan", 2)
            .add(paramsDiv))))
      .add(Q("hr"))
    ;
  };

  Ropts = [menu.toption("update", II("Update"), update)];
  menuWg = menu.mk([], Ropts, "", false);

  Base = Investor.base;
  Md = arr.find(Models, \md -> return md.id == Base.modelId;)!;
  NickStrs = dic.toArr(Investor.nicks);
  arr.sort(NickStrs, \N1, N2 -> return N1[0] < N2[0];);
  maxNParams = arr.reduce(
    NickStrs, 0,
    \r, S -> return arr.size(S[1].params) > r ? arr.size(S[1].params) : r;
  );
  wg
    .removeAll()
    .add(waitBox.wg)
    .add(menuWg)
    .add(editorDiv)
      .add(Q("div")
        .klass("head")
        .html(II("Default Model")))
      .add(Q("table")
        .klass("white")
        .att("align", "center")
        .add(Q("tr")
          .add(Q("td")
            .klass("header")
            .html(II("Model")))
          .adds(arr.map(Md.paramNames, \n -> return Q("td")
              .klass("header")
              .html(n)
            ;)))
        .add(Q("tr")
          .add(Q("td")
            .klass("border")
            .add(ui.link(\e -> edit("");)
              .klass("link")
              .html(Md.id)))
          .adds(iter.map(
            [0:arr.size(Base.params)],
            \ix -> return Q("td")
              .klass("number")
              .text(fns.paramFmt(
                  Md.paramTypes[ix],
                  Base.params[ix]
                ))
            ;))))
      .add(Q("div")
        .klass("head")
        .html(II("Nick models")))
      .add(Q("table")
        .klass("white")
        .att("align", "center")
        .add(Q("tr")
          .add(Q("td")
            .klass("header")
            .html(II("Nick")))
          .add(Q("td")
            .klass("header")
            .html(II("Model")))
          .adds(iter.map(
            [0:maxNParams],
            \n -> return Q("td")
              .klass("header")
              .html("P. " + (n + 1))
            ;))
          .add(Q("td")
            .klass("header")
            .text("·")))
        .adds(arr.map(NickStrs, \NS -> {
          nk = NS[0];
          Str = NS[1];
          Md = arr.find(Models, \md -> return md.id == Str.modelId;)!;
          return Q("tr")
            .add(Q("td")
              .klass("border")
              .text(nk))
            .add(Q("td")
              .klass("border")
              .add(ui.link(\e -> edit(nk);)
                .klass("link")
                .text(Md.id)))
            .adds(iter.map(
              [0:maxNParams],
              \ix -> return
                ix >= arr.size(Str.params)
                  ? Q("td")
                    .klass("border")
                  : Q("td")
                    .klass("number")
                    .text(fns.paramFmt(Md.paramTypes[ix], Str.params[ix]))
              ;))
            .add(Q("td")
              .klass("border")
              .add(ui.img(istrategy.eq(Base, Str) ? "blank" : "warning")))
          ;
        })))
  ;
};

