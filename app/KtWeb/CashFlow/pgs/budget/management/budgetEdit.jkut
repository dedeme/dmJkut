// Copyright 03-Sep-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Budget edit page.

import "data/diary";
import "data/budget";
import "data/budgetEntry";
import "data/plan";
import "data/planEntry";
import "data/month";
import "cts";
import "global";
import "data/budgetWgEntry";
import "wgs/numberField";
import "i18n";

Q = ui.q;
II = i18n.tlt;

/// Constructor
///   wg: Container.
///   selectedYear: Year edited.
///   selectedMonth: Month edited (from 1 to 12).
///   Plan: Budget plan.
///   Diary: Diary annotations.
///   Budget: Current budget.
///   PreviousBudget: Previous Budget.
///   updateFinalBalanceFn: Funtion to update balance.
/// \<domo>, s, n, [<planEntry>.], [<diaryEntry>.], [[<budgetEntry>.].],
///  [[<budgetEntry>.].], (\-> ()) -> ()
mk = \wg, selectedYear, selectedMonth,
      :arr Plan, :arr Diary, :arr Budget, :arr PreviousBudget,
      updateFinalBalanceFn -> {

  showOp = [[]];

  // Control -------------------------------------------------------------------

  // \ -> ()
  updateBudget = async \ -> {
    , dbKey : await client.send({
      prg: cts.appName,
      source: "BudgetEdit",
      rq: "updateBudget",
      dbKey: global.dbKeyV!,
      year: selectedYear,
      budget: Budget
    });
    global.dbKeyV! = dbKey;
    updateFinalBalanceFn();
    showOp!();
  };

  // \s -> ()
  setReal = \id -> {
    budget.setAmount(
      Budget,
      selectedMonth - 1,
      id,
      diary.accAmount(Diary, id, selectedMonth - 1, selectedMonth)
    );
    updateBudget();
  };

  // \s -> ()
  setMonth = \id -> {
    m = selectedMonth <= 0 ? 12 : selectedMonth - 1;
    B = selectedMonth <= 0 ? PreviousBudget : Budget;
    am = budget.accAmount(B, id, m - 1, m);
    if (am == 0) {
      ui.alert(II("There is not value for previous month"));
      showOp!();
      Q("#" + id).e.focus();
      return;
    }
    budget.setAmount(Budget, selectedMonth - 1, id, am);
    updateBudget();
  };

  // \s -> ()
  setYear = \id -> {
    am = budget.accAmount(PreviousBudget, id, selectedMonth - 1, selectedMonth);
    if (am == 0) {
      ui.alert(II("There is not value for previous year"));
      showOp!();
      Q("#" + id).e.focus();
      return;
    }
    budget.setAmount(Budget, selectedMonth - 1, id, am);
    updateBudget();
  };

  // \s, n -> ()
  changeAmount = \id, am -> {
    if (am < 0) {
      ui.alert(II("Values less than 0 are not allowed"));
      showOp!();
      Q("#" + id).e.focus();
      return;
    }
    budget.setAmount(Budget, selectedMonth - 1, id, am);
    updateBudget();
  };

  // View ----------------------------------------------------------------------

  // \ -> ()
  showOp! = \ -> {
    :arr BudgetModel = []; // [<budgetWgEntry>.]
    for (:planEntry pe = Plan) {
      BudgetModel.push(budgetWgEntry.mk(
        pe.isIncome, pe.id,
        budget.accAmount(Budget, pe.id, selectedMonth -1, selectedMonth),
        diary.accAmount(Diary, pe.id, selectedMonth -1, selectedMonth)
      ));
    }

    :arr Incomes0 = BudgetModel.filter(\:budgetWgEntry e -> return e.isIncome;);
    Incomes0.sort(\:budgetWgEntry e1, :budgetWgEntry e2 ->
      return e1.accId < e2.accId;);
    :arr Expenses0 = BudgetModel.filter(\:budgetWgEntry e -> return !e.isIncome;);
    Expenses0.sort(\:budgetWgEntry e1, :budgetWgEntry e2 ->
      return e1.accId < e2.accId;);
    sz = Incomes0.size() > Expenses0.size()
      ? Incomes0.size()
      : Expenses0.size()
    ;

    :budgetWgEntry Incomes = Incomes0;
    :budgetWgEntry Expenses = Expenses0;
    wg
      .removeAll()
      .add(Q("div")
        .style("padding:5px;text-align:center")
        .html("<hr><br>" + II("Budget")))
        .add(Q("table")
          .att("align", "center")
          .klass("summary")
          .add(Q("tr")
            .add(Q("td")
              .att("colspan", "5")
              .style("text-align:center")
              .text(II("Incomes")))
            .add(Q("td")
              .text(""))
            .add(Q("td")
              .att("colspan", "5")
              .style("text-align:center")
              .text(II("Expenses"))))
          .add(Q("tr")
            .add(Q("td")
              .klass("frameTx")
              .style("background-color:#d9d9d9")
              .text(II("Account")))
            .add(Q("td")
              .klass("frameTx")
              .style("background-color:#d9d9d9")
              .text(""))
            .add(Q("td")
              .klass("frameTx")
              .style("background-color:#d9d9d9;white-space: nowrap;")
              .text(II("Budget (A)")))
            .add(Q("td")
              .klass("frameTx")
              .style("background-color:#d9d9d9;white-space: nowrap;")
              .text(II("Real (B)")))
            .add(Q("td")
              .klass("frameTx")
              .style("background-color:#d9d9d9;white-space: nowrap;")
              .text(II("Dif. (B - A))")))
            .add(Q("td")
              .klass("frameTx")
              .text(""))
            .add(Q("td")
              .klass("frameTx")
              .style("background-color:#d9d9d9")
              .text(II("Account")))
            .add(Q("td")
              .klass("frameTx")
              .style("background-color:#d9d9d9")
              .text(""))
            .add(Q("td")
              .klass("frameTx")
              .style("background-color:#d9d9d9;white-space: nowrap;")
              .text(II("Budget (A)")))
            .add(Q("td")
              .klass("frameTx")
              .style("background-color:#d9d9d9;white-space: nowrap;")
              .text(II("Real (B)")))
            .add(Q("td")
              .klass("frameTx")
              .style("background-color:#d9d9d9;white-space: nowrap;")
              .text(II("Dif. (B - A))"))))
          .adds(iter.map([0:sz], \i -> return Q("tr")
              .adds(i >= Incomes0.size()
                ? iter.map([0:5], \j -> return Q("td")
                    .klass("frameTx")
                    .style("background-color:#f9f9f9")
                  ;)
                : \ -> {
                  :budgetWgEntry ie = Incomes[i];
                  return [
                    Q("td")
                      .klass("frameTx")
                      .style("background-color:#d9d9d9")
                      .att("title", plan.desc(Plan, ie.accId))
                      .text(ie.accId),
                    Q("td")
                      .klass("frameTx")
                      .style("background-color:#f9f9f9;white-space: nowrap;")
                      .add(ui.link(\ev -> setReal(ie.accId);)
                        .klass("link")
                        .text(II("real")))
                      .add(Q("span").html("&nbsp;&nbsp;"))
                      .add(ui.link(\ev -> setMonth(ie.accId);)
                        .klass("link")
                        .text(II("month")))
                      .add(Q("span").html("&nbsp;&nbsp;"))
                      .add(ui.link(\ev -> setYear(ie.accId);)
                        .klass("link")
                        .text(II("year")))
                        ,
                    Q("td")
                      .klass("frameNm")
                      .style("background-color:#f9f9f9")
                      .add(numberField.mk(
                          ie.accId,
                          Incomes[i == Incomes0.size() - 1 ? 0 :  i + 1]
                            [budgetWgEntry.accId],
                          ie.budget, changeAmount
                        )),
                    Q("td")
                      .klass("frameNm")
                      .style("background-color:#f9f9f9")
                      .text(math.toIso(ie.real, 2)),
                    Q("td")
                      .klass("frameNm")
                      .style("background-color:#f9f9f9")
                      .text(math.toIso(ie.dif, 2))
                  ];
                }())
              .add(Q("td")
                .klass("frameTx"))
              .adds(i >= Expenses0.size()
                ? iter.map([0:5], \j -> return Q("td")
                    .klass("frameTx")
                    .style("background-color:#f9f9f9")
                  ;)
                : \ -> {
                  :budgetWgEntry ee = Expenses[i];
                  return [
                    Q("td")
                      .klass("frameTx")
                      .style("background-color:#d9d9d9")
                      .att("title", plan.desc(Plan, ee.accId))
                      .text(ee.accId),
                    Q("td")
                      .klass("frameTx")
                      .style("background-color:#f9f9f9;white-space: nowrap;")
                      .add(ui.link(\ev -> setReal(ee.accId);)
                        .klass("link")
                        .text(II("real")))
                      .add(Q("span").html("&nbsp;&nbsp;"))
                      .add(ui.link(\ev -> setMonth(ee.accId);)
                        .klass("link")
                        .text(II("month")))
                      .add(Q("span").html("&nbsp;&nbsp;"))
                      .add(ui.link(\ev -> setYear(ee.accId);)
                        .klass("link")
                        .text(II("year")))
                        ,
                    Q("td")
                      .klass("frameNm")
                      .style("background-color:#f9f9f9")
                      .add(numberField.mk(
                          ee.accId,
                          Expenses[i == Expenses0.size() - 1 ? 0 :  i + 1]
                            [budgetWgEntry.accId],
                          ee.budget, changeAmount
                        )),
                    Q("td")
                      .klass("frameNm")
                      .style("background-color:#f9f9f9")
                      .text(math.toIso(ee.real, 2)),
                    Q("td")
                      .klass("frameNm")
                      .style("background-color:#f9f9f9")
                      .text(math.toIso(ee.dif, 2))
                  ];
                }())
            ;))
          .add(Q("tr")
            .add(Q("td")
              .att("colsapan", "9")))
          .add(Q("tr")
            .add(Q("td")
              .klass("frameTx")
              .style("background-color:#d9d9d9")
              .text(II("Total")))
            .add(Q("td")
              .klass("frameNm")
              .style("background-color:#f9f9f9")
              .text(""))
            .add(Q("td")
              .klass("frameNm")
              .style("background-color:#f9f9f9")
              .text(math.toIso(Incomes.sumBudget(), 2)))
            .add(Q("td")
              .klass("frameNm")
              .style("background-color:#f9f9f9")
              .text(math.toIso(Incomes.sumReal(), 2)))
            .add(Q("td")
              .klass("frameNm")
              .style("background-color:#f9f9f9")
              .text(math.toIso(Incomes.sumDif(), 2)))
            .add(Q("td")
              .klass("frameTx"))
            .add(Q("td")
              .klass("frameTx")
              .style("background-color:#d9d9d9")
              .text(II("Total")))
            .add(Q("td")
              .klass("frameNm")
              .style("background-color:#f9f9f9")
              .text(""))
            .add(Q("td")
              .klass("frameNm")
              .style("background-color:#f9f9f9")
              .text(math.toIso(Expenses.sumBudget(), 2)))
            .add(Q("td")
              .klass("frameNm")
              .style("background-color:#f9f9f9")
              .text(math.toIso(Expenses.sumReal(), 2)))
            .add(Q("td")
              .klass("frameNm")
              .style("background-color:#f9f9f9")
              .text(math.toIso(Expenses.sumDif(), 2)))))
   ;
  };

  showOp!();
};

