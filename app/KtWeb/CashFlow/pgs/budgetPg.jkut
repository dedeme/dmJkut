// Copyright 08-Mar-2024 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Budget page.

import "cts";
import "global";
import "data/plan";
import "data/problem";
import "data/diaryEntry";
import "pgs/budget/managementPg";
import "pgs/budget/fixProblemPg";
import "i18n";

Q = ui.q;
II = i18n.tlt;

/// Constructor.
///   wg           : Widget.
///   selectedYear : Selected year.
///   isUntil      : If the budget includes previous months.
///   selectedMonth: In range 1-12.
/// \<domo>, s, b, n -> ()
mk = async \wg, selectedYear, isUntil, selectedMonth -> {
  :plan Plan, // [<planEntry>.]
  :arr HcDiary, // [<diaryEntry>.]
  :arr CFDiary, // [<diaryEntry>.]
  :arr Budget, //[<budgetEntry>.]
  :arr PreviousBudget, //[<budgetEntry>.]
  hcBalance, // n
  cBalance, // n
  dbKey
  : await client.send({
    prg: cts.appName,
    source: "BudgetPg",
    rq: "idata",
    year: selectedYear
  });
  global.dbKeyV! = dbKey;
  CDiary = CFDiary.map(diaryEntry.fromJs);
  cBalanceV = [cBalance];

  showOp = [[]];

  // Control -------------------------------------------------------------------

  // \ -> ()
  fixBalance = async \ -> {
    hc = math.toIso(hcBalance, 2);
    c = math.toIso(cBalanceV!, 2);
    ui.alert(i18n.fmt(II("fixBalance hc(%0) c(%1)"), [hc, c]));

    cBalanceV! = hcBalance;
    , dbKey : await client.send({
      prg: cts.appName,
      source: "BudgetPg",
      rq: "updateBalance",
      dbKey: global.dbKeyV!,
      year: selectedYear,
      value: cBalanceV!
    });
    global.dbKeyV! = dbKey;

    showOp!();
  };

  // View ----------------------------------------------------------------------

  // \ -> ()
  showOp! = \ -> {
    :problem prob = problem.firstProblem(HcDiary, CDiary);
    if (!math.eq(hcBalance, cBalanceV!, 0.0001)) {
      fixBalance();
    } else if (prob.ix != -1) {
      fixProblemPg.mk(wg, selectedYear, Plan, CDiary, prob, \ -> showOp!(););
    } else {
      managementPg.mk(
        wg, selectedYear, isUntil, selectedMonth,
        Plan, cBalanceV!, CDiary, Budget, PreviousBudget
      );
    }
  };

  showOp!();
};
