// Copyright 29-Aug-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Plan management page.

import "global";
import "cts";
import "data/plan";
import "data/planEntry";
import "data/budget";
import "data/budgetEntry";
import "data/diary";
import "data/diaryEntry";
import "i18n";

Q = ui.q;
II = i18n.tlt;

/// Constructor.
///   wg          : Widget.
///   selectedYear: Selected year.
/// \<domo>, s -> ()
mk = async \wg, selectedYear -> {
  :plan Plan, // [<planEntry>.]
  :budget Budget, // [<budgetEntry>.]
  :arr CDiary, // [<diaryEntry>.]
  dbKey
  : await client.send({
    prg: cts.appName,
    source: "PlanPg",
    rq: "idata",
    year: selectedYear
  });
  global.dbKeyV! = dbKey;
  :diary Diary = CDiary.map(diaryEntry.fromJs); // [<diaryEntry>.]

  oldEntryOp = []; // [<planEntry>.]|[]

  showOp = [[]];

  // Control -------------------------------------------------------------------

  // \ -> ()
  updateServerPlan = async \ -> {
    , dbKey : await client.send({
      prg: cts.appName,
      source: "PlanPg",
      rq: "updatePlan",
      dbKey: global.dbKeyV!,
      year: selectedYear,
      plan: Plan,
      budget: Budget
    });
    global.dbKeyV! = dbKey;
  };

  // \ -> ()
  updateServerPlanAndDiary = async \ -> {
    , dbKey : await client.send({
      prg: cts.appName,
      source: "PlanPg",
      rq: "updatePlanAndDiary",
      dbKey: global.dbKeyV!,
      year: selectedYear,
      plan: Plan,
      budget: Budget,
      diary: Diary
    });
    global.dbKeyV! = dbKey;
  };

  // \ -> ()
  reload = \ -> {
    arr.clear(oldEntryOp);
    showOp!();
  };

  // \<planEntry> -> ()
  acceptEntry = async \:planEntry entry -> {
    if (!oldEntryOp) {
      r = plan.add(Plan, entry);
      if (r != "") {
        ui.alert(r);
        return;
      }
      Budget.cleanAndComplete(Plan);

      await updateServerPlan();
      reload();
    } else {
      :planEntry e = oldEntryOp!;
      r = Plan.modify(e.id, entry, Diary);
      if (r != "") {
        ui.alert(r);
        return;
      }
      Budget.cleanAndComplete(Plan);
      Diary.changeAcc(e.id, entry.id);

      await updateServerPlanAndDiary();
      reload();
    }
  };

  // \s -> ()
  del = async \id -> {
    if (!ui.confirm(i18n.fmt(II("Delete %0?"), [id]))) return;

    r = Plan.del(id, diary.accs(Diary));
    if (r != "") {
      ui.alert(r);
      return;
    }
    Budget.cleanAndComplete(Plan);

    await updateServerPlan();
    reload();
  };

  // \<planEntry> -> ()
  modify = \entry -> {
    arr.clear(oldEntryOp);
    arr.push(oldEntryOp, entry);
    showOp!();
  };

  // View ----------------------------------------------------------------------

  // \ -> <domo>
  dataEntry = \ -> {
    :planEntry entry = !oldEntryOp ? planEntry.mk(false, "", "") : oldEntryOp!;

    opInc = Q("input")
      .att("type", "radio")
      .checked(entry.isIncome)
      .att("name", "inc")
    ;
    opExp = Q("input")
      .att("type", "radio")
      .checked(!entry.isIncome)
      .att("name", "inc")
    ;
    idWg = ui.field("desc")
      .att("id", "autofocus")
      .style("width:80px")
      .value(entry.id)
    ;
    descWg = ui.field("accept")
      .att("id", "desc")
      .style("width:200px")
      .value(entry.desc)
    ;

    // \ -> <planEntry>
    mkEntry = \ -> return planEntry.mk(
        opInc.isChecked(),
        str.trim(idWg.getValue())[:6],
        str.trim(descWg.getValue())
      );;

    // \s -> <domo>
    th = \tx -> return Q("td")
        .style(
            "background-color: #c9c9c9;text-align: center;" +
            "border: 1px solid rgb(110,130,150)"
          )
        .html(tx)
      ;;

    // \s -> <domo>
    tdInfo = \tx -> return Q("td")
        .style("color:#C9C9C9;text-align:center")
        .text(tx)
      ;;


    table = Q("table")
      .att("align", "center")
      .add(Q("tr")
        .add(th(II("Type")).att("colspan", "5"))
        .add(th(II("Id")))
        .add(th(II("Description"))))
      .add(Q("tr")
        .add(Q("td").add(opInc))
        .add(Q("td").text(II("Income")))
        .add(Q("td").style("width: 5px"))
        .add(Q("td").add(opExp))
        .add(Q("td").text(II("Expense")))

        .add(Q("td").add(idWg))
        .add(Q("td").add(descWg)))
    ;

    if (!!oldEntryOp) {
      :planEntry e = oldEntryOp!;
      table
        .add(Q("tr")
          .add(tdInfo(e.isIncome ? II("Income") : II("Expense"))
            .att("colspan", "5"))
          .add(tdInfo(e.id))
          .add(tdInfo(e.desc)))
      ;
    }

    table
      .add(Q("tr")
        .add(Q("td")
          .att("colspan", "7")
          .style("text-align: right")
          .add(Q("button")
            .text(II("Cancel"))
            .on("click", \e -> reload();))
          .add(Q("span").html("&nbsp;"))
          .add(Q("button")
            .att("id", "accept")
            .text(II("Accept"))
            .on("click", \e -> acceptEntry(mkEntry());))))
    ;

    return table;
  };

  // \ -> <domo>
  entryWg = \ -> return Q("div")
    .add(Q("div")
      .klass("head")
      .html(!!oldEntryOp
        ? II("Modification")
        : II("New Account")))
    .add(dataEntry())
  ;;

  // \ -> <domo>
  withoutAccountsTable = \ -> return Q("table")
    .klass("main")
    .add(Q("tr")
      .add(Q("td")
        .klass("frame")
        .style("text-align: center")
        .text(II("Without Accounts"))))
  ;;

  // \<planEntry> -> <domo>
  mkTr = \:planEntry entry -> return Q("tr")
    .add(Q("td")
      .add(ui.link(\e -> del(entry.id);)
        .add(ui.img("delete"))))
    .add(Q("td")
      .add(ui.link(\e -> modify(entry);)
        .add(ui.img("edit"))))
    .add(Q("td")
      .style("border: 1px solid rgb(110,130,150)")
      .text(entry.id))
    .add(Q("td")
      .style("border: 1px solid rgb(110,130,150)")
      .text(entry.desc))
  ;;

  // \b -> <domo>
  entriesTable = \isIncomes -> {
    div = Q("div")
      .add(Q("div")
        .klass("head")
        .html(isIncomes ? II("Incomes") : II("Expenses")))
    ;

    :arr Es = arr.filter(Plan, \:planEntry e -> return e.isIncome == isIncomes;);

    if (!Es) {
      div.add(withoutAccountsTable());
    } else {
      :arr Trs = []; // [<domo>.]
      for (e = Es) Trs.push(mkTr(e));
      div.add(Q("table")
        .att("align", "center")
        .adds(Trs));
    }

    return div;
  };

  showOp! = \ -> {
    arr.sort(
      Plan,
      \:planEntry e1, :planEntry e2 ->
        return str.toUpper(e1.id) < str.toUpper(e2.id);
    );

    wg
      .removeAll()
      .add(Q("div")
        .klass("head")
        .html(II("Accounting Plan")))
      .add(Q("table")
        .att("align", "center")
        .add(Q("tr")
          .add(Q("td")
            .att("colspan", "2")
            .klass("frame")
            .style("text-align: center")
            .add(entryWg())))
        .add(Q("tr")
          .add(Q("td")
            .klass("frame")
            .style("vertical-align: top; width:50%")
            .add(entriesTable(true)))
          .add(Q("td")
            .klass("frame")
            .style("vertical-align: top; width:50%")
            .add(entriesTable(false)))))
    ;
  };

  showOp!();
};
