// Copyright 25-Apr-2024 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Diary page.

import "libdm/datePicker";
import "wgs/accountSelector";
import "data/all";
import "data/acc";
import "cts";
import "data/diaryEntry";
import "msgPg";
import "fns";
import "i18n";

Q = ui.q;
II = i18n.tlt;

/// \<domo>, s, s -> ()
mk = \wg, account, ix -> {
  ac = acc.descriptionOf(account) == "" | str.len(account) > 3 ? "" : account;
  acV = [ac == "" | !dic.hasKey(acc.accounts(), ac) ? cts.cash[:3] : ac];
  dlenV = [arr.size(acc.diary())];
  ixn = math.isDigits(ix) ? math.toInt(math.fromStr(ix)!) : dlenV! - 1;
  ixFirstRowV = [ixn >= dlenV! ? dlenV! - 1 : ixn];

  ixEditedV = [-1];
  dateEditedV = [""];

  EntryRows = []; // [[<domo>.].]
  entryAccSelV = [ui.field("")];
  editDiv = Q("div");
  listDiv = Q("div");
  dpV = [datePicker.mk(i18n.getLang(), time.now(), \s -> {})];
  dateField = Q("input")
    .att("type", "text")
    .klass("frame")
    .style("width:80px;color:#000000;text-align:center;")
  ;
  number = Q("input")
    .att("type", "text").klass("frame")
    .style(
      "width:50px;background-color:#f0f0ff;color:#000000;" +
      "text-align:center;"
    )
    .disabled(true)
  ;
  description = ui.field("debit")
    .att("id", "description")
    .style("width:270px")
  ;

  entryV = [[]];
  listV = [[]];

  // Control -------------------------------------------------------------------

  // \<event> -> ()
  newClick = \e -> {
    ixEditedV! = -1;
    dateEditedV! = "";
    editDiv.removeAll().add(entryV!());
  };

  // \<event> -> ()
  upClick = \e -> {
    if (ixFirstRowV! > -1 & ixFirstRowV! < arr.size(acc.diary()) - 1) {
      ixFirstRowV! += 1;
      listDiv.removeAll().add(listV!());
    }
  };

  // \<event> -> ()
  downClick = \e -> {
    if (ixFirstRowV! > 0) {
      ixFirstRowV! -= 1;
      listDiv.removeAll().add(listV!());
    }
  };

  // \<event> -> ()
  dupClick = \e -> {
    if (ixFirstRowV! > -1) {
      ixFirstRowV! += math.toInt(cts.tableLen / 2);
      if (ixFirstRowV! >= arr.size(acc.diary())) {
        ixFirstRowV! = arr.size(acc.diary()) - 1;
      }
      listDiv.removeAll().add(listV!());
    }
  };

  // \<event> -> ()
  ddownClick = \e -> {
    if (ixFirstRowV! > -1) {
      ixFirstRowV! -= math.toInt(cts.tableLen / 2);
      if (ixFirstRowV! < 0) ixFirstRowV! = 0;
      listDiv.removeAll().add(listV!());
    }
  };

  // \<event> -> ()
  topClick = \e -> {
    if (ixFirstRowV! > -1) {
      ixFirstRowV! = arr.size(acc.diary()) - 1;
      listDiv.removeAll().add(listV!());
    }
  };

  // \<event> -> ()
  bottomClick = \e -> {
    if (ixFirstRowV! > -1) {
      ixFirstRowV! = cts.tableLen - 1;
      if (ixFirstRowV! >= arr.size(acc.diary()))
        ixFirstRowV! = arr.size(acc.diary()) - 1;
      listDiv.removeAll().add(listV!());
    }
  };

  // \i -> ()
  monthClick = \m -> {
    if (ixFirstRowV > -1) {
      Diary = acc.diary();
      len = arr.size(Diary);
      iV = [0];
      while (true) {
        :diaryEntry e = Diary[iV!];
        iV! += 1;
        if (time.month(e.date) >= m | iV! == len) break;
      }
      ixFirstRowV! = iV! - 1;
      listDiv.removeAll().add(listV!());
    }
  };

  // ---------------------------------

  // \n -> ()
  deleteClick = async \diaryIx -> {
    if (ui.confirm(i18n.fmt(
      II("Delete annotation %0:\n%1?"),
      ["" + (diaryIx + 1), acc.diary()[diaryIx].description]
    ))) {
      editDiv.removeAll();
      arr.remove(acc.diary(), diaryIx);
      dlen = arr.size(acc.diary());
      ixFirstRowV! = ixFirstRowV! >= dlen ? dlen - 1 : ixFirstRowV!;
      ok = await all.send();
      if (!ok) {
        msgPg.mk(wg, II("Data base out of date."), true);
        return;
      }
      listDiv.removeAll().add(listV!());
    }
  };

  // \n -> ()
  modifyClick = \diaryIx -> {
    ixEditedV! = diaryIx;
    dateEditedV! = time.toStr(acc.diary()[diaryIx][diaryEntry.date]);
    editDiv.removeAll().add(entryV!());
  };

  // \<event> -> ()
  cancelEntry = \ev -> editDiv.removeAll();;

  // \<event> -> ()
  acceptEntry = async \ev -> {
    dateOp = datePicker.getDate(dpV!);
    if (!dateOp) {
      ui.alert(II("Date is missing"));
      return;
    }
    date = dateOp!;

    desc = str.trim(description.getValue());
    if (desc == "") {
      ui.alert(II("Description is missing"));
      return;
    }

    Debits = {}; // {f.} :: {acc -> value}
    Credits = {}; // {f.} :: {acc -> value}
    dsumV = [0];
    csumV = [0];
    for (E = EntryRows) {
      ac = str.replace(E[0].getText(), ".", "");
      if (dic.hasKey(Debits, ac) | dic.hasKey(Credits, ac)) {
        ui.alert(i18n.fmt(II("Account %0 is repeated"), [acc.accFormat(ac)]));
        return;
      }

      dAmOp = fns.float(E[1].getValue());
      if (!dAmOp) {
        ui.alert(i18n.fmt(II("'%0' is not a number"), [E[1].getValue()]));
        return;
      }
      dAm = dAmOp!;
      if (dAm != 0) {
        if (ac == "") {
          ui.alert(i18n.fmt(
            II("Account for ammount %0 is missing"), ["" + dAm]
          ));
          return;
        }
        dic.put(Debits, ac, dAm);
        dsumV! += dAm;
      }

      ac2 = str.replace(E[3].getText(), ".", "");
      if (dic.hasKey(Debits, ac2) | dic.hasKey(Credits, ac2)) {
        ui.alert(i18n.fmt(II("Account %0 is repeated"), [acc.accFormat(ac2)]));
        return;
      }

      cAmOp = fns.float(E[2].getValue());
      if (!cAmOp) {
        ui.alert(i18n.fmt(II("'%0' is not a number"), [E[2].getValue()]));
        return;
      }
      cAm = cAmOp!;
      if (cAm != 0) {
        if (ac2 == "") {
          ui.alert(i18n.fmt(
            II("Account for ammount %0 is missing"), ["" + cAm]
          ));
          return;
        }
        dic.put(Credits, ac2, cAm);
        csumV! += cAm;
      }
    }

    if (!math.eq(dsumV!, csumV!, 0.00001)) {
      ui.alert(II("Debits sum is different from Credits sum"));
      return;
    }

    if (dsumV! == 0) {
      ui.alert(II("Sums of Debits and Credits are zero"));
      return;
    }

    Dentry = diaryEntry.mk(date, desc, Debits, Credits);

    ixV = [ixEditedV!];
    if (ixEditedV! == -1) {
      ixV! = acc.addDiary(Dentry) + 4;
    } else if (dateEditedV! != time.toStr(date)) {
      arr.remove(acc.diary(), ixEditedV!);
      ixV! = acc.addDiary(Dentry) + 4;
    } else {
      acc.diary()[ixEditedV!] = Dentry;
    }
    dlenV! = arr.size(acc.diary());
    ixFirstRowV! = ixV! >= dlenV! ? dlenV! - 1 : ixV!;

    ok = await all.send();
    if (!ok) {
      msgPg.mk(wg, II("Data base out of date."), true);
      return;
    }
    editDiv.removeAll();
    listDiv.removeAll().add(listV!());
  };

  // View ----------------------------------------------------------------------

  // \ -> <domo>
  entryV! = \ -> {
    // \ -> <domo>
    mkWgV = [[]];

    // \ -> <domo>
    mkAccEntry = \ -> {
      i = Q("div")
        .klass("frame")
        .style(
          "width:48px;color:#000000;background-color:#ffffff;" +
          "text-align:center;vertical-align:middle;"
        )
      ;
      i.on("dblclick", \e -> i.html(""););
      return i;
    };

    // \<domo> -> <domo>
    mkAmmountEntry = \ac -> {
      amm = ui.field("accept")
        .style("width:65px")
        .on("focus", \e -> entryAccSelV! = ac;)
      ;
      ui.changePoint(amm);
      return amm;
    };

    // \<event> -> ()
    addEntryRow = \ev -> {
      d = mkAccEntry();
      c = mkAccEntry();
      arr.push(EntryRows, [d, mkAmmountEntry(d), mkAmmountEntry(c), c]);
      editDiv.removeAll().add(mkWgV!());
    };

    // \<event> -> ()
    removeEntryRow = \ev -> {
      if (arr.size(EntryRows) > 1) {
        arr.pop(EntryRows);
        editDiv.removeAll().add(mkWgV!());
      }
    };

    // \<event> -> ()
    autoSum = \ev -> {
      dsumV = [0];
      csumV = [0];
      for (E = EntryRows) {
        for (i = 1:3) {
          vOp = fns.float(E[i].getValue());
          if (!vOp) {
            ui.alert(i18n.fmt(II("'%0' is not a number"), [E[i].getValue()]));
            return;
          } else {
            if (i == 1) dsumV! += vOp!;
            else csumV! += vOp!;
          }
        }
      }
      if (csumV! == dsumV!) {
        ui.alert(II("Difference is 0"));
        return;
      }
      iV = [1];
      vV = [csumV! - dsumV!];
      if (vV! < 0) {
        iV! += 1;
        vV! = -vV!;
      }
      am = math.toIso(vV!, 2);

      for (E = EntryRows) {
        if (str.trim(E[iV!].getValue()) == "") {
          E[iV!].value(am);
          return;
        }
      }
      addEntryRow(ev);
      arr.peek(EntryRows)[iV!].value(am);
    };

    Diary = acc.diary();

    dateV = [time.now()];
    if (ixEditedV! == -1) {
      number.value("");
      if (arr.size(Diary) > 0) dateV! = arr.peek(Diary)[diaryEntry.date];
      description.value("");
      d = mkAccEntry();
      c = mkAccEntry();
      arr.clear(EntryRows);
      arr.push(EntryRows, [d, mkAmmountEntry(d), mkAmmountEntry(c), c]);
    } else {
      :diaryEntry dentry = Diary[ixEditedV!];
      number.value("" + (ixEditedV! + 1));
      dateV! = dentry.date;
      description.value(dentry.description);
      Ds = dentry.debits;
      Cs = dentry.credits;
      Dkeys = dic.keys(Ds);
      Ckeys = dic.keys(Cs);
      dlen = arr.size(Dkeys);
      clen = arr.size(Ckeys);
      mxlen = dlen > clen ? dlen : clen;
      arr.clear(EntryRows);
      for (i = 0:mxlen) {
        d = mkAccEntry().text(i >= dlen ? "" : acc.accFormat(Dkeys[i]));
        c = mkAccEntry().text(i >= clen ? "" : acc.accFormat(Ckeys[i]));
        arr.push(
          EntryRows,
          [
            d,
            mkAmmountEntry(d).value(i >= dlen ? "" : math.toIso(Ds[Dkeys[i]], 2)),
            mkAmmountEntry(c).value(i >= clen ? "" : math.toIso(Cs[Ckeys[i]], 2)),
            c
          ]
        );
      }
    }
    dpV! = datePicker.mk(i18n.getLang(), dateV!, \s -> {});

    mkWgV! = \ -> {
      return Q("table")
        .att("align", "center")
        .klass("frame")
        .add(Q("tr")
          .add(Q("td")
            .att("colspan", 2)
            .style("text-align:left")
            .add(datePicker.mkText(dpV!, dateField)))
          .add(Q("td")
            .att("colspan", 3)
            .add(ui.link(autoSum)
              .klass("diary")
              .html("&nbsp;&nbsp;S&nbsp;&nbsp;"))
            .add(Q("span")
              .html(" Â· "))
            .add(ui.link(addEntryRow)
              .klass("diary")
              .html("+"))
            .add(Q("span")
              .html(" "))
            .add(ui.link(removeEntryRow)
              .klass("diary")
              .html("-")))
          .add(Q("td")
            .att("colspan", 2)
            .style("text-align:right;")
            .add(number)))
        .add(Q("tr")
          .add(Q("td").att("colspan", 7).add(description)))
        .adds(arr.map(EntryRows, \E -> return Q("tr")
            .add(Q("td")
              .style("text-align:left;width:5px")
              .add(E[0]))
            .add(Q("td")
              .att("colspan", 2)
              .style("text-align:left")
              .add(E[1]))
            .add(Q("td")
              .html("||"))
            .add(Q("td")
              .att("colspan", 2)
              .style("text-align:right")
              .add(E[2]))
            .add(Q("td")
              .style("text-align:right")
              .add(E[3]))
          ;))
          .add(Q("tr")
            .add(Q("td")
              .att("colspan", 7)
              .style("text-align:right")
              .add(Q("button")
                .text(II("Cancel"))
                .style("width:100px")
                .on("click", cancelEntry))
              .add(Q("span")
                .html("&nbsp;&nbsp;"))
              .add(Q("button")
                .text(II("Accept"))
                .style("width:100px")
                .att("id", "accept")
                .on("click", acceptEntry))))
      ;
    };

    return mkWgV!();
  };

  // \ -> <domo>
  listV! = \ -> {
    // \ -> <domo>
    td = \ -> return Q("td").klass("frame").style("vertical-align:top;");;
    // \ -> <domo>
    tdr = \ -> return td().setStyle("text-align", "right");;
    // \ -> <domo>
    tdl = \ -> return td().setStyle("text-align", "left");;
    cutV = [ixFirstRowV! + 1];
    return Q("table")
      .att("align", "center")
      .adds(arr.map(
          arr.reverse(
            arr.drop(arr.take(acc.diary(), cutV!), cutV! - cts.tableLen)
          ),
          \:diaryEntry e -> {
            cutV! -= 1;
            lix = cutV!;
            Dkeys = arr.map(dic.toArr(e.debits), \Kv -> return Kv[0];);
            Ckeys = arr.map(dic.toArr(e.credits), \Kv -> return Kv[0];);
            dlen = arr.size(Dkeys);
            clen = arr.size(Ckeys);
            n = dlen > clen ? dlen : clen;

            descDentry = Q("table")
              .att("align", "center")
              .adds(iter.map([0:n], \i -> return Q("tr")
                  .add(td().add(i < dlen
                    ? Q("a")
                      .att("href", "?accs&" + Dkeys[i] + "&" + lix)
                      .att("title", acc.subaccounts()[Dkeys[i]])
                      .html(acc.accFormat(Dkeys[i]))
                    : Q("span")))
                  .add(tdr().add(i < dlen
                    ? Q("span").html(math.toIso(e.debits[Dkeys[i]], 2))
                    : Q("span")))
                  .add(Q("td").html("||"))
                  .add(tdr().add(i < clen
                    ? Q("span").html(math.toIso(e.credits[Ckeys[i]], 2))
                    : Q("span")))
                  .add(td().add(i < clen
                    ? Q("a")
                      .att("href", "?accs&" + Ckeys[i] + "&" + lix)
                      .att("title", acc.subaccounts()[Ckeys[i]])
                      .html(acc.accFormat(Ckeys[i]))
                    : Q("span")))
                ;))
            ;
            descDentry.e.style.display = "none";
            desc = Q("div")
              .add(ui.link(\e ->
                  descDentry.e.style.display =
                    descDentry.e.style.display == "none" ? "block" : "none";
                ).klass("link").html(e.description))
              .add(descDentry);
            return Q("tr")
              .add(Q("td").add(
                lix == 0
                  ? Q("span").add(ui.lightImg("delete"))
                  : ui.link(\ev -> deleteClick(lix);)
                    .add(ui.img("delete"))))
              .add(tdr().html("" + (lix + 1)))
              .add(td().add(
                all.isLastYear()
                  ? ui.link(\e -> modifyClick(lix);)
                    .klass("link")
                    .html(time.format(e.date, "%D/%M"))
                  : Q("span")
                    .style("color:#800000;")
                    .html(time.format(e.date, "%D/%M"))))
              .add(tdl().add(desc))
              .add(tdr().html(math.toIso(
                  arr.reduce(
                    dic.toArr(e.debits), 0, \s,
                    Kv -> return s + Kv[1];
                  ), 2
                )))
            ;

          }
        ))
    ;
  };

  // \s, s -> ()
  helpAccountClick = \account, desc -> {
    acV! = account[:3];
    entryAccSelV!
      .att("title", desc)
      .text(acc.accFormat(account))
    ;
  };

  // \ -> <domo>
  left = \ -> return accountSelector.mk(acV!, helpAccountClick, false).wg;;

  // \ -> <domo>
  right = \ -> {
    r = Q("td")
      .style("text-align:center;vertical-align:top;")
      .add(Q("div")
        .klass("head")
        .text(II("Diary")))
      .add(editDiv)
      .add(Q("hr"))
      .add(Q("table")
        .att("align", "center")
        .add(Q("tr")
          .add(Q("td").att("colspan", 2))
          .add(Q("td").att("colspan", 2).klass("diary").add(
            all.isLastYear()
              ? ui.link(newClick).html(II("New"))
              : Q("span").style("color: #800000;").html(II("New"))))
          .add(Q("td").klass("diary").add(ui.link(upClick)
            .setStyle("font-family", "monospace").html("&nbsp;\u2191&nbsp;")))
          .add(Q("td").klass("diary").add(ui.link(downClick)
            .setStyle("font-family", "monospace").html("&nbsp;\u2193&nbsp;")))
          .add(Q("td").klass("diary").add(ui.link(dupClick)
            .setStyle("font-family", "monospace").html("\u2191\u2191")))
          .add(Q("td").klass("diary").add(ui.link(ddownClick)
            .setStyle("font-family", "monospace").html("\u2193\u2193")))
          .add(Q("td").klass("diary").add(ui.link(topClick)
            .setStyle("font-family", "monospace").html("&nbsp;\u2912&nbsp;")))
          .add(Q("td").klass("diary").add(ui.link(bottomClick)
            .setStyle("font-family", "monospace").html("&nbsp;\u2913&nbsp;")))
          .add(Q("td").att("colspan", 2)))
        .add(Q("tr")
          .adds(iter.map([1:13], \i -> return Q("td")
              .klass("diary")
              .add(ui.link(\e -> monthClick(i);)
                .html("&nbsp;" + i + "&nbsp;"))
            ;))))
      .add(Q("hr"))
      .add(listDiv)
    ;

    listDiv.add(listV!());
    return r;
  };

  wg
    .removeAll()
    .add(Q("table")
      .klass("main")
      .add(Q("tr")
        .add(all.isLastYear() ? left() : Q("div"))
        .add(right())))
  ;
};
