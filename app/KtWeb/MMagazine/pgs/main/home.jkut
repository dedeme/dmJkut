// Copyright 26-May-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Home page.

import "libdm/log";
import "data/cts";
import "data/paramsEval";
import "i18n";

Q = ui.q;
II = i18n.tlt;

/// Constructor.
/// \<domo> -> ()
mk = async \wg -> {
  Rp = await client.send({
    prg: cts.appName,
    module: "Main",
    source: "Home",
    rq: "idata"
  });

  iparsEval = paramsEval.fromJs(Rp.iparamsEval);
  model = Rp.model;
  parsEval = paramsEval.fromJs(Rp.paramsEval);

  logDiv = Q("div");

  // \(\[<logRow>...]->()) -> ()
  load = async \fn -> {
    Rp = await client.send({
      prg: cts.appName,
      module: "Main",
      source: "Home",
      rq: "getLog"
    });
    fn(arr.map(Rp.log, log.logRowFromJs));
  };

  // \(\->()) -> ()
  reset = async \fn -> {
    await client.send({
      prg: cts.appName,
      module: "Main",
      source: "Home",
      rq: "resetLog"
    });
    fn();
  };

  // \s -> s
  tlt = \tx -> return switch (tx) {
    "All log entries will be deleted.\nContinue?":
      II("All log entries will be deleted.\nContinue?");
    "2 Days": II("2 Days");
    "All": II("All");
    "Reload": II("Reload");
    "Delete": II("Delete");
    "Errors": II("Errors");
    "Log": II("Log");
    default: tx;
  };;

  log.mk(logDiv, load, reset, tlt, true, 100, 25);

  wg
    .removeAll()
    .adds(arr.map([0, 1], \i -> return Q("div").klass("separator");))
    .add(Q("table")
      .klass("frame")
      .att("align", "center")
      .add(Q("tr")
        .add(Q("td")
          .add(Q("span")
            .html(
              "El mejor resultado del modelo usado por el inversor es:<br>" +
              "<pre>" +
              "Inv (" +  sys.toStr(iparsEval.Params) + ": " +
              math.toIso(iparsEval.ev, 0) + ") | Mejor (" +
              model + sys.toStr(parsEval.Params) + ": " +
              math.toIso(parsEval.ev, 0) + ")" +
              "</pre>"
            )))))
    .add(logDiv)
  ;
};
