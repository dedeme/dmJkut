// Copyright 04-Apr-2024 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Overview

import "libdm/lineChart";
import "libdm/modalBox";
import "data/order";
import "data/stRs";
import "i18n";

Q = ui.q;
II = i18n.tlt;

/// Constructor.
///   wg: Container.
///   Dates: Simulation dates.
///   Cos: Company nicks.
///   Closes: Closes (dates x cos)
///   rs: Simulation result.
/// \<domo>, [s.], [s.], [[f.].], <stRs> -> ()
mk = \wg, :arr Dates, :arr Cos, :arr Closes, :stRs rs -> {

  nlossesV = [0];
  ratiosSumV = [0];


  modalDiv = Q("div");
  mBox = modalBox.mk(modalDiv, true);
  clientResultsDiv = Q("div");
  GrDivs = []; // [[<domo>.]]

  nrows = math.toInt((Cos.size() - 1) / 3) + 1;
  for (i = 0:nrows) {
    Row = []; // [[<domo>...]
    for (j = 0:3) {
      dv = Q("div");
      ico = i * 3 + j;
      if (ico < Cos.size()) {
        wait(dv, Cos[ico]);
      }
      arr.push(Row, dv);
    }
    arr.push(GrDivs, Row);
  }

  // \s, <data> -> ()
  showBigChart = \co, Data -> {
    :: Ch = lineChart.mkExample();
    Ch.exArea.width = 800;
    Ch.exArea.height = 400;
    Ch.exArea.atts.background = "#ffffff";
    Ch.inAtts.background = "#e9e9e9";
    Ch.labels.onPopup = true;

    modalDiv
      .removeAll()
      .add(Q("div")
        .klass("head")
        .text(co))
      .add(lineChart.mkWg(Ch, Data))
      .add(Q("button")
        .text(II("Close"))
        .on("click", \e -> mBox.show(false);))
    ;
    mBox.show(true);
  };

  // \ -> ()
  mkCharts = \ -> {
    // \n -> ()
    mkChart = \ico -> {
      co = Cos[ico];
      div = GrDivs[math.toInt(ico / 3)][ico % 3];

      Refs = arr.dropWhile(
        arr.map(rs.Refs, \Row -> return Row[ico];),
        \r -> return r < 0;
      );
      skip = arr.size(Closes) - Refs.size();
      Dts = arr.drop(Dates, skip);
      Qs = arr.map(arr.drop(Closes, skip), \Row -> return Row[ico];);
      Labels = arr.map(Dts, \d -> return d[4:6];);
      profits = rs.Profits[ico];
      sales = arr.size(rs.Sales[ico]);

      RefsUp = arr.fromIter(iter.map(
        [0:Qs.size()],
        \i -> {
          q = Qs[i];
          r = Refs[i];
          return r > q ? [r] : [];
        }
      ));
      RefsDown = arr.fromIter(iter.map(
        [0:Qs.size()],
        \i -> {
          q = Qs[i];
          r = Refs[i];
          return r < q ? [r] : [];
        }
      ));
      if (profits < 0) nlossesV! += 1;
      ratiosSumV! += profits;

      :: Ch = lineChart.mkExample();
      Ch.exArea.width = 300;
      Ch.exArea.height = 150;
      Ch.exArea.atts.background = "#ffffff";
      Ch.inAtts.background = "#e9e9e9";

      :: Data = lineChart.mkData(
        Labels,
        [ RefsUp,
          RefsDown,
          arr.map(Qs, \q -> return [q];)],
        [ lineChart.mkLine(1, "#4060a0", false),
          lineChart.mkLine(1, "#a06040", false),
          lineChart.mkLine(1, "#000000", false)
        ]
      );

      Data.maxMinRound = \mx, mn -> return mx > 10 ? 0 : -1;;
      PrevLabel = [Labels[0]];
      Data.drawLabel = \l, i -> {
        if (i == 0) return false;
        if (l != PrevLabel! & (l == "01" | l == "05" | l == "09")) {
          PrevLabel! = l;
          return true;
        }
        return false;
      };
      Data.drawGrid = \l, i -> return false;;

      div
        .removeAll()
        .add(Q("table")
          .add(Q("tr")
            .add(Q("td")
              .style("text-align:left")
              .text(co))
            .add(Q("td")
              .style("text-align:right")
              .add(Q("span")
                .text(
                    math.toIso(profits * 100, 2) + "% [" +
                    math.toIso(sales, 0) + "] "
                  ))
              .add(ui.img(profits < 0 ? "losses" : "profits")
                .style("vertical-align:middle"))))
          .add(Q("tr")
            .add(Q("td")
              .att("colspan", 2)
              .add(lineChart.mkWg(Ch, Data)
                .on("click", \e -> showBigChart(co, Data);)))))
      ;
    };

    for (i = 0:arr.size(Cos)) mkChart(i);

    clientResultsDiv
      .removeAll()
      .add(Q("table")
        .att("align", "center")
        .add(Q("tr")
          .add(Q("td")
            .klass("rframe")
            .add(Q("span")
              .text("" + (Cos.size() - nlossesV!) + " "))
            .add(ui.img("profits")
              .style("vertical-align: middle")))
          .add(Q("td")
            .klass("rframe")
            .add(Q("span")
              .text("" + nlossesV!))
            .add(ui.img("losses")
              .style("vertical-align: middle")))
          .add(Q("td")
            .klass("rframe")
            .text(math.toIso(ratiosSumV! * 100 / Cos.size(), 2) + "%"))))
     ;
  };

  wg
    .removeAll()
    .add(clientResultsDiv)
    .add(Q("div").klass("separator2"))
    .add(Q("table")
      .att("align", "center")
      .klass("frame")
      .adds(arr.map(GrDivs, \R -> return Q("tr")
          .adds(arr.map(R, \dv -> return Q("td").add(dv);))
        ;)))
    .add(mBox.mkWg())
  ;

  mkCharts();
};

// \<domo>, s -> ()
wait = \div, co -> div
    .removeAll()
    .add(Q("table")
      .att("align", "center")
      .add(Q("tr")
        .add(Q("td")
          .style("text-align:center")
          .text(co)))
      .add(Q("tr")
        .add(Q("td")
          .style("text-align:center")
          .add(ui.img("wait.gif")))))
  ;;
