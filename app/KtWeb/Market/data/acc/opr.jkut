// Copyright 13-Apr-2024 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Accounting operatiom data.

/// Sell operation type
seT = "se";
/// Buy operation type
buT = "bu";
/// Stock operation type
stT = "st";
/// Income operation type
inT = "in";
/// Withdrawal operation type
wiT = "wi";
/// Profits operation type
prT = "pr";
/// Fees operation type
feT = "fe";
/// Positive differences operation type
pdT = "pd";
/// Negative differences operation type
ndT = "nd";

// Constructor. Use 'mkXX' contructors.
//   tp: Operation type.
//   i : Integer value.
//   f : Float value.
//   s : String value.
// \n,n,n,s -> <opr>
mk0 : tp, i, f, s;

/// Makes a sell operation
/// \s, n, n -> <opr>
mkSe = \nick, stocks, price -> return mk0(seT, stocks, price, nick);;

/// Makes a buy operation
/// \s, n, n -> <opr>
mkBu = \nick, stocks, price -> return mk0(buT, stocks, price, nick);;

/// Makes a stock operation
/// \s, n, n -> <opr>
mkSt = \nick, stocks, price -> return mk0(stT, stocks, price, nick);;

/// Makes an income operation
/// \n -> <opr>
mkIn = \amount -> return mk0(inT, 0, amount, "");;

/// Makes a withdrawal operation
/// \n -> <opr>
mkWi = \amount -> return mk0(wiT, 0, amount, "");;

/// Makes a profits operation
/// \n, s -> <opr>
mkPr = \amount, cause -> return mk0(prT, 0, amount, cause);;

/// Makes a fees operation
/// \f, s -> <opr>
mkFe = \amount, cause -> return mk0(feT, 0, amount, cause);;

/// Makes a 'positive differences' operation
/// \n, s -> <opr>
mkPd = \amount, cause -> return mk0(pdT, 0, amount, cause);;

/// \n, s -> <opr>
mkNd = \amount, cause -> return mk0(ndT, 0, amount, cause);;

/// Returns operation type. Can be seT, buT, stT, inT, wiT, prT, feT, pdT or ndT.
/// \<opr> -> s
type = \op -> return op[tp];;

/// Returns nick if type of 'op' is se, bu or st.
/// \<opr> -> s
nick = \op -> return op[s];;

/// Returns stocks if type of 'op' is se, bu or st.
/// \<opr> -> n
stocks = \op -> return op[i];;

/// Returns price if type of 'op' is se, bu or st.
/// \<opr> -> s
price = \op -> return op[f];;

/// Returns amount if type of 'op' is in, wi, pr, fe, pd or md.
/// \<opr> -> n
amount = \op -> return op[f];;

/// Returns cause if type of 'op' is pr, fe, pd or md.
/// \<opr> -> s
cause = \op -> return op[s];;

/// \<opr> -> JS
toJs = \op -> switch(op[tp]) {
    seT, buT, stT: return [op[tp], op[s], op[i], op[f]];
    prT, feT, pdT, ndT: return [op[tp], op[f], op[s]];
    inT, wiT: return [op[tp], op[f]];
    default: throw "Unknown operation of type " + op[tp];
  };

/// \JS -> <opr>
fromJs = \A -> {
  tp = A[0];
  switch(tp) {
    seT, buT, stT: return mk0(tp, A[2], A[3], A[1]);
    prT, feT, pdT, ndT: return mk0(tp, 0, A[1], A[2]);
    inT, wiT: return mk0(tp, 0, A[1], "");
    default: throw "Unknown operation of type " + tp;
  }
};
