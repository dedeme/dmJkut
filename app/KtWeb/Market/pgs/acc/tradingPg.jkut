// Copyright 15-Apr-2024 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Trading page.

import "libdm/menu";
import "libdm/modalBox";
import "cts";
import "data/broker";
import "data/invOperation";
import "wgs/msg";
import "global";
import "i18n";

Q = ui.q;
II = i18n.tlt;

// \n -> <domo>
invTd = \inv ->
  return Q("td")
    .klass("borderWhite")
    .text("" + inv)
  ;;

// \d -> <domo>
ciaTd = \nick ->
  return Q("td")
    .klass("borderWhite")
    .style("text-align:left")
    .text(nick)
  ;;

// \n -> <domo>
stocksTd = \stocks ->
  return Q("td")
    .klass("borderWhite")
    .style("text-align:right")
    .text(math.toIso(stocks, 0))
  ;;

// \n -> <domo>
quoteTd = \q ->
  return Q("td")
    .klass("borderWhite")
    .style("text-align:right")
    .text(math.toIso(q, 4))
  ;;

// \n -> <domo>
moneyTd = \q ->
  return Q("td")
    .klass("borderWhite")
    .style("text-align:right")
    .text(math.toIso(q, 2))
  ;;

// Main ------------------------------------------------------------------------

/// Constructor
/// \<domo> -> ()
mk = async \wg -> {
  dbKey, ok,
  :arr InvOperations, // [<invOperation>.]
  :dic Portfolio, // {[n, n].} :: {nick -> [stocks, price].}
  :dic Closes, // {f.} :: {nick -> close}
  :dic Rebuys, // {s.} :: {nick -> date}
  :dic IbexCos // {n.} :: {nick -> ibexInvestmentAmount}
  : await client.send({
    prg: cts.appName,
    module: "Acc",
    source: "TradingPg",
    rq: "idata"
  });
  global.dbKeyV! = dbKey;
  :arr IbexNicks = IbexCos.keys();
  IbexNicks.sort(\nick1, nick2 -> return nick1 < nick2;);
  IbexNicks.unshift("+");

  if (!ok) {
    msg.error(cts.failMsg, \->{});
    return;
  }

  msgWait = Q("div");

  ::bibex = ui.select("bibex", IbexNicks);
  biinv = Q("div").klass("frame").style("text-align:right").text("0");
  bentry = ui.field("pentry")
    .style("width:80px")
    .value(math.toIso(cts.bet, 0));
  ui.changePoint(bentry);
  pentry = ui.field("calcBuyBt")
    .style("width:80px")
    .att("id", "pentry");
  ui.changePoint(pentry);
  btotal = Q("div").klass("frame").style("text-align:right");
  bportfolio = Q("div").klass("frame").style("text-align:right");
  bbuy = Q("div").klass("frame").style("text-align:right");

  sibex = ui.select("sibex", IbexNicks);
  siinv = Q("div").klass("frame").style("text-align:right").text("0");
  sentry = ui.field("calcSellBt")
    .style("width:80px")
    .att("id", "sentry");
  ui.changePoint(sentry);
  sportfolio = Q("div").klass("frame").style("text-align:right");
  ssibex = Q("div").klass("frame").style("text-align:right");
  ssell = Q("div").klass("frame").style("text-align:right");

  // Control -------------------------------------------------------------------

  // \ -> ()
  update = async \ -> {
    :modalBox box = modalBox.mk(
      Q("div")
        .add(Q("div")
          .style("text-align:center")
          .add(ui.img("wait2.gif").klass("frame"))),
      false
    );
    msgWait.add(box.mkWg());
    modalBox.show(box, true);
    , dbKey : await client.send({
      prg: cts.appName,
      module: "Acc",
      source: "TradingPg",
      rq: "update",
      dbKey: global.dbKeyV!
    });
    global.dbKeyV! = dbKey;

    modalBox.show(box, false);
    mk(wg);
  };

  // \ -> ()
  changeBCo = \ -> {
    comp = bibex.getValue();
    if (comp == "") biinv.text("0");
    else {
      vOp = IbexCos.get(comp);
      biinv.text(math.toIso(!vOp ? 0 : vOp!, 0));
    }
    pentry.value(0);
    btotal.text("");
    bportfolio.text("");
    bbuy.text("");
  };

  // \ -> ()
  changeSCo = \ -> {
    comp = sibex.getValue();
    if (comp == "") siinv.text("0");
    else {
      vOp = IbexCos.get(comp);
      siinv.text(math.toIso(!vOp ? 0 : vOp!, 0));
    }
    sentry.value(0);
    sportfolio.text("");
    ssibex.text("");
    ssell.text("");
  };

  // \-> ()
  calculateBuy = \ -> {
    comp = bibex.getValue();
    ixOp = comp == ""
      ? []
      : IbexCos.get(comp)
    ;
    ix = !ixOp ? 0 : ixOp!;

    bs = bentry.getValue();
    bOp = math.fromIso(bs);
    if (!bOp) {
      ui.alert(i18n.fmt(II("'%0' is not a valid number."), [bs]));
      return;
    }
    b = bOp!;

    ps = pentry.getValue();
    pOp = math.fromIso(ps);
    if (!pOp) {
      ui.alert(i18n.fmt(II("'%0' is not a valid number."), [ps]));
      return;
    }
    p = pOp!;
    if (p <= 0) {
      ui.alert(II("Price is <Eq 0"));
      return;
    }

    pfOp = Portfolio.get(comp);
    pf = !pfOp ? 0 : pfOp![0];

    amount = ix + b - pf * p;
    am = amount - broker.buyFees(amount);

    rs = math.toInt(am / p);

    btotal.text(math.toIso(rs + pf, 0));
    bportfolio.text(math.toIso(pf, 0));
    bbuy.text(math.toIso(rs, 0));
  };

  // \ -> ()
  calculateSell = \ -> {
    comp = sibex.getValue();
    ixOp = comp == ""
      ? []
      : IbexCos.get(comp)
    ;
    ix = !ixOp ? 0 : ixOp!;

    pfOp = Portfolio.get(comp);
    pf = !pfOp ? 0 : pfOp![0];

    ps = sentry.getValue();
    pOp = math.fromIso(ps);
    if (!pOp) {
      ui.alert(i18n.fmt(II("'%0' is not a valid number."), [ps]));
      return;
    }
    p = pOp!;
    if (p <= 0) {
      ui.alert(II("Price is <Eq 0"));
      return;
    }

    ixSt = math.toInt(ix / pOp!);

    rs0 = pf - ixSt;
    rs = rs0 < 0 ? 0 : rs0;

    sportfolio.text(math.toIso(pf, 0));
    ssibex.text(math.toIso(ixSt, 0));
    ssell.text(math.toIso(rs, 0));
  };

  // View ----------------------------------------------------------------------

  bibex.on("change", \ev -> changeBCo(););
  sibex.on("change", \ev -> changeSCo(););

  // \-> <domo>
  buyWg = \ ->
    return Q("table")
      .klass("frame4")
      .add(Q("tr")
        .add(Q("td")
          .att("colspan", "2")
          .add(Q("div")
            .klass("head")
            .text(II("Buy")))))
      .add(Q("tr")
        .add(Q("td")
          .att("colspan", "2")
          .add(Q("hr"))))
      .add(Q("tr")
        .add(Q("td")
          .style("text-align:right")
          .add(Q("div")
            .html("<b>" + II("Company") + ":</b>")))
        .add(Q("td")
          .add(bibex)))
      .add(Q("tr")
        .add(Q("td")
          .att("colspan", "2")
          .add(Q("hr"))))
      .add(Q("tr")
        .add(Q("td")
          .style("text-align:right")
          .add(Q("div")
            .html("<b>" + "Ibex" + ":</b>")))
        .add(Q("td")
          .add(biinv)))
      .add(Q("tr")
        .add(Q("td")
          .style("text-align:right")
          .add(Q("div")
            .html("<b>" + II("Invest") + ":</b>")))
        .add(Q("td")
          .add(bentry)))
      .add(Q("tr")
        .add(Q("td")
          .style("text-align:right")
          .add(Q("div")
            .html("<b>" + II("Price") + ":</b>")))
        .add(Q("td")
          .add(pentry)))
      .add(Q("tr")
        .add(Q("td")
          .att("colspan", "2")
          .style("text-align:center")
          .add(Q("button")
            .att("id", "calcBuyBt")
            .text(II("Calculate"))
            .on("click", \e -> calculateBuy();))))
      .add(Q("tr")
        .add(Q("td")
          .att("colspan", "2")
          .add(Q("hr"))))
      .add(Q("tr")
        .add(Q("td")
          .att("colspan", "2")
          .add(Q("div")
            .klass("head")
            .text(II("Stocks")))))
      .add(Q("tr")
        .add(Q("td")
          .style("text-align:right")
          .add(Q("div")
            .html("<b>" + II("Total") + ":</b>")))
        .add(Q("td")
          .add(btotal)))
      .add(Q("tr")
        .add(Q("td")
          .style("text-align:right")
          .add(Q("div")
            .html("<b>" + II("Portfolio") + ":</b>")))
        .add(Q("td")
          .add(bportfolio)))
      .add(Q("tr")
        .add(Q("td"))
        .add(Q("td")
          .add(Q("hr"))))
      .add(Q("tr")
        .add(Q("td")
          .style("text-align:right")
          .add(Q("div")
            .html("<b>" + II("Buy") + ":</b>")))
        .add(Q("td")
          .add(bbuy)))
  ;;

  // \ -> <domo>
  sellWg = \ ->
    return Q("table")
      .klass("frame3")
      .add(Q("tr")
        .add(Q("td")
          .att("colspan", "2")
          .add(Q("div")
            .klass("head")
            .text(II("Sell")))))
      .add(Q("tr")
        .add(Q("td")
          .att("colspan", "2")
          .add(Q("hr"))))
      .add(Q("tr")
        .add(Q("td")
          .style("text-align:right")
          .add(Q("div")
            .html("<b>" + II("Company") + ":</b>")))
        .add(Q("td")
          .add(sibex)))
      .add(Q("tr")
        .add(Q("td")
          .att("colspan", "2")
          .add(Q("hr"))))
      .add(Q("tr")
        .add(Q("td")
          .style("text-align:right")
          .add(Q("div")
            .html("<b>" + "Ibex" + ":</b>")))
        .add(Q("td")
          .add(siinv)))
      .add(Q("tr")
        .add(Q("td")
          .style("text-align:right")
          .add(Q("div")
            .html("<b>" + II("Price") + ":</b>")))
        .add(Q("td")
          .add(sentry)))
      .add(Q("tr")
        .add(Q("td")
          .att("colspan", "2")
          .style("text-align:center")
          .add(Q("button")
            .att("id", "calcSellBt")
            .text(II("Calculate"))
            .on("click", \e -> calculateSell();))))
      .add(Q("tr")
        .add(Q("td")
          .att("colspan", "2")
          .add(Q("hr"))))
      .add(Q("tr")
        .add(Q("td")
          .att("colspan", "2")
          .add(Q("div")
            .klass("head")
            .text(II("Stocks")))))
      .add(Q("tr")
        .add(Q("td")
          .style("text-align:right")
          .add(Q("div")
            .html("<b>" + II("Portfolio") + ":</b>")))
        .add(Q("td")
          .add(sportfolio)))
      .add(Q("tr")
        .add(Q("td")
          .style("text-align:right")
          .add(Q("div")
            .html("<b>" + II("Ibex") + ":</b>")))
        .add(Q("td")
          .add(ssibex)))
      .add(Q("tr")
        .add(Q("td"))
        .add(Q("td")
          .add(Q("hr"))))
      .add(Q("tr")
        .add(Q("td")
          .style("text-align:right")
          .add(Q("div")
            .html("<b>" + II("Sell") + ":</b>")))
        .add(Q("td")
          .add(ssell)))
    ;;

  :arr RebuysArr = dic.toArr(Rebuys);
  RebuysArr.sort(\Tp1, Tp2 ->
    return Tp1[1] == Tp2[1] ? Tp1[0] < Tp2[0] : Tp1[1] < Tp2[1];);
  RebuyTrs = !RebuysArr
    ? [ Q("tr")
        .add(Q("td")
          .att("colspan", 2)
          .klass("borderWhite")
          .html(II("Without operations")))
      ]
    : \ -> {
      Trs = [];
      iV =[0];
      trV = [Q("tr")];
      while (iV! < RebuysArr.size()) {
        Tp = RebuysArr[iV!];
        trV!
          .add(ciaTd(Tp[0]))
          .add(ciaTd(
            i18n.getLang() == "es"
              ? time.toIso(time.fromStr(Tp[1])!)
              : time.toEn(time.fromStr(Tp[1])!)))
        ;
        if (iV! % 3 != 2)
          trV!.add(Q("td").klass("separator"));
        iV! += 1;
        if (iV! % 3 == 0) {
          Trs.push(trV!);
          trV! = Q("tr");
        }
      }
      if (iV! % 3 != 0) Trs.push(trV!);
      return Trs;
    }()
  ;

  InvOperations.sort(
    \:invOperation o1, :invOperation o2 -> return o1.nick < o2.nick;
  );
  :arr BuyOps = InvOperations.filter(
    \:invOperation o -> return o.stocks <= 0;
  );
  BuyTrs = !BuyOps
    ? [ Q("tr")
        .add(Q("td")
          .klass("borderWhite")
          .html(II("Without operations")))
      ]
    : BuyOps.map(
        \:invOperation o -> return Q("tr")
          .add(ciaTd(o.nick).setStyle(
              "text-decoration",
              RebuysArr.any(\Tp -> return Tp[0] == o.nick;)
              ? "line-through"
              : ""
            ))
      ;)
  ;

  :arr SellOps = InvOperations.filter(\:invOperation o ->
    return o.stocks > 0 & dic.hasKey(Portfolio, o.nick);
  );
  SellTrs = !SellOps
    ? [ Q("tr")
        .add(Q("td")
          .att("colspan", 5)
          .klass("borderWhite")
          .html(II("Without operations")))
      ]
    : SellOps.map(
        \:invOperation o -> {
          pr = Portfolio[o.nick][1];
          cl = Closes[o.nick];
          dif = (cl - pr) * 100 / pr;
          color = dif >= 0 ? "#d0d9f0" : dif >= -5 ? "#f0f0d9" : "#ffffff";
          return Q("tr")
            .add(ciaTd(o.nick).setStyle("background", color))
            .add(stocksTd(o.stocks).setStyle("background", color))
            .add(quoteTd(pr).setStyle("background", color))
            .add(quoteTd(cl).setStyle("background", color))
            .add(quoteTd(dif).setStyle("background", color))
          ;
      })
  ;

  wg
    .removeAll()
    .add(msgWait)
    .add(Q("table")
      .klass("main")
      .add(Q("tr")
        .add(Q("td")
          .style("vertical-align:top;width:5px")
          .add(buyWg()))
        .add(Q("td")
          .style("text-align:center")
            .add(Q("table")
              .att("align", "center")
              .add(Q("tr")
                .add(Q("td")
                  .add(ui.link(\e ->update();)
                    .klass("link")
                    .text(II("Update")))))
              .add(Q("tr")
                .add(Q("td")
                  .klass("head")
                  .html("&nbsp;"))))
            .add(Q("table")
              .klass("frame")
              .att("align", "center")
              .add(Q("tr")
                .add(Q("td")
                  .add(Q("div")
                    .klass("head")
                    .html(II("Rebuys")))
                  .add(Q("table")
                    .klass("frame2")
                    .style("border-collapse : collapse;")
                    .add(Q("tr")
                      .adds(iter.reduce(
                          [0:(arr.size(RebuysArr) > 2 ? 2 : arr.size(RebuysArr) -1)],
                          [ Q("td").klass("head").html(II("Co.")),
                            Q("td").klass("head").html(II("Date")),
                            Q("td").klass("separator")
                          ],
                          \R, i -> {
                            arr.push(R, Q("td").klass("head").html(II("Co.")));
                            arr.push(R, Q("td").klass("head").html(II("Date")));
                            if (i % 3 != 1)
                              arr.push(R, Q("td").klass("separator"));
                            return R;
                          }
                        )))
                    .adds(RebuyTrs)))))
          .add(Q("div")
            .klass("head")
            .html("&nbsp;"))
          .add(Q("div")
            .klass("head")
            .html(II("Buys")))
          .add(Q("table")
            .att("align", "center")
            .klass("buys")
            .add(Q("tr")
              .add(Q("td").klass("head").html(II("Co."))))
            .adds(BuyTrs))
          .add(Q("div")
            .klass("head")
            .html(II("Sells")))
          .add(Q("table")
            .att("align", "center")
            .klass("sells")
            .add(Q("tr")
              .add(Q("td").klass("head").html(II("Co.")))
              .add(Q("td").klass("head").html(II("Stocks")))
              .add(Q("td").klass("head").html(II("Price")))
              .add(Q("td").klass("head").html(II("Quote")))
              .add(Q("td").klass("head").html("%&Delta;"))
              )
            .adds(SellTrs)
            ))
        .add(Q("td")
          .style("vertical-align:top;width:5px")
          .add(sellWg()))))
  ;
};
