// Copyright 19-Jul-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Companies summary chart,

import "libdm/lineChart";
import "i18n";

Q = ui.q;
II = i18n.tlt;

/// Creates company chart.
///   Labels: Chart labels.
///   Values: Chart values.
///   isRebuy: True if company is in rebuy state.
///   withRef: Is 1, with buy reference, -1 with sell reference, 0 without reference.
///   ref: When withRef is 1 or -1, the reference value.
/// \[s.], [[[f].].], b, n, n -> <domo>
mk = \Labels, Values, isRebuy, withRef, ref -> {
  q = arr.peek(Values[0])!;
  back = withRef > 0 & q > ref
    ? "#fff0f0"
    : withRef < 0 & q < ref
      ? "#f0f0ff"
      : "#f5f5f5"
  ;

  :: Chart = lineChart.mkExample();
  Chart.exArea.width = 305;
  Chart.exArea.height = 160;
  Chart.exArea.atts.border.width = 0;
  Chart.inPadding.left = 45;
  Chart.xAxis.fontSize = 10;
  Chart.yAxis.fontSize = 10;

  Chart.exArea.atts.background = back;

  Atts = [
    lineChart.mkLine(1.2, isRebuy ? "#a9a9a9" : "#202020", false)
  ];
  :: Data = lineChart.mkData(Labels, Values, Atts);
  Data.drawGrid = \lb, i -> {
    if (i == 0) return false;
    return Labels[i - 1] != lb;
  };
  Data.drawLabel = Data.drawGrid;
  Data.maxMinRound = \mx, mn -> {
    if (mn > 10) {
      Data.round = 2;
      return -2;
    } else if (mn > 1) {
      Data.round = 3;
      return -3;
    } else {
      Data.round = 4;
      return -4;
    }
  };
  if (withRef > 0)
    Data.UnarySets = [
        lineChart.mkUnarySet(
          II("Reference"), ref,
          lineChart.mkLine(1.5, isRebuy ? "#a9a9a9" : "#00aaff", false
        ))
      ];
  else if (withRef < 0)
    Data.UnarySets = [
        lineChart.mkUnarySet(
          II("Reference"), ref,
          lineChart.mkLine(1.5, isRebuy ? "#a9a9a9" : "#ff8100", false
        ))
      ];

  return Q("table")
    .att("align", "center")
    .add(Q("tr")
      .add(Q("td")
        .klass("frame0")
        .style("background-color:" + back)
        .add(lineChart.mkWg(Chart, Data))))
  ;
};
