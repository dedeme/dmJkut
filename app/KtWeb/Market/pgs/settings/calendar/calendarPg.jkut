// Copyright 07-Apr-2024 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Calendat page.

import "libdm/datePicker";
import "data/calendar/calendar";
import "data/calendar/timetable";
import "data/calendar/mktDay";
import "wgs/msg";
import "hourWg";
import "cts";
import "fns";
import "global";
import "i18n";

Q = ui.q;
II = i18n.tlt;

/// Contents maker.
///   wg    : Container.
/// \<domo> -> ()
mk = async \wg -> {
  dbKey, :calendar cal : await client.send({
    prg: cts.appName,
    module: "Settings",
    source: "CalendarPg",
    rq: "idata"
  });
  global.dbKeyV! = dbKey;

  generalDiv = Q("div").style("padding-bottom:15px");
  holidaysDiv = Q("div");
  specialDaysDiv = Q("div");

  openGroupV = [[]];
  closeGroupV = [[]];

  // Control -------------------------------------------------------------------

  // \ -> ()
  generalChange = async \ -> {
    :hourWg og = openGroupV!;
    :hourWg cg = closeGroupV!;
    tt = timetable.mk(og.hour(), og.minute(), cg.hour(), cg.minute());
    , dbKey : await client.send({
      prg: cts.appName,
      module: "Settings",
      source: "CalendarPg",
      rq: "setGeneral",
      dbKey: global.dbKeyV!,
      tt
    });
    global.dbKeyV! = dbKey;
  };

  // \[s.] -> ()
  holidaysChange = async \Hs -> {
    await client.send({
      prg: cts.appName,
      module: "Settings",
      source: "CalendarPg",
      rq: "setHolidays",
      dbKey: global.dbKeyV!,
      Holidays: Hs
    });
    global.dbKeyV! = dbKey;
    mk(wg);
  };

  // \[<mktDay>.] -> ()
  specialDaysChange = async \Ls -> {
    await client.send({
      prg: cts.appName,
      module: "Settings",
      source: "CalendarPg",
      rq: "setSpecialDays",
      dbKey: global.dbKeyV!,
      SpecialDays: Ls
    });
    mk(wg);
  };

  // \[s.], s -> ()
  addHoliday = \:arr Hs, d -> {
    now = time.toStr(time.now());
    if (d < now) {
      msg.error(II("Date before today"), \ -> {});
      return;
    }
    if (Hs.any(\e -> return e == d;)) {
      msg.error(i18n.fmt(II("Date '%0' is duplicated"), [d]), \ -> {});
      return;
    }
    Hs.push(d);
    holidaysChange(Hs);
  };

  // \[s.], s -> ()
  delHoliday = \:arr Ls, d -> {
    if (ui.confirm(i18n.fmt(II("Delete '%0'?"), [d])))
      holidaysChange(Ls.filter(\e -> return e != d;));
  };

  // \[<mktDay>.], s, n, n, n, n -> ()
  addSpecialDay = \:arr Ls, d, hopen, mopen, hclose, mclose -> {
    now = time.toStr(time.now());
    if (d < now) {
      msg.error(II("Date before today"), \ -> {});
      return;
    }
    if (Ls.any(\:mktDay s -> return s.date == d;)) {
      msg.error(i18n.fmt(II("Date '%0' is duplicated"), [d]), \ -> {});
      return;
    }
    Ls.push(mktDay.mk(d, hopen, mopen, hclose, mclose));
    specialDaysChange(Ls);
  };

  // \[<mktDay>.], s -> ()
  delSpecialDay = \:arr Ls, d -> {
    if (ui.confirm(i18n.fmt(II("Delete '%0'?"), [d]))) {
      specialDaysChange(Ls.filter(\:mktDay s -> return s.date != d;));
    }
  };

  // View ----------------------------------------------------------------------

  :timetable gral = cal.general;
  :hourWg openGroup = hourWg.mk(gral.hopen, gral.mopen, generalChange);
  :hourWg closeGroup = hourWg.mk(gral.hclose, gral.mclose, generalChange);
  openGroupV! = openGroup;
  closeGroupV! = closeGroup;

  /// \ -> ()
  generalWg = \ -> generalDiv
      .removeAll()
      .add(Q("table")
        .att("align", "center")
        .klass("frame")
        .add(Q("tr")
          .add(Q("td")
            .klass("head")
            .text(II("Open")))
          .add(Q("td")
            .klass("head")
            .text(II("CloseN"))))
        .add(Q("tr")
          .add(Q("td").style("padding:0px")
            .add(Q("hr")))
          .add(Q("td").style("padding:0px")
            .add(Q("hr"))))
        .add(Q("tr")
          .add(Q("td")
            .add(openGroup.wg().klass("frame")))
          .add(Q("td")
            .add(closeGroup.wg().klass("frame")))))
    ;;

  // \ -> ()
  holidaysWg = \ -> {
    :arr Hs = arr.copy(cal.Holidays);
    Hs.sort(\e1, e2 -> return e1 < e2;);

    // \ -> [<domo>.]
    list = \ -> return !Hs
      ? [ Q("tr")
          .add(Q("td"))
          .add(Q("td")
            .add(Q("table")
              .att("align", "center")
              .klass("frame4")
              .add(Q("tr")
                .add(Q("td")
                  .html(II("Without dates"))))))
        ]
      : Hs.map(\d -> return Q("tr")
          .add(Q("td")
            .add(ui.link(\e -> delHoliday(Hs, d);)
              .add(ui.img("minus"))))
          .add(Q("td")
            .style("text-align:center")
            .text(i18n.getLang() == "es"
                ? time.toIso(time.fromStr(d)!)
                : time.toEn(time.fromStr(d)!)))
        ;)
      ;;

    dpInput = Q("input")
      .att("type", "text")
      .style("text-align:center;width:166px")
    ;
    :datePicker dp = datePicker.mk(
      i18n.getLang() == "es",
      time.now(),
      \d -> if (d == "") {
          dt = time.now();
          dp.setDate(dt);
          dpInput.value(i18n.getLang() == "es"
            ? time.toIso(time.fromStr(dt)!)
            : time.toEn(time.fromStr(dt)!)
          );
        }
    );

    holidaysDiv
      .removeAll()
      .add(Q("table")
        .att("align", "center")
        .klass("frame")
        .add(Q("tr")
          .add(Q("td")
            .add(ui.link(
                \e -> addHoliday(Hs, time.toStr(dp.getDate()!));
              ).add(ui.img("plus"))))
          .add(Q("td")
            .add(dp.mkText(dpInput))))
        .add(Q("tr")
          .add(Q("td").att("colspan", 2)
            .add(Q("hr"))))
        .adds(list()))
    ;
  };

  // \ -> ()
  specialDaysWg = \ -> {
    :arr Ss = arr.copy(cal.SpecialDays);
    Ss.sort(\:mktDay s1, :mktDay s2 -> return s1.date < s2.date;);

  // \ -> [<domo>...]
    list = \ -> return !Ss
      ? [ Q("tr")
          .add(Q("td"))
          .add(Q("td")
            .add(Q("table")
              .att("align", "center")
              .klass("frame4")
              .add(Q("tr")
                .add(Q("td")
                  .html(II("Without dates"))))))
          .add(Q("td"))
          .add(Q("td"))
        ]
      : Ss.map(\:mktDay s -> return Q("tr")
          .add(Q("td")
            .add(ui.link(\e -> delSpecialDay(Ss, s.date);)
              .add(ui.img("minus"))))
          .add(Q("td")
            .style("text-align:center")
            .text(i18n.getLang() == "es"
                ? time.toIso(time.fromStr(s.date)!)
                : time.toEn(time.fromStr(s.date)!)))
          .add(Q("td")
            .style("text-align:center")
            .text(fns.format00(s.hopen) + ":" + fns.format00(s.mopen)))
          .add(Q("td")
            .style("text-align:center")
            .text(fns.format00(s.hclose) + ":" + fns.format00(s.mclose)))
        ;)
      ;;

    dpInput = Q("input")
      .att("type", "text")
      .style("text-align:center;width:166px")
    ;
    :datePicker dp = datePicker.mk(
      i18n.getLang() == "es",
      time.now(),
      \d -> if (d == "") {
          dt = time.now();
          dp.setDate(dt);
          dpInput.value(i18n.getLang() == "es"
            ? time.toIso(time.fromStr(dt)!)
            : time.toEn(time.fromStr(dt)!)
          );
        }
    );

    :hourWg open = hourWg.mk(openGroup.hour(), openGroup.minute(), \ -> {});
    :hourWg close = hourWg.mk(closeGroup.hour(), closeGroup.minute(), \ -> {});
    specialDaysDiv
      .removeAll()
      .add(Q("table")
        .att("align", "center")
        .klass("frame")
        .add(Q("tr")
          .add(Q("td")
            .add(ui.link(\ev -> {
              addSpecialDay(
                Ss, time.toStr(dp.getDate()!),
                open.hour(), open.minute(),
                close.hour(), close.minute()
              );
            }).add(ui.img("plus"))))
          .add(Q("td")
            .add(dp.mkText(dpInput)))
          .add(Q("td")
            .add(open.wg().klass("frame")))
          .add(Q("td")
            .add(close.wg().klass("frame"))))
        .add(Q("tr")
          .add(Q("td")
            .att("colspan", 4).add(Q("hr"))))
        .add(Q("tr")
          .add(Q("td"))
          .add(Q("td")
            .klass("head")
            .text(II("Date")))
          .add(Q("td")
            .klass("head")
            .text(II("Open")))
          .add(Q("td")
            .klass("head")
            .text(II("CloseN"))))
        .add(Q("tr")
          .add(Q("td")
            .att("colspan", 4)
            .add(Q("hr"))))
        .adds(list()))
    ;
  };

  generalWg();
  holidaysWg();
  specialDaysWg();

  wg
    .removeAll()
    .add(Q("div")
      .style("text-align:center")
      .add(Q("div")
        .klass("head")
        .text(II("Calendar")))
      .add(Q("table")
        .klass("main")
        .add(Q("tr")
          .add(Q("td")
            .att("colspan", 2)
            .add(ui.hrule(II("General Time Table"), 50))))
        .add(Q("tr")
          .add(Q("td")
            .att("colspan", 2)
            .add(generalDiv)))
        .add(Q("tr")
          .add(Q("td")
            .style("width:50%;vertical-align:top")
            .add(ui.hrule(II("Holidays"), 50))
            .add(holidaysDiv))
          .add(Q("td")
            .style("width:50%;vertical-align:top")
            .add(ui.hrule(II("Special days"), 50))
            .add(specialDaysDiv)))))
  ;
};

