// Copyright 08-Apr-2024 ºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Nick editor page.

import "libdm/menu";
import "libdm/modalBox";
import "data/quote";
import "wgs/msg";
import "global";
import "cts";
import "i18n";

Q = ui.q;
II = i18n.tlt;

updatingServerV = [false];

/// \<domo>, [s.], s, s -> ()
mk = async \wg, :arr Nicks, mainNick, nick -> {
  dbKey, ok, :arr Quotes, manuals, //s, b, [<quote>.], n
  :arr Mquotes, :arr SvIdCodes : await client.send({ // [<quote>.], [[s,s,s].]
    prg: cts.appName,
    module: "Settings",
    source: "NickEditorPg",
    rq: "idata",
    mainNick,
    nick
  });
  global.dbKeyV! = dbKey;
  if (!ok) {
    msg.error(cts.failMsg, \ -> {});
    return;
  }

  Nicks.sort(str.less);
  // [{id:s, withHistoric:s, code:s}.]
  :arr SIdCodes = SvIdCodes.map(
    // [s, s, s] -> {s, s, s}
    \A -> return {id: A[0], withHistoric: A[1], code: A[2]};
  );
  SIdCodes.sort(\S1, S2 -> return S1.id < S2.id;);

  serverTestSpan = Q("span");
  editBt = Q("button")
    .text(II("Edit"))
  ;
  cancelBt = Q("button")
    .text(II("Cancel"))
    .disabled(true)
  ;
  modifyBt = Q("button")
    .text(II("Modify"))
    .disabled(true)
  ;
  leftArea = Q("textarea")
    .att("spellcheck", false)
    .att("rows", 25)
    .att("cols", 60)
    .disabled(true);
  rightArea = Q("textarea")
    .att("spellcheck", false)
    .att("rows", 25)
    .att("cols", 60)
    .disabled(true)
  ;
  msgWait = Q("div");

  showWaitV = [[]];

  // Control -------------------------------------------------------------------

  // \ -> ()
  qEdit = \ -> {
    editBt.disabled(true);
    cancelBt.disabled(false);
    modifyBt.disabled(false);
    leftArea.disabled(false);
  };

  // \ -> ()
  qCancel = \-> {
    mk(wg, Nicks, mainNick, nick);
  };

  // \ -> ()
  qModify = async \-> {
    dbKey, ok : await client.send({
      prg: cts.appName,
      module: "Settings",
      source: "NickEditorPg",
      rq: "qModify",
      dbKey: global.dbKeyV!,
      mainNick: mainNick,
      nick: nick,
      qts: str.trim(leftArea.getValue())
    });
    global.dbKeyV! = dbKey;
    if (ok) {
      msg.ok(II("Quotes were successfully modified"), \->{});
      mk(wg, Nicks, mainNick, nick);
    } else {
      msg.error(II("No modification was performed.<br>See Log."), \->{});
    }
  };

  // \ -> ()
  download = async \ -> {
    showWaitV!(II("Downloading..."));
    , result : await client.send({
      prg: cts.appName,
      module: "Settings",
      source: "NickEditorPg",
      rq: "download",
      dbKey: global.dbKeyV!,
      mainNick: mainNick,
      nick: nick
    });
    global.dbKeyV! = dbKey;
    showWaitV!("");

    switch (result) {
      "error" : msg.error(II("Some error was found.<br>See Log."), \->{});
      "warnings": msg.info(II("Some quote was modified.<br>See Log."), \->{});
      default: msg.ok(II("Download ok."), \->{});
    }
    mk(wg, Nicks, mainNick, nick);
  };

  // \ -> ()
  test = async \ -> {
    , result : await client.send({
      prg: cts.appName,
      module: "Settings",
      source: "NickEditorPg",
      rq: "test",
      mainNick: mainNick,
      nick: nick,
      qts: str.trim(leftArea.getValue())
    });
    switch (result) {
      "error" : msg.error(II("An error was found.<br>See Log."), \->{});
      "warnings": msg.info(II("Some warnings were found.<br>See Log."), \->{});
      default: msg.ok(II("Test ok."), \->{});
    }
  };

  // \s, s -> ()
  updateCode = async \sId, code -> {
    if (code == "")
      msg.error(i18n.fmt(II("Nick code of %0 is missing"), [sId]), \ -> {});
    else {
      updatingServerV! = true;
      , dbKey : await client.send({
        prg: cts.appName,
        module: "Settings",
        source: "NickEditorPg",
        rq: "updateCode",
        dbKey: global.dbKeyV!,
        nick: nick,
        svId: sId,
        code: code
      });
      global.dbKeyV! = dbKey;
      mk(wg, Nicks, mainNick, nick);
    }
  };

  // \ -> ()
  serverTests = async \-> {
    await timer.delay(timer.mk(100), \ -> {});
    if (updatingServerV!) {
      ui.alert("Updating server. Try again.");
      updatingServerV! = false;
      return;
    }

    withErrorsV = [false];
    withWarningsV = [false];
    test = async \:arr SICs -> {
      if (!SICs) {
        showWaitV!("");
        if (withErrorsV! & withWarningsV!)
          msg.error(II("Errors and warnings found.<br>See log."), \->{});
        else if (withErrorsV!)
          msg.error(II("Errors found.<br>See log."), \->{});
        else if (withWarningsV!)
          msg.error(II("Warnings found.<br>See log."), \->{});
        else
          msg.ok(II("Test ok."), \->{});
        return;
      }

      SIC = SICs.pop();
      if (SIC.withHistoric) {
        showWaitV!(SIC.id);
        withErrors, withWarnings : await client.send({
          prg: cts.appName,
          module: "Settings",
          source: "NickEditorPg",
          rq: "serverTest",
          nick: nick,
          server: SIC.id
        });
        withErrorsV! |= withErrors;
        withWarningsV! |= withWarnings;
      }
      test(SICs);
    };
    test(SIdCodes);
  };

  // \s -> ()
  setRightArea = async \nick -> {
    ok, :arr Quotes : await client.send({
      prg: cts.appName,
      module: "Settings",
      source: "NickEditorPg",
      rq: "getQuotes",
      nick: nick
    });
    if (!ok) {
      msg.error(i18n.fmt(
        II("Quotes of %0 can not be loaded.<br>See Log."), [nick]
      ));
      mk(wg, Nicks, mainNick, nick);
    }
    rightArea.text(arr.join(Quotes.map(quote.toStr), "\n"));
  };

  // View ----------------------------------------------------------------------

  editBt.on("click", \e -> qEdit(););
  cancelBt.on("click", \e -> qCancel(););
  modifyBt.on("click", \e -> qModify(););

  // \-> <domo>
  serversDiv = \ -> {
    // \{id:s, withHistoric:s, code:s} -> <domo>
    svTd = \S -> {
trace [S.id, S.withHistoric];
      color = S.withHistoric ? "#000000" : "#909090";
      field = Q("input")
        .att("type", "text")
        .style("width:125px")
        .value(S.code);
      field.on("change", \e -> updateCode(S.id, str.trim(field.getValue())););

      return Q("td").add(Q("table")
        .add(Q("tr")
          .add(Q("td")
            .style("text-align:center;color:" + color)
            .text(S.id)))
        .add(Q("tr")
          .add(Q("td")
            .add(field))))
      ;
    };

    sz = SIdCodes.size();
    cols = 4;
    rows = Math.ceil(sz / cols);
    Trs = []; //[domo>.]
    for (r = 0:rows) {
      tr = Q("tr");
      for (c = 0:cols) {
        i = r * cols + c;
        tr.add(i < sz
          ? svTd(SIdCodes[i])
          : Q("td")
        );
      }
      Trs.push(tr);
    }

    return Q("div")
      .add(Q("table")
        .att("align", "center")
        .add(Q("tr")
          .add(Q("td")
            .style("vertical-align:middle")
            .add(ui.link(\e -> serverTests();)
              .klass("link")
              .text(II("Test"))))
          .add(Q("td"))
          .add(Q("td")
            .add(serverTestSpan
              .removeAll()
              .add(ui.img("unknown"))))))
      .add(Q("table")
        .klass("frame")
        .att("align", "center")
        .adds(Trs))
    ;
  };

  // \-> <domo>
  leftMenu = \ -> {
    Lopts = [
      menu.mkEntry([], editBt)
    ];
    Ropts = [
      menu.mkEntry([], cancelBt),
      menu.mkEntry([], Q("span").html("&nbsp;")),
      menu.mkEntry([], modifyBt)
    ];
    return menu.mk(Lopts, Ropts, "");
  };

  // \ -> <domo>
  rightMenu = \ -> {
    sel = ui.select("nks", Nicks.map(
      \n -> return (n == mainNick ? "+" : "") + n;
    ));
    selEl = sel.e;
    sel.on("change", \e -> setRightArea(Nicks[selEl.selectedIndex]););
    Lopts = [
      menu.mkEntry([], sel)
    ];
    return menu.mk(Lopts, [], "");
  };

  // \ -> <domo>
  textAreaHeader = \ -> return Q("td")
      .klass("frame")
      .text(
        II("Date") + ":" +
        II("Open") + ":" +
        II("CloseN") + ":" +
        II("Max") + ":" +
        II("Min") + ":" +
        II("Vol") + ":" +
        II("State")
      )
    ;;

  // s -> ()
  showWaitV! = \nick -> {
    msgWait.removeAll();

    if (nick != "") {
      :modalBox box = modalBox.mk(
        Q("div")
          .add(Q("div")
            .style("text-align:center")
            .add(ui.img("wait2.gif").klass("frame")))
          .add(Q("div").style("text-align:center").html(nick)),
        false
      );
      msgWait.add(box.mkWg());
      box.show(true);
    }
  };

  wg
    .removeAll()
    .add(msgWait)
    .add(Q("table")
      .klass("main")
      .add(Q("tr")
        .add(Q("td")
          .style("font-size: 24px;")
          .text(str.fmt("%v [%v](%v)", [nick, Quotes.size(), manuals])))
        .add(Q("td")
          .style("text-align:right")
          .add(ui.link(\ev -> download();)
            .klass("link")
            .text(II("Download")))
          .add(Q("span").text(" · "))
          .add(ui.link(\ev -> test();)
            .klass("link")
            .text(II("Test")))))
      .add(Q("tr")
        .add(Q("td")
          .att("colspan", 2)
          .add(Q("hr"))))
      .add(Q("tr")
        .add(Q("td")
          .att("colspan", 2)
          .add(ui.hrule(II("Servers"), 50))))
      .add(Q("tr")
        .add(Q("td")
          .att("colspan", 2)
          .add(serversDiv())))
      .add(Q("tr")
        .add(Q("td")
          .att("colspan", 2)
          .add(ui.hrule(II("Quotes"), 50))))
      .add(Q("tr")
        .add(Q("td")
          .att("colspan", 2)
        .add(Q("table").att("align", "center")
          .add(Q("tr")
            .add(Q("td")
              .add(Q("table")
                .style("width:100%")
                .add(Q("tr")
                  .add(Q("td")
                    .add(leftMenu())))
                .add(Q("tr")
                  .add(textAreaHeader()))
                .add(Q("tr")
                  .add(Q("td")
                    .add(leftArea
                      .text(arr.join(Quotes.map(quote.toStr), "\n")))))))
            .add(Q("td")
              .add(Q("table")
                .style("width:100%")
                .add(Q("tr")
                  .add(Q("td")
                    .add(rightMenu())))
                .add(Q("tr")
                  .add(textAreaHeader()))
                .add(Q("tr")
                  .add(Q("td")
                    .add(rightArea
                      .text(arr.join(Mquotes.map(quote.toStr), "\n")))))))))))
  );
};
