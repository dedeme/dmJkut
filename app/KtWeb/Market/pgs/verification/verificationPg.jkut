// Copyright 27-Aug-2023 ºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Verification page.

import "libdm/datePicker";
import "wgs/msg";
import "cts";
import "i18n";

Q = ui.q;
II = i18n.tlt;

/// \<domo> -> ()
mk = \wg -> mk2 (wg, time.now());;

wgV = [Q("div")];

dateV = [time.now()];

// fs: Icon, Nick, mmStocks, mmPrice, stStocks, stPrice, stCost, hcCost
//      0     1       2         3         4        5        6       7
// \[s.] -> <domo>
mkStocksEntry = \fs -> return Q("tr")
    .add(Q("td")
      .klass("border")
      .add(ui.img(fs[0])))
    .add(Q("td")
      .klass("border")
      .style("text-align:center")
      .text(fs[1]))
    .add(Q("td"))
    .add(Q("td")
      .klass("border")
      .style("text-align:right")
      .text(fs[2]))
    .add(Q("td")
      .klass("border")
      .style("text-align:right")
      .text(fs[3]))
    .add(Q("td"))
    .add(Q("td")
      .klass("border")
      .style("text-align:right")
      .text(fs[4]))
    .add(Q("td")
      .klass("border")
      .style("text-align:right")
      .text(fs[5]))
    .add(Q("td")
      .klass("border")
      .style("text-align:right")
      .text(fs[6]))
    .add(Q("td"))
    .add(Q("td")
      .klass("border")
      .style("text-align:right")
      .text(fs[7]))
  ;;

// stocksEntry = Nick, stocks, price, cost
// \[s.] -> <domo>
missingCMarket = \stocksEntry -> return mkStocksEntry([
    "error3", stocksEntry[0],
    "- - -", "- - -",
    stocksEntry[1], stocksEntry[2], stocksEntry[3],
    ""
  ]);;

// stocksEntry = Nick, stocks, price
// \[s.] -> <domo>
missingStocks = \cMarketEntry -> return mkStocksEntry([
    "error3", cMarketEntry[0],
    cMarketEntry[1], cMarketEntry[2],
    "- - -", "- - -", "- - -",
    ""
  ]);;

// \[s.], [s.] -> <domo>
nickEntry = \cMarketEntry, stocksEntry -> {
  ok = cMarketEntry[1] == stocksEntry[1] &
    cMarketEntry[2] == stocksEntry[2]
  ;

  return mkStocksEntry([
    ok ? "well3" : "error3", stocksEntry[0],
    cMarketEntry[1], cMarketEntry[2],
    stocksEntry[1], stocksEntry[2], stocksEntry[3],
    ""
  ]);
};

// \<domo>, i -> ()
mk2 = async \wg, date -> {
  wgV! = wg;
  now = time.now();
  dateV! = time.year(date) == time.year(now) ? date : now;
  ok, marketCash, hcontaCash, // b, n, n
  :arr MarketStocks, :arr StocksStocks, // [[s,n,n].], [[s,n,n,n,].]
  stocksSum, hcontaSum // n, n
  : await client.send({
    prg: cts.appName,
    module: "Verification",
    source: "VerificationPg",
    rq: "idata",
    lastDate: time.toStr(dateV!)
  });

  if (!ok) {
    msg.error(cts.failMsg, \->{});
    return;
  }

  marketCashS = math.toIso(marketCash, 2);
  hcontaCashS = math.toIso(hcontaCash, 2);

  // [[s, s, s].]
  :arr MarketStocksS = MarketStocks.map(\E -> return [
      E[0], // nick
      math.toIso(E[1], 0), // stocks
      math.toIso(E[2], 4) // price
    ];);
  MarketStocksS.sort(\E1, E2 ->
    return str.toUpper(E1[0]) < str.toUpper(E2[0]);
  );

  // [[s, s, s, s].]
  :arr StocksStocksS = StocksStocks.map(\E -> return [
      E[0], // nick
      math.toIso(E[1], 0), // stocks
      math.toIso(E[2], 4), // price
      math.toIso(E[3], 2) // total cost
    ];);
  StocksStocksS.sort(\E1, E2 ->
    return str.toUpper(E1[0]) < str.toUpper(E2[0]);
  );

  stocksSumS = math.toIso(stocksSum, 2);
  hcontaSumS = math.toIso(hcontaSum, 2);

  cashDiv = Q("div");
  stocksDiv = Q("div");

  mkCash(cashDiv, marketCashS, hcontaCashS);
  mkStocks(stocksDiv, MarketStocksS, StocksStocksS, stocksSumS, hcontaSumS);

  wg
    .removeAll()
    .add(cashDiv)
    .add(stocksDiv)
  ;
};

// \<domo>, s, s
mkCash = \div, market, hconta -> {
  icon = market == hconta ? "well3" : "error3";
  div
    .removeAll()
    .add(Q("table")
      .klass("main")
      .add(Q("tr")
        .add(Q("td")
          .style("text-align:center;vertical-align:top;")
          .add(Q("div")
            .klass("head")
            .html(II("Cash"))))))
    .add(Q("table")
      .klass("summary")
      .att("align", "center")
      .add(Q("tr")
        .add(Q("td")
          .klass("border")
          .style("text-align:center")
          .text("·"))
        .add(Q("td")
          .klass("border")
          .style("width:100px;text-align:right")
          .text("Market"))
        .add(Q("td")
          .klass("border")
          .style("width:100px;text-align:right")
          .text("Hconta")))
      .add(Q("tr")
        .add(Q("td")
          .klass("border")
          .add(ui.img(icon)))
        .add(Q("td")
          .klass("border")
          .style("width:100px;text-align:right")
          .text(market))
        .add(Q("td")
          .klass("border")
          .style("width:100px;text-align:right")
          .text(hconta))))
  ;
};

// \<domo>, [[s, s, s].], [[s, s, s, s].], s, s
mkStocks = \div, :arr MarketStocks, :arr StocksStocks, stocksSum, hcontaSum -> {
  // \ -> [<domo>.]
  entries = \ -> {
    R = []; // [<domo>.]
    mmIxV = [0];
    stIxV = [0];
    sizeMarket = MarketStocks.size();
    sizeStocks = StocksStocks.size();
    while () {
      if (mmIxV! >= sizeMarket & stIxV! >= sizeStocks) {
        break;
      }

      if (mmIxV! >= sizeMarket) {
        R.push(missingCMarket(StocksStocks[stIxV!]));
        stIxV! += 1;
        continue;
      }

      if (stIxV! >= sizeStocks) {
        R.push(missingStocks(MarketStocks[mmIxV!]));
        mmIxV! += 1;
        continue;
      }

      mmNick = MarketStocks[mmIxV!][0];
      stNick = StocksStocks[stIxV!][0];

      if (mmNick == stNick) {
        R.push(nickEntry(MarketStocks[mmIxV!], StocksStocks[stIxV!]));
        mmIxV! += 1;
        stIxV! += 1;
      } else if (mmNick < stNick) {
        R.push(missingStocks(MarketStocks[mmIxV!]));
        mmIxV! += 1;
      } else {
        R.push(missingCMarket(StocksStocks[stIxV!]));
        stIxV! += 1;
      }
    }

    return R;
  };

  dp = datePicker.mk(i18n.getLang(), dateV!, \d -> {
    if (d == "") {
      mk(wgV!);
    } else {
      y = time.fmt(time.now(), "%Y");
      if (d[:4] != y) {
        ui.alert(i18n.fmt(II("Date '%0' out of year %1"), [d, y]));
        mk(wgV!);
      } else {
        mk2(wgV!, time.fromStr(d)!);
      }
    }
  });

  div
    .removeAll()
    .add(Q("table")
      .att("align", "center")
      .style("padding-top:14px")
      .add(Q("tr")
        .add(Q("td")
          .add(datePicker.mkText(
            dp,
            Q("input")
              .style("text-align:center;width:80px"))
            ))))
    .add(Q("table")
      .klass("main")
      .add(Q("tr")
        .add(Q("td")
          .style("text-align:center;vertical-align:top;")
          .add(Q("div")
            .klass("head")
            .html(II("Stocks"))))))
    .add(Q("table")
      .klass("summary")
      .att("align", "center")
      .add(Q("tr")
        .add(Q("td")
          .klass("border"))
        .add(Q("td")
          .klass("border"))

        .add(Q("td"))

        .add(Q("td")
          .klass("border")
          .att("colspan", "2")
          .style("text-align:center")
          .text("Market"))

        .add(Q("td"))

        .add(Q("td")
          .klass("border")
          .att("colspan", "3")
          .style("text-align:center")
          .text("Stocks"))

        .add(Q("td"))

        .add(Q("td")
          .klass("border")
          .style("width:100px;text-align:center")
          .text("Hconta")))

      .add(Q("tr")
        .add(Q("td")
          .klass("border")
          .style("text-align:center")
          .text("·"))
        .add(Q("td")
          .klass("border")
          .style("text-align:center")
          .text("Nick"))

        .add(Q("td"))

        .add(Q("td")
          .klass("border")
          .style("width:75px;text-align:right")
          .text(II("Stks.")))
        .add(Q("td")
          .klass("border")
          .style("width:100px;text-align:right")
          .text(II("Price")))

        .add(Q("td"))

        .add(Q("td")
          .klass("border")
          .style("width:75px;text-align:right")
          .text(II("Stks.")))
        .add(Q("td")
          .klass("border")
          .style("width:100px;text-align:right")
          .text(II("Price")))
        .add(Q("td")
          .klass("border")
          .style("width:100px;text-align:right")
          .text(II("Cost")))

        .add(Q("td"))

        .add(Q("td")
          .klass("border")
          .style("width:100px;text-align:right")
          .text(II("Cost"))))
      .adds(entries())
      .add(Q("tr")
        .add(Q("td")
          .att("colspan", "11")))
      .add(Q("tr")
        .add(Q("td")
          .klass("border")
          .style("text-align:center")
          .add(ui.img(stocksSum == hcontaSum ? "well3" : "error3")))
        .add(Q("td")
          .klass("border")
          .style("text-align:center")
          .text(II("Sum")))

        .add(Q("td"))

        .add(Q("td")
          .klass("border")
          .style("width:75px;text-align:right")
          .text(""))
        .add(Q("td")
          .klass("border")
          .style("width:100px;text-align:right")
          .text(""))

        .add(Q("td"))

        .add(Q("td")
          .klass("border")
          .style("width:75px;text-align:right")
          .text(""))
        .add(Q("td")
          .klass("border")
          .style("width:100px;text-align:right")
          .text(""))
        .add(Q("td")
          .klass("border")
          .style("width:100px;text-align:right")
          .text(stocksSum))

        .add(Q("td"))

        .add(Q("td")
          .klass("border")
          .style("width:100px;text-align:right")
          .text(hcontaSum))))
  ;
};

