// Copyright 13-Sep-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Edit page.

import "cts";
import "msgPg";
import "edit";
import "i18n";

Q = ui.q;
II = i18n.tlt;

/// \<domo>, b -> ()
mk = async \wg, isTrash -> {
  Rp = await client.send({
    prg: cts.appName,
    source: "Edit",
    rq: "idata",
    isTrash
  });

  List = Rp.list; // [{id:s, name:s}.]

  textV = [Rp.text]; // [s]
  selV = [!List ? "" : List[0]];

  tm = timer.mk(1000);

  bodyEd = Q("textarea")
    .att("cols", 100)
    .att("rows", 25)
    .att("spellcheck", false)
    .klass("frame");
  if (isTrash) bodyEd.disabled(true);

  listDiv = Q("div");
  titleDiv = Q("div");

  showV = [[]];
  show2V = [[]];

  // Control -------------------------------------------------------------------

  // \<event> -> ()
  newNote = async \ev -> {
    await client.send({
      prg: cts.appName,
      source: "Edit",
      rq: "new"
    });

    window.location.assign("?normal");
  };

  // \s -> ()
  download = async \id, name -> {
    if (!ui.confirm(i18n.fmt(II("Download '%0'?"), [name]))) return;
    Rp = await client.send({
      prg: cts.appName,
      source: "Edit",
      rq: "download",
      name,
      id
    });

    text = window.encodeURIComponent(Rp.text);

    link = Q("a")
      .att("href", "data:text/plain;charset=utf-8," + text)
      .att("download", name)
      .setStyle("display", "none")
    ;

    Q("@body").add(link);
    link.e.click();

    window.document.body.removeChild(link.e);
  };

  // \s -> ()
  remove = async \id, name -> {
    if (!ui.confirm(i18n.fmt(II("Remove '%0'?"), [name]))) return;
    await client.send({
      prg: cts.appName,
      source: "Edit",
      rq: "remove",
      id
    });

    window.location.assign("?normal");
  };

  // \s -> ()
  rescue = async \id, name -> {
    if (!ui.confirm(i18n.fmt(II("Restore '%0'?"), [name]))) return;
    await client.send({
      prg: cts.appName,
      source: "Edit",
      rq: "rescue",
      id
    });

    window.location.assign("?normal");
  };

  // \{id:s, name:s} -> ()
  select = async \E -> {
    Rp = await client.send({
      prg: cts.appName,
      source: "Edit",
      rq: "getText",
      isTrash,
      id: E.id
    });
    selV! = E;
    bodyEd.value(Rp.text);
    textV! = Rp.text;
    showV!();
  };

  //
  refresh = async \ -> {
    text = bodyEd.getValue();
    if (text != textV!) {
      E = selV!;
      Rp = await client.send({
        prg: cts.appName,
        source: "Edit",
        rq: "setText",
        id: E.id,
        text
      });
      name = Rp.name;
      if (name != E.name) {
        E.name = name;
        show2V!();
      }
    }
  };

  // View ----------------------------------------------------------------------

  // \ -> ()
  show2V! = \ -> {
    listDiv
      .removeAll()
      .add(Q("table")
        .adds(arr.map(List, \E -> return Q("tr")
            .add(Q("td")
              .add(isTrash
                ? ui.link(\ev -> rescue(E.id, E.name);)
                  .add(ui.img("rescue"))
                : ui.link(\ev -> download(E.id, E.name);)
                  .add(ui.img("download"))))
            .adds(
              isTrash
                ? [Q("td")]
                : [ Q("td"),
                    Q("td")
                      .add(ui.link(\ev -> remove(E.id, E.name);)
                        .add(ui.img("remove"))),
                    Q("td")
                  ]
              )
            .add(Q("td")
              .klass(E.id == selV!.id ? "frame" : "")
              .add(
                (isTrash
                  ? ui.link(\ev -> select(E);)
                    .klass("link")
                    .setStyle("color", "#800000")
                  : ui.link(\ev -> select(E);)
                    .klass("link")
                ).text(E.name)))
          ;)))
    ;

    head = Q("div").klass("head").text(selV!.name);
    if (isTrash) head.setStyle("color", "#a9a9a9");
    titleDiv
      .removeAll()
      .add(head)
    ;
  };

  // \ -> ()
  showV! = \ -> {
    // \ -> <domo>
    left = \ -> {
      return Q("table")
        .klass("frame")
        .add(Q("tr")
          .add(Q("td")
            .add(isTrash
              ? ui.lightImg("archive-insert")
              : ui.link(newNote)
                .add(ui.img("archive-insert"))))
          .add(Q("td"))
          .add(Q("td")
            .style("text-align:right")
            .add(isTrash
              ? ui.link(\ev -> window.location.assign("?normal");)
                .add(ui.img("folder"))
              : ui.link(\ev -> window.location.assign("?trash");)
                .add(ui.img("trash")))))
        .add(Q("tr")
          .add(Q("td")
            .att("colspan", 3)
            .add(Q("hr")
              .style("width:150px"))))
        .add(Q("tr")
          .add(Q("td")
            .att("colspan", 3)
            .add(listDiv)))
      ;
    };

    // \ -> <domo>
    right = \ -> {
      if (!List) {
        return Q("table")
          .att("align", "center")
          .klass("frame")
          .add(Q("tr").add(Q("td").text(II("Witout Notes"))))
        ;
      }

      head = Q("div").klass("head");
      if (isTrash) head.setStyle("color", "#a9a9a9");
      return Q("div")
        .style("text-align:center")
        .add(titleDiv)
        .add(bodyEd.text(textV!))
      ;
    };

    wg
      .removeAll()
      .add(Q("table")
        .klass("main")
        .add(Q("tr")
          .add(Q("td")
            .style("vertical-align:top;width:5px")
            .add(left()))
          .add(Q("td")
            .style("vertical-align:top")
            .add(right()))))
    ;

    show2V!();
  };

  showV!();
  if (!isTrash) timer.run(tm, refresh);
};
