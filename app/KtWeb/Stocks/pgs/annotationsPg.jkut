// Copyright 26-Apr-2024 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Annotations page.

import "libdm/datePicker";
import "libdm/menu";
import "cts";
import "data/all";
import "data/year";
import "data/report";
import "data/rsumm";
import "data/rann";
import "data/ann";
import "fns";
import "i18n";

Q = ui.q;
II = i18n.tlt;

/// \<domo>, [s] -> ()
mk = async \wg, yOp -> {
  // {<year>.}::{year: yearData}
  :all AllData = await all.request();
  selYear = !yOp ? AllData.lastYearId() : yOp!;
  :year y = AllData[selYear];
  :report rp, rpOk = y.getReport(cts.withFees);

  mkAnnsOp = [[]];

  // Control -------------------------------------------------------------------

  // \->()
  update = async \ -> {
      await all.send(AllData);
      mk(wg, [selYear]);
    };

  // \<event> -> ()
  initialStock = async \e -> {
    if (!ui.confirm(II("Set values of the year beginning?"))) return;
    err = await AllData.set0101(selYear);
    if (err != "") {
      ui.alert(err);
      return;
    }
    update();
  };

  // \<event> -> ()
  cancel = \e -> mk(wg, [selYear]);;

  // \[<ann>], <domo>, <domo>, <domo>,
  //  <domo>, <domo>, <domo>, <domo> -> ()
  accept = \annOp, buyBt, sellBt, dateWg,
            nickWg, stocksWg, priceWg, cashWg -> {
    isSell = sellBt.isChecked();

    dateTx = str.trim(dateWg.getValue());
    if (dateTx == "") { ui.alert(II("Date is missing")); return; }
    dateOp = time.fromIso(dateTx, "/");
    if (!dateOp) { ui.alert(II("Date is not valid")); return; }
    date = dateOp!;
    if (selYear != "" + time.year(date)) {
      ui.alert(II("Date year is not the selected year"));
      return;
    }

    nick = str.trim(nickWg.getValue());
    if (nick == "") { ui.alert(II("Nick is missing")); return; }

    stocksOp = fns.int(stocksWg);
    if (!stocksOp) {ui.alert(II("Stocks is not a valid integer")); return; }
    stocks = stocksOp!;

    priceOp = fns.float(priceWg, 4);
    if (!priceOp) {ui.alert(II("Price is not a valid number")); return; }
    price = priceOp!;
    if (price < 0) { ui.alert(II("Price < 0")); return; }

    cashOp = fns.float(cashWg, 2);
    if (!cashOp) { ui.alert(II("Cash is not a valid number")); return; }
    cash = cashOp!;
    if (cash < 0) { ui.alert(II("Cash < 0")); return; }
    if (isSell & cash > stocks * price) {
      ui.alert(II("'Cash > Stocks * Price' in a sell"));
      return;
    }
    if (!isSell & cash < stocks * price) {
      ui.alert(II("'Cash < Stocks * Price' in a buy"));
      return;
    }

    if (!AllData.duplicateNick(nick)) {
      if (!ui.confirm(II("A new nick is to be added.\nContinue?")))
        return;
    }

    y.add(annOp, ann.mk(
      -1, isSell, date, nick, stocks, price, cash
    ));
    update();
  };

  // \<ann> -> ()
  del = \:ann a -> {
    if (ui.confirm(i18n.fmt(II("%0\nDelete annotation?"), [ann.toStr(a)]))) {
      y.remove(a.id);
      update();
    }
  };

  // View ----------------------------------------------------------------------

  // ANNOTATIONS

  // \<domo> -> [<domo>.]
  entries = \td -> {
    // \<ann> -> <domo>
    entry = \:ann a -> {
      is0101 = time.day(a.date) == 1 & time.month(a.date) == 1;
      return Q("tr")
        .add(Q("td")
          .add(is0101
            ? Q("span")
              .add(ui.lightImg("delete"))
            : ui.link(\e -> del(a);)
                .add(ui.img("delete"))))
        .add(Q("td")
          .add(is0101
            ? Q("span")
              .add(ui.lightImg("edit"))
            : ui.link(\e -> mkAnnsOp!(td, [a]);)
                .add(ui.img("edit"))))
        .add(Q("td")
          .add(a.isSell ? ui.led("#4080ff", 6) : ui.led("#ff8040", 6)))
        .add(Q("td").klass("frame").text(time.toIso(a.date)))
        .add(Q("td").klass("frame").text(a.nick))
        .add(Q("td").klass("number2").text(math.toIso(a.stocks, 0)))
        .add(Q("td").klass("number2").text(math.toIso(a.price, 4)))
        .add(Q("td").klass("number2").text(math.toIso(a.cash, 2)))
      ;
    };
    return arr.map(arr.reverse(y.anns()), entry);
  };

  // \<domo>, [<ann>] -> ()
  mkAnnsOp! = \td, annOp -> {
    // \ -> <domo>
    th = \ -> return Q("td")
      .style("text-align: center;padding-left: 4px; padding-right: 4px")
    ;;

    // <domo>
    state = ui.led(rpOk ? "#80C0E0" : "#E0C080", 6)
        .att("title", rpOk ? II("Data is ok") : II("An error is found"))
    ;
    if (!rpOk) {
      td
        .removeAll()
        .klass("frame")
        .text(rp)
      ;
      return;
    }

    dateWg = Q("input").style("width: 100px;text-align:center");
    datePk = datePicker.mk(
      i18n.getLang(),
      time.now(),
      \s -> {}
    );

    buyBt = Q("input")
      .att("type", "radio")
      .att("name", "operation")
      .att("checked", "true")
    ;

    sellBt = Q("input")
      .att("type", "radio")
      .att("name", "operation")
    ;

    nickWg = ui.field("stocks")
      .style("width: 50px")
    ;

    stocksWg = ui.field("price")
      .att("id", "stocks")
      .style("width: 50px")
    ;

    priceWg = ui.field("cash")
      .att("id", "price")
      .style("width: 100px")
    ;
    ui.changePoint(priceWg);

    cashWg = ui.field("accept")
      .att("id", "cash")
      .style("width: 150px")
    ;
    ui.changePoint(cashWg);

    set0101 = selYear == AllData.lastYearId()
      ? ui.link(initialStock)
        .att("title", II("Set initial stock"))
        .klass("link")
        .text("0101")
      : Q("span")
    ;

    cancelBt = Q("button")
      .text(II("Cancel"))
      .on("click", cancel)
    ;

    acceptBt = Q("button")
      .att("id", "accept")
      .text(II("Accept"))
      .on("click", \e -> accept(
          annOp, buyBt, sellBt, dateWg, nickWg, stocksWg, priceWg, cashWg
        );)
    ;

    if (!!annOp) {
      :ann a = annOp!;
      if (a.isSell) {
        buyBt.checked(false);
        sellBt.checked(true);
      }
      datePicker.setDate(datePk, a.date);
      nickWg.value(a.nick);
      stocksWg.value(math.toIso(a.stocks, 0));
      priceWg.value(math.toIso(a.price, 4));
      cashWg.value(math.toIso(a.cash, 2));
    }

    datePickerWg = datePicker.mkText(datePk, dateWg);

    editor = Q("table")
      .att("align", "center")
      .add(Q("tr")
        .add(Q("td")
          .att("colspan", "2")
            .add(state))
        .add(Q("td"))
        .add(Q("td")))
      .add(Q("tr")
        .add(th()
          .text(II("Buy")))
        .add(th()
          .text(II("Sell")))
        .add(th()
          .text(II("Date")))
        .add(th()))
      .add(Q("tr")
        .add(th()
          .add(buyBt))
        .add(th()
          .add(sellBt))
        .add(Q("td")
          .add(datePickerWg))
        .add(Q("td")))
      .add(Q("tr")
        .add(th()
          .text(II("Nick")))
        .add(th()
          .text(II("Stocks")))
        .add(th()
          .text(II("Price")))
        .add(th()
          .text(II("Cash"))))
      .add(Q("tr")
        .add(th()
          .add(nickWg))
        .add(th()
          .add(stocksWg))
        .add(Q("td")
          .add(priceWg))
        .add(Q("td")
          .add(cashWg)))
      .add(Q("tr")
        .add(Q("td")
          .style("text-align: center")
          .add(set0101))
        .add(Q("td")
          .att("colspan", 3)
          .style("text-align: right")
          .add(cancelBt)
          .add(Q("span")
            .html("&nbsp;&nbsp;"))
          .add(acceptBt)))
    ;


    list = Q("table")
        .klass("frame")
        .att("align", "center")
    ;
    if (!y.anns()) {
      list
        .add(Q("tr")
          .add(Q("td")
            .text(II("Without Data"))))
      ;
    } else {
      list.adds(entries(td));
    }

    td
      .removeAll()
      .add(editor)
      .add(Q("hr"))
      .add(list)
    ;
  };

  // REPORTS

  // \[<rsumm>.] -> [<domo>.]
  sumaryTrs = \:arr Sum -> {
    // \<rsumm> -> <domo>
    mkRow = \:rsumm e -> return Q("tr")
      .add(Q("td")
        .text(e.nick))
      .add(Q("td")
        .klass("number2")
        .text(math.toIso(e.stocks, 0)))
      .add(Q("td")
        .klass("number")
        .text(math.toIso(e.price, 4)))
      .add(Q("td")
        .klass("number")
        .text(math.toIso(e.total, 2)))
    ;;
    return arr.map(Sum.reverse(), \e -> return mkRow(e););
  };

  // \[<rann>.] -> [<domo>.]
  annsTrs = \:arr Ranns -> {
    // \<rann> -> <domo>
    mkRow = \:rann ra -> return Q("tr")
      .add(Q("td")
        .add(!ra.profitsOp ? ui.led("#ff8040", 6) : ui.led("#4080ff", 6)))
      .add(Q("td").klass("frame").text(time.toIso(ra.date)))
      .add(Q("td").klass("frame").text(ra.nick))
      .add(Q("td").klass("number2").text(math.toIso(ra.stocks, 0)))
      .add(Q("td").klass("number").text(math.toIso(ra.price, 4)))
      .add(Q("td").klass("number2").text(math.toIso(ra.total, 2)))
      .add(Q("td")
        .klass(!ra.profitsOp ? "header" : "number")
        .text(!ra.profitsOp ? "" : math.toIso(ra.profitsOp!, 2)))
      .add(Q("td")
        .klass(!ra.feesOp ? "header" : "number")
        .text(!ra.feesOp ? "" : math.toIso(ra.feesOp!, 2)))
    ;;

    if (!Ranns)
      return [Q("tr")
        .add(Q("td")
          .klass("frame")
          .text(II("Without Annotations")))
      ];

    return arr.map(Ranns.reverse(), \:rann ra -> return mkRow(ra););
  };

  // isel can be report.all, report.withFees or investor index.
  // \<domo>, n -> ()
  mkReports = \td, isel -> {
    sel = isel == cts.withoutFees
      ? "without"
      : "with"
    ;

    Lopts = [
      menu.toption("with", II("With Fees"), \ -> mkReports(td, cts.withFees);),
      menu.separator(),
      menu.toption("without", II("Without Fees"),
        \ -> mkReports(td, cts.withoutFees);)
    ];
    menuWg = menu.mk(Lopts, [], sel);

    body = Q("div");
    :report rp, rpOk = y.getReport(isel);

    if (!rpOk) {
      body.html(II("Fail making report") + "<br>" + rp);
      td
        .removeAll()
        .add(menuWg)
        .add(body)
      ;
      return;
    }

    body
      .add(Q("table")
        .klass("border")
        .att("align", "center")
        .add(Q("tr")
          .add(Q("td")
            .style("text-align: right; width: 80px")
            .text(II("Cost") + ":"))
          .add(Q("td")
            .klass("number")
            .text(math.toIso(rp.cost, 2))))
        .add(Q("tr")
          .add(Q("td")
            .style("text-align: right; width: 80px")
            .text(II("Profits") + ":"))
          .add(Q("td")
            .klass("number")
            .text(math.toIso(rp.profits, 2))))
        .add(Q("tr")
          .add(Q("td")
            .style("text-align: right; width: 80px")
            .text(II("Fees") + ":"))
          .add(Q("td")
            .klass(!rp.feesOp ? "header" : "number")
            .text(!rp.feesOp ? "" : math.toIso(rp.feesOp!, 2)))))
      .add(Q("div")
        .klass("head")
        .text(II("Stocks")))
      .add(Q("table")
        .klass("border")
        .att("align", "center")
        .add(Q("tr")
          .add(Q("td")
            .klass("header")
            .text(II("Nick")))
          .add(Q("td")
            .klass("header")
            .text(II("Stocks")))
          .add(Q("td")
            .klass("header")
            .text(II("Price")))
          .add(Q("td")
            .klass("header")
            .text(II("Total"))))
        .adds(sumaryTrs(rp.Summary)))
      .add(Q("div")
        .klass("head")
        .text(II("Annotations")))
      .add(Q("table")
        .klass("border")
        .att("align", "center")
        .add(Q("tr")
          .add(Q("td")
            .klass("header")
            .text(""))
          .add(Q("td")
            .klass("header")
            .text(II("Date")))
          .add(Q("td")
            .klass("header")
            .text(II("Nick")))
          .add(Q("td")
            .klass("header")
            .text(II("Stocks")))
          .add(Q("td")
            .klass("header")
            .text(II("Price")))
          .add(Q("td")
            .klass("header")
            .text(II("Total")))
          .add(Q("td")
            .klass("header")
            .text(II("Profits")))
          .add(Q("td")
            .klass("header")
            .text(II("Fees"))))
        .adds(annsTrs(rp.Anns)))
    ;

    td
      .removeAll()
      .setStyle("padding", "8px")
      .add(menuWg)
      .add(body)
    ;
  };

  Lopts = [];
  firstV = [true];
  for (myear = AllData.yearIds()) {
    if (firstV!) {
      firstV! = false;
    } else {
      Lopts.push(menu.separator());
    }
    Lopts.push(menu.toption(
      myear, myear, \ -> mk(wg, [myear]);
    ));
  }
  menuWg = menu.mk(Lopts, [], selYear);

  annsTd = Q("td")
    .klass("border")
    .style("width: 5px;vertical-align:top")
  ;
  mkAnnsOp!(annsTd, []);

  reportsTd = Q("td")
    .klass("border")
    .style("vertical-align:top; padding-top: 3px; padding-left: 2px")
  ;
  mkReports(reportsTd, cts.withFees);

  wg
    .removeAll()
    .add(menuWg)
    .add(Q("table")
      .klass("main")
      .add(Q("tr")
        .add(annsTd)
        .add(Q("td")
          .klass("border"))
        .add(reportsTd)))
  ;
};
