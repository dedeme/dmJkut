// Copyright 26-Sep-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Program starting.

import "libdm/menu";
import "cts";
import "global";
import "pgs/msgPg";
import "pgs/danceSelectorPg";
import "pgs/picturesPg";
import "pgs/songsPg";
import "pgs/radioPg";
import "pgs/pinupsPg";
import "pgs/standByPg";
import "pgs/danceManagementPg";
import "pgs/songsManagementPg";
import "pgs/pictsManagementPg";
import "pgs/pinupsManagementPg";
import "pgs/timesPg";
import "i18n";

Q = ui.q;
II = i18n.tlt;

// Type definition.
/// \ -> <audio>
//

// \<domo> -> ()
mk = async \wg -> {
  ok = await client.connect();
  if (!ok) {
    ui.alert(II("Session is closed.\nAuthenticating from Main."));
    window.location.assign("http://" + window.location.host + "/Main");
    return;
  }

  // Sessions control is in "KtWeb:Main" !!!
  , lang : await client.send({
    prg: "Main", // Call to KtWeb:Main
    source: "Main",
    rq: "lang"
  });
  if (lang == "en") i18n.en();

  , dbKey : await client.send({
    prg: cts.appName,
    source: "MainPg",
    rq: "idata"
  });
  global.dbKeyV! = dbKey;

  fastUpdate = async \ -> {
    , dbKey : await client.send({
      prg: cts.appName,
      source: "MainPg",
      rq: "update",
      dbKey: global.dbKeyV!
    });
    global.dbKeyV! = dbKey;
  };
  fastUpdate();

  wallpapersBt = Q("button").text(II("Wallpapers"));
  pinupsBt = Q("button").text(II("Pinups"));
  songsBt = Q("button").text(II("Wallpapers with Music"));
  radioBt = Q("button").text(II("Wallpapers with Radio"));
  shortDanceBt = Q("button").text(II("Short Dance"));
  longDanceBt = Q("button").text(II("Long Dance"));
  standByBt = Q("button").text(II("Stand By"));

  allMenuV = [false];
  showV = [[]];

  // Control -------------------------------------------------------------------

  // \ > ()
  reload = \ -> window.location.assign("");;

  // \<keyboardEvent>, ([<domo>]|[]), ([<domo>]|[]) -> ()
  keyInButton = \ev, upOp, downOp -> {
    if (ev.key == "ArrowUp" & !!upOp) {
      upOp!.e.focus();
      ev.preventDefault();
      return;
    }

    if (ev.key == "ArrowDown" & !!downOp) {
      downOp!.e.focus();
      ev.preventDefault();
      return;
    }
  };

  // \ -> ()
  showAllMenu = \ -> {
    allMenuV! = true;
    showV!();
  };

  // View ----------------------------------------------------------------------

  // \ -> [<domo>.]
  moreRows = \ -> {
    return allMenuV!
      ? [
          Q("tr")
            .add(Q("td")
              .add(Q("button")
                .text(II("Pictures Management"))
                .on("click", \e -> pictsManagementPg.mk(wg, reload);))),
          Q("tr")
            .add(Q("td")
              .add(Q("button")
                .text(II("Pinup Management"))
                .on("click", \e -> pinupsManagementPg.mk(wg, reload);))),
          Q("tr")
            .add(Q("td")
              .add(Q("button")
                .text(II("Songs Management"))
                .on("click", \e -> songsManagementPg.mk(wg, reload);))),
          Q("tr")
            .add(Q("td")
              .add(Q("button")
                .text(II("Dance Management"))
                .on("click", \e -> danceManagementPg.mk(wg, reload);))),
          Q("tr")
            .add(Q("td")
              .add(Q("button")
                .text(II("Times Management"))
                .on("click", \e -> timesPg.mk(wg, reload);)))
        ]
      : [Q("tr")
            .add(Q("td")
              .add(Q("button")
                .text(II("More") + "...")
                .on("click", \e -> showAllMenu();)))
        ]
    ;
  };

  // \ -> ()
  showV! = \ -> {
    wallpapersBt
      .on("keydown", \e -> keyInButton(e, [], [songsBt]);)
      .on("click", \e -> picturesPg.mk(wg, reload);)
    ;
    songsBt
      .on("keydown", \e -> keyInButton(e, [wallpapersBt], [radioBt]);)
      .on("click", \e -> songsPg.mk(wg, reload);)
    ;
    radioBt
      .on("keydown", \e -> keyInButton(e, [songsBt], [pinupsBt]);)
      .on("click", \e -> radioPg.mk(wg, reload);)
    ;
    pinupsBt
      .on("keydown", \e -> keyInButton(e, [radioBt], [shortDanceBt]);)
      .on("click", \e -> pinupsPg.mk(wg, reload);)
    ;
    shortDanceBt
      .on("keydown", \e -> keyInButton(e, [pinupsBt], [longDanceBt]);)
      .on("click", \e -> danceSelectorPg.mk(wg, true, reload);)
    ;
    longDanceBt
      .on("keydown", \e -> keyInButton(e, [shortDanceBt], [standByBt]);)
      .on("click", \e -> danceSelectorPg.mk(wg, false, reload);)
    ;
    standByBt
      .on("keydown", \e -> keyInButton(e, [longDanceBt], []);)
      .on("click", \e -> standByPg.mk(wg, reload);)
    ;

    wg
      .removeAll()
      .klass("margin")
      .add(Q("div")
        .klass("head")
        .text(II("Wallpapers")))
      .add(Q("div")
        .html("&nbsp;"))
      .add(Q("table")
        .att("align", "center")
        .add(Q("tr")
          .add(Q("td")
            .add(wallpapersBt)))
        .add(Q("tr")
          .add(Q("td")
            .add(songsBt)))
        .add(Q("tr")
          .add(Q("td")
            .add(radioBt)))
        .add(Q("tr")
          .add(Q("td")
            .add(pinupsBt)))
        .add(Q("tr")
          .add(Q("td")
            .add(shortDanceBt)))
        .add(Q("tr")
          .add(Q("td")
            .add(longDanceBt)))
        .add(Q("tr")
          .add(Q("td")
            .add(standByBt)))
        .add(Q("tr")
          .add(Q("td")
            .add(Q("hr"))))
        .adds(moreRows()))
    ;

    timer.delay(100, \ -> {
      mainButtonOp = null(wallpapersBt);
      if (!!mainButtonOp) {
        eOp = null(mainButtonOp!.e);
        if (!!eOp) eOp!.focus();
      }
    });
  };

  showV!();
};

// Main ========================================================================

wg = Q("div");

/// Load main window
/// \ -> ()
load = \ -> {
  mk(wg);
};

// Client must be initilized with "KtWeb" !!!
client.init(true, "KtWeb", \isExpired -> {
  message = isExpired
    ? II("Session is expired.")
    : II("Data base is out of date.")
  ;
  msgWg = Q("div");
  msgPg.mk(msgWg, message, true);
  Q("@body")
    .removeAll()
    .add(msgWg)
    .add(cts.foot)
  ;
});

Q("@body")
  .removeAll()
  .add(wg)
  .add(cts.foot)
  .add(ui.upTop("up"))
;

load();
