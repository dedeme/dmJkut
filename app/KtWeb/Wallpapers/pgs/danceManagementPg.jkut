// Copyright 01-Oct-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Songs management page.

import "libdm/menu";
import "global";
import "cts";
import "data/danceSong";
import "fns";
import "i18n";

Q = ui.q;
II = i18n.tlt;

/// \<domo>, (\->()) -> ()
mk = async \wg, reload -> {
  dbKey, :arr Groups, group, :arr DanceSongs // s,[s.],s,[<danceSong>.]
  : await client.send({
    prg: cts.appName,
    source: "DanceManagementPg",
    rq: "idata"
  });
  global.dbKeyV! = dbKey;
  Groups.sort(\g1, g2 -> return g1 < g2;);
  DanceSongs.sort(\:danceSong s1, :danceSong s2 ->
    return str.toUpper(s1.id) < str.toUpper(s2.id);
  );

  // Control -------------------------------------------------------------------

  // \s -> ()
  changeGroup = async \g -> {
    if (g == group) return;
    await client.send({
      prg: cts.appName,
      source: "DanceManagementPg",
      rq: "changeGroup",
      dbKey: global.dbKeyV!,
      group: g
    });
    mk(wg, reload);
  };

  // \s, n -> ()
  setLevel = async \ssong, level -> {
    , dbKey : await client.send({
      prg: cts.appName,
      source: "DanceManagementPg",
      rq: "setLevel",
      dbKey: global.dbKeyV!,
      group,
      ssong,
      level
    });
    global.dbKeyV! = dbKey;
  };

  // \s, n -> ()
  setSpeed = async \ssong, speed -> {
    , dbKey : await client.send({
      prg: cts.appName,
      source: "DanceManagementPg",
      rq: "setSpeed",
      dbKey: global.dbKeyV!,
      group,
      ssong,
      speed
    });
    global.dbKeyV! = dbKey;
  };

  // View ----------------------------------------------------------------------

  // \ -> [<domo>.]
  rows = \ -> {
    return DanceSongs.map(\:danceSong s -> return Q("tr")
        .add(Q("td")
          .att("title", II("Quality"))
          .style("width:5px")
          .klass("frame")
          .add(Q("table")
            .klass("main")
            .add(Q("tr")
              .add(Q("td")
                .add(Q("input")
                  .att("type", "radio")
                  .att("name", "level|" + s.id)
                  .checked(0 == s.level))
                  .on("click", \e -> setLevel(s.id, 0);))
              .add(Q("td")
                .html("?&nbsp;"))
              .add(Q("td")
                .add(Q("input")
                  .att("type", "radio")
                  .att("name", "level|" + s.id)
                  .checked(1 == s.level))
                  .on("click", \e -> setLevel(s.id, 1);))
              .add(Q("td")
                .html("&#8722;&nbsp;"))
              .add(Q("td")
                .add(Q("input")
                  .att("type", "radio")
                  .att("name", "level|" + s.id)
                  .checked(2 == s.level))
                  .on("click", \e -> setLevel(s.id, 2);))
              .add(Q("td")
                .html("+&nbsp;"))
                  )))
        .add(Q("td")
          .att("title", II("Speed"))
          .style("width:5px")
          .klass("frame")
          .add(Q("table")
            .klass("main")
            .add(Q("tr")
              .add(Q("td")
                .add(Q("input")
                  .att("type", "radio")
                  .att("name", "speed|" + s.id)
                  .checked(0 == s.speed))
                  .on("click", \e -> setSpeed(s.id, 0);))
              .add(Q("td")
                .html("&#171;&nbsp;"))
              .add(Q("td")
                .add(Q("input")
                  .att("type", "radio")
                  .att("name", "speed|" + s.id)
                  .checked(1 == s.speed))
                  .on("click", \e -> setSpeed(s.id, 1);))
              .add(Q("td")
                .html("&#187;&nbsp;"))
                  )))
        .add(Q("td")
          .klass("frame")
          .text(s.id))
        .add(Q("td")
          .klass("frame")
          .text(fns.formatInt(s.shortPlays, 2)))
        .add(Q("td")
          .klass("frame")
          .text(fns.formatInt(s.longPlays, 2)))
    ;);
  };

  Lopts = [];
  firstV = [true];
  for (g = Groups) {
    if (firstV!) firstV! = false;
    else Lopts.push(menu.separator());

    Lopts.push(menu.toption(g, g, \ -> changeGroup(g);));
  }
  Ropts = [
    menu.toption("_back_", II("Back"), reload)
  ];

  menuWg = menu.mk(Lopts, Ropts, group);

  wg
    .removeAll()
    .add(Q("div")
      .klass("head")
      .text(II("Songs Management")))
    .add(Q("hr"))
    .add(menuWg)
    .add(Q("table")
      .att("align", "center")
      .klass("frame3")
      .adds(rows()))
  ;
};

