// Copyright 26-Sep-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Songs management page.

import "libdm/menu";
import "data/cts";
import "data/song";
import "i18n";

Q = ui.q;
II = i18n.tlt;

/// \<domo>, (\->()) -> ()
mk = async \wg, reload -> {
  Rp = await client.send({
    prg: cts.appName,
    source: "SongsManagement",
    rq: "idata"
  });
  Groups = Rp.groups; // [s.]
  arr.sort(Groups, \g1, g2 -> return g1 < g2;);
  group = Rp.group;
  Songs = arr.map(Rp.songs, song.fromJs);
  arr.sort(Songs, \S1, S2 -> return str.toUpper(S1.id) < str.toUpper(S2.id););
  songGroup = Rp.songGroup;
  ssong = Rp.song;

  // Control -------------------------------------------------------------------

  // \s -> ()
  changeGroup = async \g -> {
    if (g == group) return;
    await client.send({
      prg: cts.appName,
      source: "SongsManagement",
      rq: "changeGroup",
      group: g
    });
    mk(wg, reload);
  };

  // \s, n -> ()
  setLevel = async \song, level -> {
    await client.send({
      prg: cts.appName,
      source: "SongsManagement",
      rq: "setLevel",
      group,
      song,
      level
    });
  };

  // \s -> ()
  setSel = async \song -> {
    if (song == ssong) return;
    await client.send({
      prg: cts.appName,
      source: "SongsManagement",
      rq: "setSel",
      group,
      song
    });
  };

  // \s, n -> ()
  setLapse = async \song, lapse -> {
    await client.send({
      prg: cts.appName,
      source: "SongsManagement",
      rq: "setLapse",
      group,
      song,
      lapse
    });
    mk(wg, reload);
  };

  // View ----------------------------------------------------------------------

  // \ -> [<domo>.]
  rows = \ -> {
    R = []; // [<domo>.]
    for (S = Songs) {
      Tds = []; // [<domo>.]

      arr.push(Tds, Q("td")
        .style("width:5px")
        .add(Q("input")
          .att("type", "radio")
          .att("name", "sel")
          .checked(ssong == S.id & group == songGroup))
          .on("click", \e -> setSel(S.id);)
      );

      range = Q("input")
        .att("type", "range")
        .att("min", 0)
        .att("max", 100)
        .att("value", S.lapse)
      ;
      range.on("change", \e -> setLapse(S.id, range.e.valueAsNumber););

      arr.push(Tds, Q("td")
        .klass("frame")
        .style("width:5px;")
        .add(range)
      );

      for (i = 1:4) {
        arr.push(Tds, Q("td")
          .style("width:5px")
          .add(Q("input")
            .att("type", "radio")
            .att("name", S.id)
            .checked(i == S.level))
            .on("click", \e -> setLevel(S.id, i);)
        );
        arr.push(Tds, Q("td")
          .style("width:5px")
          .text("" + i)
        );
        arr.push(Tds, Q("td")
          .style("width:5px")
          .html("&nbsp;")
        );
      }
      arr.push(Tds, Q("td")
        .klass("frame")
        .text(S.id)
      );
      arr.push(R, Q("tr").adds(Tds));
    }
    return R;
  };

  Lopts = [];
  firstV = [true];
  for (g = Groups) {
    if (firstV!) firstV! = false;
    else arr.push(Lopts, menu.separator());

    arr.push(Lopts, menu.toption(g, g, \ -> changeGroup(g);));
  }
  Ropts = [
    menu.toption("_back_", II("Back"), reload)
  ];

  menuWg = menu.mk(Lopts, Ropts, group, false);

  wg
    .removeAll()
    .add(Q("div")
      .klass("head")
      .text(II("Songs Management")))
    .add(Q("hr"))
    .add(menuWg)
    .add(Q("table")
      .att("align", "center")
      .klass("frame3")
      .adds(rows()))
  ;
};

