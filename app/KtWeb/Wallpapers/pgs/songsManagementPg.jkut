// Copyright 26-Sep-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Songs management page.

import "libdm/menu";
import "global";
import "cts";
import "data/song";
import "i18n";

Q = ui.q;
II = i18n.tlt;

/// \<domo>, (\->()) -> ()
mk = async \wg, reload -> {
  dbKey, : arr Groups, group, //s,[s.],s
  :arr Songs, songGroup, ssong // [<song>.],s,s
  : await client.send({
    prg: cts.appName,
    source: "SongsManagementPg",
    rq: "idata"
  });
  global.dbKeyV! = dbKey;
  Groups.sort(\g1, g2 -> return g1 < g2;);
  Songs.sort(\:song s1, :song s2 ->
    return str.toUpper(s1.id) < str.toUpper(s2.id);
  );

  // Control -------------------------------------------------------------------

  // \s -> ()
  changeGroup = async \g -> {
    if (g == group) return;
    await client.send({
      prg: cts.appName,
      source: "SongsManagementPg",
      rq: "changeGroup",
      dbKey: global.dbKeyV!,
      group: g
    });
    mk(wg, reload);
  };

  // \s, n -> ()
  setLevel = async \ssong, level -> {
    , dbKey : await client.send({
      prg: cts.appName,
      source: "SongsManagementPg",
      rq: "setLevel",
      dbKey: global.dbKeyV!,
      group,
      ssong,
      level
    });
    global.dbKeyV! = dbKey;
  };

  // \s -> ()
  setSel = async \songId -> {
    if (songId == ssong) return;
    , dbKey : await client.send({
      prg: cts.appName,
      source: "SongsManagementPg",
      rq: "setSel",
      dbKey: global.dbKeyV!,
      group,
      songId
    });
    global.dbKeyV! = dbKey;
  };

  // \s, n -> ()
  setLapse = async \song, lapse -> {
    await client.send({
      prg: cts.appName,
      source: "SongsManagementPg",
      rq: "setLapse",
      dbKey: global.dbKeyV!,
      group,
      ssong,
      lapse
    });
    mk(wg, reload);
  };

  // View ----------------------------------------------------------------------

  // \ -> [<domo>.]
  rows = \ -> {
    R = []; // [<domo>.]
    for (:song s = Songs) {
      Tds = []; // [<domo>.]

      Tds.push(Q("td")
        .style("width:5px")
        .add(Q("input")
          .att("type", "radio")
          .att("name", "sel")
          .checked(ssong == s.id & group == songGroup))
          .on("click", \e -> setSel(s.id);)
      );

      range = Q("input")
        .att("type", "range")
        .att("min", 0)
        .att("max", 100)
        .att("value", s.lapse)
      ;
      range.on("change", \e -> setLapse(s.id, range.e.valueAsNumber););

      Tds.push(Q("td")
        .klass("frame")
        .style("width:5px;")
        .add(range)
      );

      for (i = 1:4) {
        Tds.push(Q("td")
          .style("width:5px")
          .add(Q("input")
            .att("type", "radio")
            .att("name", s.id)
            .checked(i == s.level))
            .on("click", \e -> setLevel(s.id, i);)
        );
        Tds.push(Q("td")
          .style("width:5px")
          .text("" + i)
        );
        Tds.push(Q("td")
          .style("width:5px")
          .html("&nbsp;")
        );
      }
      Tds.push(Q("td")
        .klass("frame")
        .text(s.id)
      );
      R.push(Q("tr").adds(Tds));
    }
    return R;
  };

  Lopts = [];
  firstV = [true];
  for (g = Groups) {
    if (firstV!) firstV! = false;
    else Lopts.push(menu.separator());

    Lopts.push(menu.toption(g, g, \ -> changeGroup(g);));
  }
  Ropts = [
    menu.toption("_back_", II("Back"), reload)
  ];

  menuWg = menu.mk(Lopts, Ropts, group);

  wg
    .removeAll()
    .add(Q("div")
      .klass("head")
      .text(II("Songs Management")))
    .add(Q("hr"))
    .add(menuWg)
    .add(Q("table")
      .att("align", "center")
      .klass("frame3")
      .adds(rows()))
  ;
};

