// Copyright 26-Sep-2023 ºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Information widget.

import "data/cts";
import "i18n";

Q = ui.q;
II = i18n.tlt;

/// Constructor.
///   padding    : Content padding.
///   containedWg: Content to show.
/// \n, <domo> -> {<domo>, (\->()), (\<domo>->()}::
///               {wg, changeOpacity, changeContent}
mk = \padding, continedWg -> {
  content = Q("div")
    .add(continedWg)
  ;
  wg = Q("div")
    .style(
        "z-index:3;" +
        "position:relative;" +
        "top: " + padding + "px;" +
        "left:15px;" +
        "opacity:0;" +
        "transition: opacity 2s linear;"
      )
    .add(content)
  ;

  // \ -> ()
  changeOpacity = \ -> {
    isHidden = wg.e.style.getPropertyValue("opacity") == "0";
    wg.setStyle("opacity", isHidden ? "1" : "0");
  };

  // \<domo> -> ()
  changeContent = \newContent ->
    content.removeAll().add(newContent);;

  return {wg, changeOpacity, changeContent};
};

/// Returns picture information widget.
/// \s, <pic> -> <domo>
pictureWg = \group, Pict -> {
  levelV = [Pict.level];
  sightsWg = Q("div")
    .style("cursor:pointer")
    .text(Pict.sights + " / " + levelV!)
  ;

  // \<mouseEvent> -> ()
  changeLevel = async \ev -> {
    ev.preventDefault();
    ev.stopPropagation();

    levelV! += 1;
    if (levelV! > cts.maxPictLevel) levelV! = cts.minPictLevel;

    await client.send({
      prg: cts.appName,
      source: "Info",
      rq: "changePictLevel",
      group,
      id: Pict.id,
      level: levelV!
    });

    sightsWg
      .text(Pict.sights + " / " + levelV!);
  };

  sightsWg.on("click", changeLevel);

  tb = Q("table")
    .klass("frame3")
    .add(Q("tr")
      .add(Q("td")
        .att("colspan", "3")
        .add(ui.hrule(II("Picture"), 50))))
    .add(Q("tr")
      .add(Q("td")
        .style("text-align:center")
        .text(II("Group")))
      .add(Q("td")
        .style("padding-left:5px")
        .text(II("Name")))
      .add(Q("td")
        .style("text-align:center")
        .text(II("Sights"))))
    .add(Q("tr")
      .add(Q("td")
        .klass("frame")
        .style("width:45px;white-space:nowrap;text-align:center")
        .text(group))
      .add(Q("td")
        .klass("frame")
        .style("max-width: 500px;white-space:nowrap;overflow: hidden;")
        .text(Pict.id))
      .add(Q("td")
        .style("width:45px;white-space:nowrap;text-align:center")
        .klass("frame")
        .add(sightsWg)))
  ;
  tb.on("click", \e -> {
    e.preventDefault();
    e.stopPropagation();
  });
  return tb;
};

/// Returns song information widget.
/// \s, <song>, <audio> -> <domo>
songWg = \songGroup, Song, audio -> {
  levelV = [Song.level];
  nameWg = Q("div")
    .text(Song.id)
  ;
  sightsWg = Song.level == 0
    ? Q("div")
      .style("cursor:pointer")
      .text("· >> ·")
    : Q("div")
      .style("cursor:pointer")
      .text(Song.sights + " / " + levelV!)
  ;

  // \<mouseEvent> -> ()
  changeLevel = async \ev -> {
    ev.preventDefault();
    ev.stopPropagation();

    levelV! += 1;
    if (levelV! > cts.maxSongLevel) levelV! = cts.minSongLevel;

    await client.send({
      prg: cts.appName,
      source: "Info",
      rq: "changeSongLevel",
      group: songGroup,
      id: Song.id,
      level: levelV!
    });

    sightsWg
      .text(Song.sights + " / " + levelV!);
  };

  // \<mouseEvent> -> ()
  changeRadio = async \ev -> {
    ev.preventDefault();
    ev.stopPropagation();

    Rp = await client.send({
      prg: cts.appName,
      source: "Info",
      rq: "changeRadio",
      group: songGroup
    });
    radioName = Rp.radioName;
    radioUrl = Rp.radioUrl;

    nameWg
      .text(radioName);
    audio.src = radioUrl;
  };

  if (Song.level > 0) sightsWg.on("click", changeLevel);
  else sightsWg.on("click", changeRadio);

  tb = Q("table")
    .klass("frame3")
    .add(Q("tr")
      .add(Q("td")
        .att("colspan", "3")
        .add(ui.hrule(II("Song"), 50))))
    .add(Q("tr")
      .add(Q("td")
        .style("text-align:center")
        .text(II("Group")))
      .add(Q("td")
        .style("padding-left:5px")
        .text(II("Name")))
      .add(Q("td")
        .style("text-align:center")
        .text(II("Sights"))))
    .add(Q("tr")
      .add(Q("td")
        .klass("frame")
        .style("width:45px;white-space:nowrap;text-align:center")
        .text(songGroup))
      .add(Q("td")
        .klass("frame")
        .style("max-width: 500px;white-space:nowrap;overflow: hidden;")
        .add(nameWg))
      .add(Q("td")
        .style("width:45px;white-space:nowrap;text-align:center")
        .klass("frame")
        .add(sightsWg)))
    .add(Q("tr")
      .add(Q("td")
        .att("colspan", "3")
        .style("text-align:center")
        .add(Q(audio))))
  ;
  tb.on("click", \e -> {
    e.preventDefault();
    e.stopPropagation();
  });
  return tb;
};


/// Returns dance information widget.
/// 'tm' is in seconds.
/// \s, s, n, <audio> -> <domo>
danceWg = \songGroup, song, tm, audio -> {
  return Q("table")
    .klass("frame3")
    .add(Q("tr")
      .add(Q("td")
        .att("colspan", "3")
        .add(ui.hrule(II("Dance Song"), 50))))
    .add(Q("tr")
      .add(Q("td")
        .style("text-align:center")
        .text(II("Group")))
      .add(Q("td")
        .style("padding-left:5px")
        .text(II("Name")))
      .add(Q("td")
        .style("text-align:center")
        .text(II("Time"))))
    .add(Q("tr")
      .add(Q("td")
        .klass("frame")
        .style("width:45px;white-space:nowrap;text-align:center")
        .text(songGroup))
      .add(Q("td")
        .klass("frame")
        .style("max-width: 500px;white-space:nowrap;overflow: hidden;")
        .text(song))
      .add(Q("td")
        .style("width:45px;white-space:nowrap;text-align:center")
        .klass("frame")
        .text(tm + "'")))
    .add(Q("tr")
      .add(Q("td")
        .att("colspan", "3")
        .style("text-align:center")
        .add(Q(audio))))
  ;
};


