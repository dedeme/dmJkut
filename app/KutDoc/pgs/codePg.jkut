// Copyright 14-May-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Code page.

import "i18n";
import "cts";
import "pgs/msgPg";

Q = ui.q;
II = i18n.tlt;

reserved = "break catch continue default else false finally for if import " +
  "return switch trace true try while"
;
lib = "arr b64 bytes cryp dic file iter js math path regex str sys tcp " +
  "thread time"
;

// States.
stCode = 0;
stLong = stCode + 1; // Long comment
stQ = stLong + 1; // Quote

/// \<domo>, s, s, s -> ()
mk = async \wg, pack, path, anchor  -> {
  prefix = anchor.startsWith("hp::") ? "hp::" : "hp:";
  Left = [""];
  Right = [""];
  LineCounter = [0];
  CharQuotes = [""];
  State = [stCode];

  // \-> ()
  newLine = \-> {
    LineCounter! += 1;
    Right! += "<br>";
    Left! += "<span style='font-family: monospace;font-size: 12px;" +
      "background-color: rgb(215, 215, 215);color: #998866;'>" +
      formatN(LineCounter!) +
      "</span><br>";
  };

  // \s -> ()
  processCode = \l -> {
    // \s -> s
    makeLink = \code -> {
      Bf = [""];
      for (i = 0:str.len(code)) {
        ch = code[i];
        if (ch == "#") {
          Bf! += "_";
        } else if (ch > " ") {
          Bf! += ch;
        }
      }

      Ix = [Bf!.indexOf("=")];
      ix2 = Bf!.indexOf("(");
      if (Ix! == -1 | (ix2 != -1 & ix2 < Ix!)) {
        Ix! = ix2;
        if (Ix! != -1) {
          if (str.starts(Bf![Ix!:], "(*")) {
            ix2 = Bf!.indexOf("(", Ix! + 1);
            if (ix2 != -1) Ix! = ix2;
          }
        }
      }
      if (Ix! == -1) Ix! = Bf!.indexOf(";");
      if (Ix! == -1) Ix! = Bf!.length;

      return Bf![:Ix!];
    };

    R = [toHtml(l)];

    for (w = reserved.split(" ")) {
      Ix = [str.index(R!, w)];
      while (Ix! != -1) {
        ix1 = Ix!;
        ix2 = ix1 + w.length;
        if ((ix1 == 0 | isNotId(R![ix1 - 1])) &
            (ix1 == str.len(R!) | isNotId(R![ix2]))
        ) {
          R! = R![:Ix!] + "<span==>" + w +
            "</span>" + R![Ix! + w.length:];
        }
        Ix! = str.indexFrom(R!, w, ix2 + 25);
      }
    }
    R! = str.replace(R!, "<span==>", "<span class='reserved'>");

    for (w = lib.split(" ")) {
      Ix = [str.index(R!, w)];
      while (Ix! != -1) {
        ix1 = Ix!;
        ix2 = ix1 + w.length;
        if ((ix1 == 0 | isNotId(R![ix1 - 1])) &
            (ix1 == str.len(R!) | isNotId(R![ix2]))
        ) {
          R! = R![:Ix!] + "<span class='package'>" + w +
            "</span>" + R![Ix! + w.length:];
        }
        Ix! = str.indexFrom(R!, w, ix2 + 25);
      }
    }

    UpperBf = [""];
    St = [0];
    Right! += arr.reduce(str.split(R!, ""), "", \seed, ch -> {
      if (St! == 0 | St! == 3) { // -------------------------- start or not id
        if (isNumber(ch)) {
          St! = 1;
          return seed + "<span class='number'>" + ch;
        }
        if (isUpper(ch)) {
          UpperBf! = ch;
          St! = 2;
          return seed;
        }
        if (isNotId(ch)) {
          St! = 3;
          return seed + ch;
        }
        St! = 4;
        return seed + ch;
      }
      if (St! == 1) { // ---------------------------------------------- Number
        if (isNumber(ch))
          return seed + ch;
        St! = 4;
        if (isNotId(ch)) {
          St! = 3;
        }
        return seed + "</span>" + ch;
      }
      if (St! == 2) { // ------------------------------------------ Class name
        if (isNotId(ch)) {
          St! = 3;
          return seed + UpperBf! + ch;
        }
        UpperBf! += ch;
        return seed;
      } // ------------------------------------------------------------ Letter
      if (isNotId(ch))
        St! = 3;
      return seed + ch;
    });
    if (St! == 1 | St! == 2) {
      Right! += "</span>";
    }

    if (str.len(l) > 0) {
      ch = l[0];
      if (ch > " " &
        ch != "(" &
        ch != "}"
      ) {
        Left! += "<span id='" + prefix +
          makeLink(str.trim(l)) +
          "'></span>";
      }
    }

  };

  // \s -> ()
  processLine = \l -> {
    if (State! == stLong) { // ---------------------------------------- stLong
      ix = l.indexOf("*/");
      if (ix != -1) {
        State! = stCode;
        Right! += toHtml(l[:ix + 2]) + "</span>";
        processLine(l[ix + 2:]);
      } else {
        Right! += toHtml(l);
        newLine();
      }
    } else if (State! == stQ) { // --------------------------------------- stQ
      qix = l.indexOf(CharQuotes!);
      if (qix == -1) {
        if (str.len(CharQuotes!) == 3) {
          Right! += toHtml(l);
          newLine();
        } else {
          Right! += toHtml(l) + "</span>";
          newLine();
          State! = stCode;
        }
        return;
      }
      if (CharQuotes!.length == 3) {
        State! = stCode;
        Right! += toHtml(l[:qix + 3]) + "</span>";
        processLine(l[qix + 3:]);
      } else {
        bix = l.indexOf("\\");
        if (bix != -1 & bix < qix) {
          Right! += toHtml(l[:bix + 2]);
          processLine(l[bix + 2:]);
        } else {
          State! = stCode;
          Right! += toHtml(l[:qix + 1]) + "</span>";
          processLine(l[qix + 1:]);
        }
      }
    } else { // ------------------------------------------------------- stCode;
      if (l.trim() == "") {
        newLine();
        return;
      }
      R = [0];
      Pos = [2000];
      Ix = [l.indexOf("/*")]; // 1
      if (Ix! != -1) {
        R! = 1;
        Pos! = Ix!;
      }
      Ix! = l.indexOf("//"); // 2
      if (Ix! != -1 & Ix! < Pos!) {
        R! = 2;
        Pos! = Ix!;
      }
      Ix! = l.indexOf("\""); // 3
      if (Ix! != -1 & Ix! < Pos!) {
        R! = 3;
        Pos! = Ix!;
      }
      Ix! = l.indexOf("'"); // 4
      if (Ix! != -1 & Ix! < Pos!) {
        R! = 4;
        Pos! = Ix!;
      }

      if (R! == 1) { // /*
        processCode(l[:Pos!]);
        l2 = l[Pos! + 2:];
        if (str.starts(l2, "*")) {
          Right! += "<span class='docComment'>/*";
          State! = stLong;
        } else {
          Right! += "<span class='comment'>/*";
          State! = stLong;
        }
        processLine(l2);
      } else if (R! == 2) { // //
        processCode(l[:Pos!]);
        l2 = l[Pos! + 2:];
        if (str.starts(l2, "/")) {
          Right! += "<span class='docComment'>//";
        } else {
          Right! += "<span class='docComment'>//";
        }
        Right! += toHtml(l2) + "</span>";
        newLine();
      } else if (R! == 3) { // "
        processCode(l[:Pos!]);
        State! = stQ;
        l2 = l[Pos! + 1:];
        if (str.starts(l2, "\"\"")) {
          CharQuotes! = "\"\"\"";
          Right! += "<span class='quote'>\"\"\"";
          processLine(l2[2:]);
        } else {
          CharQuotes! = "\"";
          Right! += "<span class='quote'>\"";
          processLine(l2);
        }
      } else if (R! == 4) { // '
        processCode(l[:Pos!]);
        State! = stQ;
        CharQuotes! = "'";
        Right! += "<span class='quote'>'";
        processLine(l[Pos! + 1:]);
      } else {
        processCode(l);
        newLine();
      }
    }
  };

  // \s -> ()
  process = \code -> {
    for (l = code.split("\n")) processLine(l);
  };

  // MAIN code ----------------------------------------------------------------

  Rp = await client.ssend({
    prg: "KutDoc",
    source: "CodePg",
    rq: "code",
    pack: pack,
    path: path
  });

  if (!Rp.code) {
    msgPg.mk(wg, i18n.fmt(II("[%0] Kut file not found."), [path]), true);
    return;
  }

  code = Rp.code!;
  process(code);

  barIx = str.lastIndex(path, "/") + 1;
  Q("@title").text(
    cts.appName + " - " + path[barIx:] + ".kut"
  );

  wg
    .removeAll()
    .add(Q("table")
      .att("id", prefix)
      .add(Q("tr")
        .add(Q("td")
          .klass("frame")
          .add(Q("a")
            .att("href", "?" + pack + "@" + path)
            .text(path)))))
    .add(Q("table")
      .style("boder:0;width:100%")
      .att("cellspacing", "0")
      .add(Q("tr")
        .add(Q("td")
          .klass("prel")
          .style("width:10px")
          .html(Left!))
        .add(Q("td")
          .klass("prer")
          .html(Right!))))
    .adds(iter.map([0:30], \i -> return Q("p").html("&nbsp;");))
  ;

  Tg = null(Q("#" + anchor).e);
  if (Tg) Tg!.scrollIntoView(true);
};

// \s -> b
isNumber = \ch -> return ch >= "0" & ch <= "9";;

// \s -> b
isUpper = \ch -> return (ch >= "A" & ch <= "Z");;

// \s -> b
isLetter = \ch -> return (ch >= "a" & ch <= "z") | (ch >= "A" & ch <= "Z");;

// \s -> b
isNotId  = \ch -> return !isNumber(ch) & !isLetter(ch);;

// \s -> s
toHtml = \s -> return s
  .split("&").join("&amp;")
  .split(" ").join("&nbsp;")
  .split("<").join("&lt;")
;;

// \n -> s
formatN = \n -> {
  r = "" + n;
  return iter.reduce(
    [0: 4 - str.len(r)], r, \seed, i -> return "&nbsp;" + seed;
  );
};
