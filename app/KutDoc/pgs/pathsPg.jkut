// Copyright 07-May-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Paths page.

import "i18n";
import "main";

Q = ui.q;
II = i18n.tlt;

/// \<domo>, <conf>, [dpath...] -> ()
mk = \wg, Cf, AllPaths -> {

  // Returns "" is ok, otherwise an error.
  validateChar = \chars, id -> {
    for (i = 0:str.len(chars)) {
      ch = chars[i];
      if (str.index(id, ch) != -1)
        return i18n.fmt(II("Name '%0' contains '%1'"), [id, ch]);
    }
    return "";
  };

  // Returns "" is ok, otherwise an error.
  validateId = \id -> {
    r = id == ""
      ? II("Name is missing")
      : str.index(id, " ") != -1
        ? i18n.fmt(II("Name '%0' contains blanks"), [id])
        : validateChar("=@/?", id)
    ;
    return r == ""
      ? arr.any(AllPaths, \p -> return p.id == id;)
        ? i18n.fmt(II("Name '%0' is repeated"), [id])
        : ""
      : r
    ;
  };

  // Returns "" is ok, otherwise an error.
  validatePath = \path -> {
    if (!str.starts(path, "/"))
      return i18n.fmt(II("Path '%0' does not start with '/'"), [path]);
    Path = [path];
    while (str.len(Path!) > 1 & str.ends(Path!, "/"))
      Path! = Path![:-1];
    return Path! == "/"
      ? II("Path is '/'")
      : Path! == ""
        ? II("Path is missing")
        : ""
    ;
  };

  // Returns "" is ok, otherwise an error.
  validateIdPath = \id, path -> {
    err = validateId(id);
    return err != "" ? err : validatePath(path);
  };

  // \s, s -> ()
  newPath = async \id, path -> {
    err = validateIdPath(id, path);
    if (err != "") {
      ui.alert(err);
      return;
    }

    Path = [path];
    while (str.len(Path!) > 1 & str.ends(Path!, "/"))
      Path! = Path![:-1];
    await client.ssend({
      prg: "KutDoc",
      source: "PathsPg",
      rq: "new",
      id: id,
      path: Path!
    });
    main.load();
  };

  // \-> ()
  changeShowAll = async \e -> {
    await client.ssend({
      prg: "KutDoc",
      source: "PathsPg",
      rq: "changeShowAll"
    });
    main.load();
  };

  // \s, s, s -> ()
  modifyPath = async \id, newId, path -> {
    err = id == newId
      ? validatePath(path)
      : validateIdPath(newId, path)
    ;
    if (err != "") {
      ui.alert(err);
      return;
    }

    Path = [path];
    while (str.len(Path!) > 1 & str.ends(Path!, "/"))
      Path! = Path![:-1];

    await client.ssend({
      prg: "KutDoc",
      source: "PathsPg",
      rq: "modify",
      id: id,
      newId: newId,
      path: Path!
    });

    main.load();
  };

  // \s, b -> ()
  changeShown = async \id, error -> {
    if (error) {
      ui.alert(II("This source can not be selected, because it does not exist"));
      return;
    }
    await client.ssend({
      prg: "KutDoc",
      source: "PathsPg",
      rq: "changeShown",
      id: id
    });
    main.load();
  };

  // \s -> ()
  deletePath = async \id -> {
    if (!ui.confirm(i18n.fmt(II("Delete %0?"), [id]))) return;
    await client.ssend({
      prg: "KutDoc",
      source: "PathsPg",
      rq: "delete",
      id: id
    });
    main.load();
  };

/// View -----------------------------------------------------------------------

  Paths = Cf.showAll ? AllPaths : arr.filter(AllPaths, \p -> return p.isShown;);
  arr.sort(Paths, \p1, p2 ->
    return str.less(str.toUpper(p1.id), str.toUpper(p2.id));
  );

  // \s -> ()
  modifyBegin = \id -> {
    Q("#newEnter")
      .removeAll()
      .add(Q("div")
        .style("width:80px")
        .add(ui.lightImg("enter")
          .att("style", ";vertical-align:-12%")))
    ;
    Q("#autofocus").value("").disabled(true);
    Q("#pathIn").value("").disabled(true);
    Q("#titleInOut")
      .removeAll()
      .add(ui.lightImg(Cf.showAll ? "out" : "in"))
    ;

    for (p = Paths) {
      pId = p.id;
      path = p.path;
      isShown = p.isShown;

      if (pId == id) {
        Q("#" + pId + ":InOut")
          .removeAll()
          .add(ui.img("blank"))
        ;
        Q("#" + pId + ":Modify")
          .removeAll()
          .add(ui.link(\e -> main.load();)
            .add(ui.img("cancel")))
        ;
        Q("#" + pId + ":Delete")
          .removeAll()
          .add(ui.link(\e ->
            modifyPath(
              pId,
              Q("#nameModify").getValue(),
              Q("#pathModify").getValue()
            );
          ).add(ui.img("enter")))
        ;
        Q("#" + pId + ":Name")
          .removeAll()
          .add(ui.field("pathModify")
            .att("id", "nameModify")
            .att("size", "20")
            .value(pId))
        ;
        Q("#" + pId + ":Path")
          .removeAll()
          .add(ui.field("nameModify")
            .att("id", "pathModify")
            .att("size", "60")
            .value(path))
        ;
        Q("#nameModify").e.focus();
      } else {
        Q("#" + pId + ":InOut")
          .removeAll()
          .add(ui.lightImg(isShown ? "out" : "in"))
        ;
        Q("#" + pId + ":Modify").removeAll().add(ui.lightImg("edit"));
        Q("#" + pId + ":Delete").removeAll().add(ui.lightImg("delete"));
      }
    }
  };

  wg
    .removeAll()
    .add(Q("h2")
      .att("align", "center")
      .text(II("Libraries")))
    .add(
      Q("table")
        .att("class", "border")
        .att("border", "0")
        .att("align", "center")
        .att("style", "background-color: rgb(255, 250, 250)")
        .add(Q("tr")
          .add(Q("td")
            .add(ui.img("new")
              .att("style", "vertical-align:-15%")))
          .add(Q("td")
            .att("id", "newEnter")
            .att("colspan", "2")
            .att("align", "center")
            .add(Q("button")
              .style("width:80px")
              .att("id", "newEnterBt")
              .add(ui.img("enter")
                .att("style", "vertical-align:-10%"))
              .on("click", \e ->
                  newPath(Q("#autofocus").getValue(), Q("#pathIn").getValue());
                )))
          .add(Q("td")
            .att("id", "newName")
            .add(ui.field("pathIn")
              .att("id", "autofocus").att("size", "20")))
          .add(Q("td")
            .att("id", "newPath")
            .add(ui.field("newEnterBt")
              .att("id", "pathIn")
              .att("size", "60")))
          .add(Q("td")))
        .add(Q("tr")
          .add(Q("td")
            .att("id", "titleInOut")
            .att("width", "18px")
            .add(ui.link(changeShowAll)
              .add(ui.img(Cf.showAll ? "out" : "in"))))
          .add(Q("td")
            .add(ui.img("blank"))
            .att("width", "18px"))
          .add(Q("td")
            .add(ui.img("blank"))
              .att("width", "18px"))
          .add(Q("td")
            .html("&nbsp;&nbsp;<b>" + II("Name") + "</b>"))
          .add(Q("td")
            .html("&nbsp;&nbsp;<b>" + II("Path") + "</b>"))
          .add(Q("td")
            .add(ui.img("blank"))))
        .adds(
          Paths.length > 0
            ? arr.map(Paths, \entry -> {
                id = entry.id;
                path = entry.path;
                sel = entry.isShown;
                error = !entry.isValid;

                return Q("tr")
                  .add(Q("td")
                    .att("id", id + ":InOut")
                    .add(ui.link(\e -> changeShown(id, error);)
                      .add(ui.img(sel ? "out" : "in"))))
                  .add(Q("td")
                    .att("id", id + ":Modify")
                    .style("text-align:center;")
                    .add(ui.link(\e -> modifyBegin(id);)
                      .add(ui.img("edit"))))
                  .add(Q("td")
                    .att("id", id + ":Delete")
                    .style("text-align:center;")
                    .add(ui.link(\e -> deletePath(id);)
                        .add(ui.img("delete"))))
                  .add(Q("td")
                    .att("class", "border")
                    .att("id", id + ":Name")
                    .text(id.length > 20 ? id.substring(0, 17) + "..." : id))
                  .add(Q("td")
                    .att("class", "border")
                    .att("id", id + ":Path")
                    .text(str.len(path) > 60
                        ? path[:57] + "..."
                        : path
                      ))
                  .add(Q("td")
                    .att("id", id + ":Error")
                    .add(error ? ui.img("error") : ui.img("well")))
                ;
              })
            : [Q("tr")
              .add(Q("td")
                .att("colspan", "6")
                .att("align", "center")
                .att("class", "border")
                .text(II("There are no libraries")))
            ]))
  ;
};
