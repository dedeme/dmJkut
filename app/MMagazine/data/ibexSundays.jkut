// Copyright 26-May-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Sunday data of ibex.

/// Creates a new <IbexSundays>
///   Data: Array of pairs date-value. It can be empty.
/// \[[n, n]...] -> d<IbexSundays>
mk = \Data -> return {Data};;

/// \<IbexSundays> -> [n...]
dates = \Is -> return arr.map(Is.Data, \e -> return e[0];);;

/// \<IbexSundays> -> [n...]
values = \Is -> return arr.map(Is.Data, \e -> return e[1];);;

/// Returns values of 'Is' divided by 'Is[0]'
/// \<IbexSundays> -> [n...]
ratios = \Is -> {
  D = Is.Data;
  if (arr.size(D) == 0) return [];
  base = D[0][1];
  return arr.map(D, \e -> return (e[1] - base) / base;);
};

/// Adds a new entry if there is no another with the same date.
/// \<IbexSundays>, n, n -> ()
add = \Is, date, value -> {
  day = time.toStr(date);
  D = Is.Data;
  if (!arr.any(D, \e -> return time.toStr(e[0]) == day;))
    arr.push(D, [date, value]);
};

/// \<IbexSundays> -> [*(JS)...]
toJs = \Is ->
  return arr.map(
    Is.Data,
    \e -> return [time.toStr(e[0]), math.toStr(e[1])];
  );;

/// \[*(JS)...] -> <IbexSundays>
fromJs = \A -> return mk(arr.map(
    A,
    \E -> return [time.fromStr(E[0]), math.fromStr(E[1])!];
  ));;
