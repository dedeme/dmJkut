// Copyright 29-May-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Percentages page

import "libdm/menu";
import "data/cts";
import "data/fns";
import "data/hotMap";
import "data/paramsEval";
import "i18n";

Q = ui.q;
II = i18n.tlt;

/// \<domo> -> ()
mk = async \wg -> {
  Url = ui.url();
  model = dic.hasKey(Url, "2") ? Url["2"] : "";
  Rp = await client.send({
    prg: cts.appName,
    module: "MMarket",
    source: "HotMapsPg",
    rq: "idata",
    model
  });
  modelSel = Rp.model;
  // [s...]
  Models = Rp.models;
  arr.sort(Models, \m1, m2 -> return m1 < m2;);
  //[s...]
  DateGroups = Rp.datesGroup;
  arr.sort(DateGroups, \d1, d2 -> return d1 > d2;);

  // View ----------------------------------------------------------------------

  // [[[f, f], s]...] -> <domo>
  twoChart = \PsEvs -> {
    firstParam = PsEvs[0][0][0];
    cols = arr.size(arr.takeWhile(PsEvs, \PsE -> return PsE[0][0] == firstParam;));
    rows = math.toInt(arr.size(PsEvs) / cols);
    nfmt0 = fns.paramFormatter(PsEvs[0][0][0], PsEvs[cols][0][0]);
    nfmt1 = fns.paramFormatter(PsEvs[0][0][1], PsEvs[1][0][1]);
    max = arr.reduce(
      PsEvs, PsEvs[0][1], \r, PsE -> return PsE[1] > r ? PsE[1] : r;
    );
    min = arr.reduce(
      PsEvs, PsEvs[0][1], \r, PsE -> return PsE[1] < r ? PsE[1] : r;
    );
    color = fns.valueColor(max, min);

    return Q("table")
      .klass("flat")
      .adds(iter.map([0:rows], \row -> return Q("tr")
          .adds(iter.map([0:cols], \col ->  {
              i = row * cols + col;
              PsE = PsEvs[i];
              return Q("td")
                .style(
                    "padding:0px;" +
                    "width: 6px; height: 6px;" +
                    "background: " + color(PsE[1])
                  )
                .att(
                    "title",
                    nfmt0(PsE[0][0]) + " - " +
                    nfmt1(PsE[0][1]) + "\n" +
                    math.toIso(PsE[1], 0)
                  )
              ;
            }))
        ;))
    ;
  };

  // [[[f], s]...] -> <domo>
  oneChart = \PsEvs -> {
    nfmt = fns.paramFormatter(PsEvs[0][0][0], PsEvs[1][0][0]);
    max = arr.reduce(
      PsEvs, PsEvs[0][1], \r, PsE -> return PsE[1] > r ? PsE[1] : r;
    );
    min = arr.reduce(
      PsEvs, PsEvs[0][1], \r, PsE -> return PsE[1] < r ? PsE[1] : r;
    );
    color = fns.valueColor(max, min);

    return Q("table")
      .klass("flat")
      .adds(arr.map(PsEvs, \PsE -> return Q("tr")
        .add(Q("td")
          .style(
              "padding:0px;" +
              "width: 120px; height: 6px;" +
              "background: " + color(PsE[1])
            )
          .att(
              "title",
              nfmt(PsE[0][0]) + "\n" +
              math.toIso(PsE[1], 0)
            ));))
      ;
  };

  // \<domo>, s -> <domo>
  mapChart = async \td, date -> {
    Rp = await client.send({
      prg: cts.appName,
      module: "MMarket",
      source: "HotMapsPg",
      rq: "evals",
      modelSel,
      date
    });
    ParamsEvals = Rp.paramsEvals; //[[[f...], s]...]

    td.add(
      Q("table")
      .klass("flat")
      .add(Q("tr")
        .add(Q("td")
          .klass("frame")
          .style("text-align:center")
          .text(time.toIso(time.fromStr(date)!))))
      .add(Q("tr")
        .add(Q("td")
          .add(arr.size(ParamsEvals[0][0]) == 1
            ? oneChart(ParamsEvals)
            : twoChart(ParamsEvals))))
    );
  };

  // \n, n -> <domo>
  rowGroups = \start, end -> {
    Tds = [];
    for (i = start:end) arr.push(Tds, Q("td"));
    for (i = start:end) mapChart(Tds[i], DateGroups[i]);
    return Q("table")
      .att("align", "center")
      .add(Q("tr").adds(Tds))
    ;
  };

  Lopts = [];
  for (M = Models) {
    arr.push(Lopts, menu.separator());
    arr.push(Lopts, menu.tlink(M, M, ["mmarket&hotmaps"]));
  }
  arr.shift(Lopts);
  menuWg = menu.mk(Lopts, [], modelSel, false);


  groups = arr.size(DateGroups);
  wg
    .removeAll()
    .add(menuWg)
    .add(rowGroups(0, groups >= 4 ? 4 : groups))
  ;

  if (groups >= 4)
    wg
      .add(rowGroups(4, groups >= 8 ? 8 : groups))
    ;

  if (groups >= 8)
    wg
      .add(Q("hr"))
      .add(rowGroups(8, groups >= 13 ? 13 : groups))
    ;

  if (groups >= 13)
    wg
      .add(rowGroups(13, groups >= 18 ? 18 : groups))
    ;

  if (groups >= 18)
    wg
      .add(Q("hr"))
      .add(rowGroups(18, groups))
    ;

};
