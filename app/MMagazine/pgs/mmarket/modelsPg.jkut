// Copyright 29-May-2023 ºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Percentages page

import "libdm/menu";
import "data/cts";
import "data/modelFloats";
import "i18n";

Q = ui.q;
II = i18n.tlt;

/// \<domo> -> ()
mk = async \wg -> {
  Url = ui.url();
  type0 = dic.hasKey(Url, "2") ? Url["2"] : "";
  type = type0 != "assets" & type0 != "profits" ? "points" : type0;
  Rp = await client.send({
    prg: cts.appName,
    module: "MMarket",
    source: "ModelsPg",
    rq: "idata"
  });
  //[s...]
  DateGroups = Rp.dateGroups;
  arr.sort(DateGroups, \d1, d2 -> return d1 > d2;);

  // View ----------------------------------------------------------------------

  // \<domo>, s -> ()
  groupTable = async \td, date -> {
    Rp = await client.send({
      prg: cts.appName,
      module: "MMarket",
      source: "ModelsPg",
      rq: "rank",
      date,
      type
    });
    ModelValues = Rp.modelValues;
    arr.sort(ModelValues, \Mv1, Mv2 -> return Mv1[1] > Mv2[1];);

  td.add(
    Q("table")
      .klass("flat")
      .add(Q("tr")
        .add(Q("td")
          .klass("frame")
          .att("colspan", 2)
          .style("text-align:center")
          .text(time.toIso(time.fromStr(date)!))))
      .add(Q("tr")
        .add(Q("td")
          .klass("lhead")
          .text(II("Model")))
        .add(Q("td")
          .klass("rhead")
          .text(type == "points"
              ? II("Points")
              : type == "profits"
                ? "%"
                : "€"
            )))
      .adds(arr.map(ModelValues, \Mv -> return Q("tr")
        .add(Q("td")
          .klass("lframe")
          .text(Mv[0]))
        .add(Q("td")
          .klass("rframe")
          .text(math.toIso(
              Mv[1],
              type == "points"
                ? 0
                : type == "profits"
                  ? 4
                  : 0
            )));))
    );
  };

  // \n, n -> <domo>
  rowGroups = \start, end -> {
    Tds = [];
    for (i = start:end) arr.push(Tds, Q("td"));
    for (i = start:end) groupTable(Tds[i], DateGroups[i]);
    return Q("table")
      .att("align", "center")
      .add(Q("tr").adds(Tds))
    ;
  };

  lopts = [
    menu.tlink("points", II("Points"), ["mmarket&models"]),
    menu.separator(),
    menu.tlink("assets", II("Assets"), ["mmarket&models"]),
    menu.separator(),
    menu.tlink("profits", II("Profits"), ["mmarket&models"])
  ];
  menuWg = menu.mk(lopts, [], type, false);


  groups = arr.size(DateGroups);
  wg
    .removeAll()
    .add(menuWg)
    .add(rowGroups(0, groups >= 4 ? 4 : groups))
  ;

  if (groups >= 4)
    wg
      .add(rowGroups(4, groups >= 8 ? 8 : groups))
    ;

  if (groups >= 8)
    wg
      .add(Q("hr"))
      .add(rowGroups(8, groups >= 13 ? 13 : groups))
    ;

  if (groups >= 13)
    wg
      .add(rowGroups(13, groups >= 18 ? 18 : groups))
    ;

  if (groups >= 18)
    wg
      .add(Q("hr"))
      .add(rowGroups(18, groups))
    ;

};
