// Copyright 06-Aug-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Year data.

import "cts";
import "ann";
import "report";
import "i18n";

II = i18n.tlt;


/// Constructor.
///   nextId: Next annotation identifier.
///   Anns  : Year annotations. They will be sorted by date, from before to
///           after, and in the same date first 'buy' and then 'sale'.
/// \n, [<ann>.] -> x<year>
mk = \nextId, Anns -> {
  arr.sort(Anns, \A1, A2 -> return A1.date == A2.date
    ? A1.isSell == A2.isSell
      ? A1.inv == A2.inv
        ? A1.nick > A2.nick
        : A1.inv > A2.inv
      : !A1.isSell
    : A1.date < A2.date
  ;);

  // \s -> x<year>
  mkError = \msg -> return {nextId, anns: Anns, reports: [msg, false]};;

  // Check errors --------------------------------------------------------------

  Pf = {}; // {n}
  for (A = Anns) {
      id = A.inv + "|" + A.nick;
      if (A.isSell) {
        sOp = dic.get(Pf, id);
        if (sOp) {
          s = sOp!;
          if (s < A.stocks)
            return mkError(i18n.fmt(
              II("%0\nStock for sale (%1) > Stocks in portfolio (%2)"),
              [ann.toStr(A), "" + A.stocks, "" + s]
            ));
          Pf[id] = s - A.stocks;
        } else {
          return mkError(i18n.fmt(
            II("%0\nNick %1 is unknown"), [ann.toStr(A), A.nick]
          ));
        }
      } else {
        sOp = dic.get(Pf, id);
        if (sOp) Pf[id] = sOp! + A.stocks;
        else dic.put(Pf, id, A.stocks);
      }
  }

  // Reports -------------------------------------------------------------------

  nRps = cts.investors + 2;
  Profitss = arr.fromIter(iter.map([0:nRps], \i -> return 0;));
  Summaries = arr.fromIter(iter.map([0:nRps], \i -> return [];)); // [[<rsummary>.].]
  Annss = arr.fromIter(iter.map([0:nRps], \i -> return [];)); // [[<rann>.].]
  feesV = [0];

  if (Anns) {
    Summs = arr.fromIter(iter.map([0:nRps], \i -> return {};)); // [{rsummary.}.]
    for (A = Anns) {
      nick = A.nick;
      Profitss[nRps - 1] = 0; // profits of "report.all" ??? REMOVE ???
      for (iRp = 0:nRps) {
        if (iRp > 0 & iRp < nRps - 1 & A.inv != iRp - 1) {
          continue;
        }
        SentryOp = dic.get(Summs[iRp], nick);
        if (SentryOp) {
          Sentry = SentryOp!;
          if (A.isSell) {
            stocks = A.stocks;
            priceV = [A.price];
            totalV = [stocks * priceV!];
            afeesOp = [];
            if (iRp == 0) { // "report.withFees"
              arr.push(afeesOp, totalV! - A.cash);
              feesV! += totalV! - A.cash;
              totalV! = A.cash;
              priceV! = totalV! / stocks;
            }

            newStocks = Sentry.stocks - stocks;
            if (newStocks! < 0) return mkError(i18n.fmt(
                II("%0\nStock for sale (%1) > Stocks in portfolio (%2)"),
                [ann.toStr(A), "" + A.stocks, "" + Sentry.stocks]
              ));

            scost = math.round(stocks * Sentry.price, 2);
            newTotal = Sentry.total - scost;
            newPrice = Sentry.price;

            profits = totalV! - scost;
            Profitss[iRp] += profits;

            if (newStocks == 0) dic.remove(Summs[iRp], nick);
            else Summs[iRp][nick] = report.mkSummary(
                nick, newStocks, newPrice, newTotal
              );

            Annss[iRp].push(report.mkAnn(
              A.date, nick, stocks, priceV!, totalV!, [profits], afeesOp
            ));
          } else {
            stocks = A.stocks;
            priceV = [A.price];
            totalV = [stocks * priceV!];
            afeesOp = [];
            if (iRp == 0) { // "report.withFees"
              arr.push(afeesOp, A.cash - totalV!);
              feesV! += A.cash - totalV!;
              totalV! = A.cash;
              priceV! = totalV! / stocks;
            }
            Annss[iRp].push(report.mkAnn(
              A.date, nick, stocks, priceV!, totalV!, [], afeesOp
            ));

            newStocks = Sentry.stocks + stocks;
            newTotal = stocks * priceV! + Sentry.stocks * Sentry.price;
            newPrice = newTotal / newStocks;
            Summs[iRp][nick] = report.mkSummary(
              nick, newStocks, newPrice, newTotal
            );
          }
        } else {
          if (!A.isSell) {
            stocks = A.stocks;
            priceV = [A.price];
            totalV = [stocks * priceV!];
            afeesOp = [];
            if (iRp == 0) {
              arr.push(afeesOp, A.cash - totalV!);
              feesV! += A.cash - totalV!;
              totalV! = A.cash;
              priceV! = totalV! / stocks;
            }
            Annss[iRp].push(report.mkAnn(
              A.date, nick, stocks, priceV!, totalV!, [], afeesOp
            ));

            dic.put(Summs[iRp], nick, report.mkSummary(
              nick, stocks, priceV!, totalV!
            ));
          } else return mkError(i18n.fmt(
              II("%0\nSale of not bougth company %1"),
              [ann.toStr(A), A.nick]
            ));
        }
      }
    }

    // Recalculation of "report.all"
    AllSumm = {}; // {rsummary.}
    allProfitsV = [0];
    for (i = 1:nRps - 1) {
      Summ = Summs[i];
      for (k, V = Summ) {
        allVOp = dic.get(AllSumm, k);
        if (allVOp) {
          allV = allVOp!;
          newStocks = V.stocks + allV.stocks;
          newTotal = V.stocks * V.price + allV.stocks * allV.price;
          newPrice = newTotal / newStocks;
          AllSumm[k] = report.mkSummary(k, newStocks, newPrice, newTotal);
        } else {
          dic.put(AllSumm, k, V);
        }
      }
      allProfitsV! += Profitss[i];
    }
    Summs[nRps - 1] = AllSumm;
    Profitss[nRps - 1] = allProfitsV!;

    for (i = 0:nRps) {
      Sm = []; // [<rsummary>.]
      for (V = Summs[i]) Sm.push(V);
      Summaries[i] = Sm;
    }
  }

  Reports = []; // [<report>.]
  for (i = 0:nRps) {
    costV = [0];
    for (E = Summaries[i]) costV! += E.total;

    Summaries[i].sort(\E1, E2 -> return E1.nick < E2.nick;);
    Reports.push(report.mk(
      costV!, Profitss[i], i == 0 ? [feesV!] : [], Summaries[i], Annss[i]
    ));
  }

  return {nextId, anns: Anns, reports: [Reports, true]};
};

/// Returns annotations of 'Year'.
anns = \Year -> return Year.anns;;

/// Modifies or adds annotation.
/// \<year>, [<ann>], <ann> -> ()
add = \Year, OldAnn, NewAnn -> {
  if (OldAnn) {
    ann.update(OldAnn!, NewAnn);
  } else {
    NewAnn.id = Year.nextId;
    Year.nextId += 1;
    arr.push(Year.anns, NewAnn);
  }
  NewYear = mk(Year.nextId, Year.anns);
  Year.anns = NewYear.anns;
  Year.reports = NewYear.reports;
};

/// Remove the annotation with identifier 'annId'.
/// \<year>, n -> ();
remove = \Year, annId -> {
  arr.filterIn(Year.anns, \A -> return A.id != annId;);
};

/// Returns a yearly report.
///   Year: Year to report.
///   type: 'report.all', 'report.withFees' or number of investor.
/// \<year>, n -> [<report>|s, b] Result
getReport = \Year, type -> {
  ReportsRs = Year.reports;

  if (!ReportsRs[1]) return ReportsRs;

  Reports = ReportsRs[0];
  R = switch(type) {
    report.all: Reports[cts.investors + 1];
    report.withFees: Reports[0];
    default: Reports[type + 1];
  };
  return [R, true];
};

/// Makes a treasury report.
///   Year: Year to report.
/// \<year> -> {f, [<rann>.]} :: {summary, entries}
treasury = \Year -> {
    Map = {}; // {<rann>.}

    ReportsRs = Year.reports;
    if (ReportsRs[1]) {
      Reports = ReportsRs!;
      for (A = Reports[0].anns) {
        if (!A.profits) continue;

        nick = A.nick;
        EmapOp = dic.get(Map, nick);
        if (EmapOp) {
          Emap = EmapOp!;
          stocks = Emap.stocks + A.stocks;
          total = Emap.total + A.total;
          profits = Emap.profits! + A.profits!;
          fees = Emap.fees! + A.fees!;
          price = total / stocks;
          dic.put(Map, nick, report.mkAnn(
            A.date, nick, stocks, price, total, [profits], [fees]
          ));
        } else {
          dic.put(Map, nick, A);
        }
      }
    } else {
      ui.alert(ReportsRs!);
    }
    summaryV = [0];
    Entries = []; // [<rann>.]
    for (V = Map) {
      summaryV! += V.profits!;
      arr.push(Entries, V);
    }
    arr.sort(Entries, \E1, E2 -> return E1.nick < E2.nick;);

    return {summary: summaryV!, entries: Entries};
};

/// \<year> -> JS
toJs = \Y -> return [
    Y.nextId,
    arr.map(Y.anns, ann.toJs)
  ];;

/// \JS -> <year>
fromJs = \A -> return mk(
    A[0],
    arr.map(A[1], ann.fromJs)
  );;
