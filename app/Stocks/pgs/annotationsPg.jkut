// Copyright 06-Aug-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Annotations page.

import "libdm/datePicker";
import "libdm/menu";
import "data/cts";
import "data/all";
import "data/year";
import "data/report";
import "data/ann";
import "fns";
import "i18n";

Q = ui.q;
II = i18n.tlt;


/// \<domo>, [s] -> ()
mk = async \wg, Year -> {
  AllData = await all.request();
  selYear = Year ? Year! : all.lastYearId(AllData);
  update = async \ -> {
      await all.send(AllData);
      mk(wg, [selYear]);
    };
  Data = AllData[selYear];
  ReportRs = year.getReport(Data, report.all);

  MkAnns = [[]];

  // Control -------------------------------------------------------------------

  // \<event> -> ()
  initialStock = async \e -> {
    if (!ui.confirm(II("Set values of the year beginning?"))) return;
    err = await all.set0101(AllData, selYear);
    if (err) {
      ui.alert(err);
      return;
    }
    update();
  };

  // \<event> -> ()
  cancel = \e -> mk(wg, [selYear]);;

  // \[<ann>], <domo>, <domo>, <domo>, [<domo>.],
  //  <domo>, <domo>, <domo>, <domo> -> ()
  accept = \AnnOp, buyBt, sellBt, dateWg, InvBts,
            nickWg, stocksWg, priceWg, cashWg -> {
    isSell = sellBt.isChecked();
    invV = [0];
    for (i = 0:arr.size(InvBts)) if (InvBts[i].isChecked()) invV! = i;
    inv = invV!;

    dateTx = str.trim(dateWg.getValue());
    if (!dateTx) { ui.alert(II("Date is missing")); return; }
    dateOp = time.fromIso(dateTx, "/");
    if (!dateOp) { ui.alert(II("Date is not valid")); return; }
    date = dateOp!;
    if (selYear != "" + time.year(date)) {
      ui.alert(II("Date year is not the selected year"));
      return;
    }

    nick = str.trim(nickWg.getValue());
    if (!nick) { ui.alert(II("Nick is missing")); return; }

    stocksOp = fns.int(stocksWg);
    if (!stocksOp) {ui.alert(II("Stocks is not a valid integer")); return; }
    stocks = stocksOp!;

    priceOp = fns.float(priceWg, 4);
    if (!priceOp) {ui.alert(II("Price is not a valid number")); return; }
    price = priceOp!;
    if (price < 0) { ui.alert(II("Price < 0")); return; }

    cashOp = fns.float(cashWg, 2);
    if (!cashOp) { ui.alert(II("Cash is not a valid number")); return; }
    cash = cashOp!;
    if (cash < 0) { ui.alert(II("Cash < 0")); return; }
    if (isSell & cash > stocks * price) {
      ui.alert(II("'Cash > Stocks * Price' in a sell"));
      return;
    }
    if (!isSell & cash < stocks * price) {
      ui.alert(II("'Cash < Stocks * Price' in a buy"));
      return;
    }

    if (!all.duplicateNick(AllData, nick)) {
      if (!ui.confirm(II("A new nick is to be added.\nContinue?")))
        return;
    }

    year.add(Data, AnnOp, ann.mk(
      -1, isSell, date, inv, nick, stocks, price, cash
    ));
    update();
  };

  // \<ann> -> ()
  del = \A -> {
    if (ui.confirm(i18n.fmt(II("%0\nDelete annotation?"), [ann.toStr(A)]))) {
      year.remove(Data, A.id);
      update();
    }
  };

  // View ----------------------------------------------------------------------

  // ANNOTATIONS

  // \<domo> -> [<domo>.]
  entries = \td -> {
    // \<ann> -> <domo>
    entry = \A -> {
      is0101 = time.day(A.date) == 1 & time.month(A.date) == 1;
      return Q("tr")
        .add(Q("td")
          .add(is0101
            ? Q("span")
              .add(ui.lightImg("delete"))
            : ui.link(\e -> del(A);)
                .add(ui.img("delete"))))
        .add(Q("td")
          .add(is0101
            ? Q("span")
              .add(ui.lightImg("edit"))
            : ui.link(\e -> MkAnns!(td, [A]);)
                .add(ui.img("edit"))))
        .add(Q("td")
          .add(A.isSell ? ui.led("#4080ff", 6) : ui.led("#ff8040", 6)))
        .add(Q("td").klass("frame").text(time.toIso(A.date)))
        .add(Q("td").klass("frame").text("" + A.inv))
        .add(Q("td").klass("frame").text(A.nick))
        .add(Q("td").klass("number2").text(math.toIso(A.stocks, 0)))
        .add(Q("td").klass("number2").text(math.toIso(A.price, 4)))
        .add(Q("td").klass("number2").text(math.toIso(A.cash, 2)))
      ;
    };
    return arr.map(arr.reverse(year.anns(Data)), entry);
  };

  // \<domo>, [<ann>] -> ()
  MkAnns! = \td, AnnOp -> {
    // \ -> <domo>
    th = \ -> return Q("td")
      .style("text-align: center;padding-left: 4px; padding-right: 4px")
    ;;

    // <domo>
    state = ui.led(ReportRs[1] ? "#80C0E0" : "#E0C080", 6)
        .att("title", ReportRs[1] ? II("Data is ok") : II("An error is found"))
    ;
    if (!ReportRs[1]) {
      td
        .removeAll()
        .klass("frame")
        .text(ReportRs!)
      ;
      return;
    }

    dateWg = Q("input").style("width: 100px;text-align:center");
    datePk = datePicker.mk(
      i18n.getLang(),
      time.now(),
      \s -> {}
    );

    buyBt = Q("input")
      .att("type", "radio")
      .att("name", "operation")
      .att("checked", "true")
    ;

    sellBt = Q("input")
      .att("type", "radio")
      .att("name", "operation")
    ;

    InvBts = []; // [<domo>.]
    for (i = 0:cts.investors) {
      arr.push(InvBts, Q("input")
        .att("type", "radio")
        .att("name", "investor")
      );
    }
    InvBts[0].att("checked", "true");
    invsWg = Q("div")
      .adds(iter.map([0:arr.size(InvBts)], \i ->
          return Q("span")
            .add(InvBts[i])
            .add(Q("span")
              .html("<big> " + i + "</big>&nbsp;&nbsp;"))
        ;))
    ;

    nickWg = ui.field("stocks")
      .style("width: 50px")
    ;

    stocksWg = ui.field("price")
      .att("id", "stocks")
      .style("width: 50px")
    ;

    priceWg = ui.field("cash")
      .att("id", "price")
      .style("width: 100px")
    ;
    ui.changePoint(priceWg);

    cashWg = ui.field("accept")
      .att("id", "cash")
      .style("width: 150px")
    ;
    ui.changePoint(cashWg);

    set0101 = selYear == all.lastYearId(AllData)
      ? ui.link(initialStock)
        .att("title", II("Set initial stock"))
        .klass("link")
        .text("0101")
      : Q("span")
    ;

    cancelBt = Q("button")
      .text(II("Cancel"))
      .on("click", cancel)
    ;

    acceptBt = Q("button")
      .att("id", "accept")
      .text(II("Accept"))
      .on("click", \e -> accept(
          AnnOp, buyBt, sellBt, dateWg, InvBts, nickWg, stocksWg, priceWg, cashWg
        );)
    ;

    if (AnnOp) {
      A = AnnOp!;
      if (A.isSell) {
        buyBt.checked(false);
        sellBt.checked(true);
      }
      datePicker.setDate(datePk, A.date);
      for (i = 0:arr.size(InvBts)) InvBts[i].checked(i == A.inv);
      nickWg.value(A.nick);
      stocksWg.value(math.toIso(A.stocks, 0));
      priceWg.value(math.toIso(A.price, 4));
      cashWg.value(math.toIso(A.cash, 2));
    }

    datePickerWg = datePicker.mkText(datePk, dateWg);

    editor = Q("table")
      .att("align", "center")
      .add(Q("tr")
        .add(Q("td")
          .att("colspan", "2")
            .add(state))
        .add(Q("td"))
        .add(Q("td")))
      .add(Q("tr")
        .add(th()
          .text(II("Buy")))
        .add(th()
          .text(II("Sell")))
        .add(th()
          .text(II("Date")))
        .add(th()
          .text(II("Inv."))))
      .add(Q("tr")
        .add(th()
          .add(buyBt))
        .add(th()
          .add(sellBt))
        .add(Q("td")
          .add(datePickerWg))
        .add(Q("td")
          .klass("border")
          .style("white-space: nowrap")
          .add(invsWg)))
      .add(Q("tr")
        .add(th()
          .text(II("Nick")))
        .add(th()
          .text(II("Stocks")))
        .add(th()
          .text(II("Price")))
        .add(th()
          .text(II("Cash"))))
      .add(Q("tr")
        .add(th()
          .add(nickWg))
        .add(th()
          .add(stocksWg))
        .add(Q("td")
          .add(priceWg))
        .add(Q("td")
          .add(cashWg)))
      .add(Q("tr")
        .add(Q("td")
          .style("text-align: center")
          .add(set0101))
        .add(Q("td")
          .att("colspan", 3)
          .style("text-align: right")
          .add(cancelBt)
          .add(Q("span")
            .html("&nbsp;&nbsp;"))
          .add(acceptBt)))
    ;


    list = Q("table")
        .klass("frame")
        .att("align", "center")
    ;
    if (!year.anns(Data)) {
      list
        .add(Q("tr")
          .add(Q("td")
            .text(II("Without Data"))))
      ;
    } else {
      list.adds(entries(td));
    }

    td
      .removeAll()
      .add(editor)
      .add(Q("hr"))
      .add(list)
    ;
  };

  // REPORTS

  // \[<summary.>] -> [<domo>.]
  sumaryTrs = \Sum -> {
    // \<summary> -> <domo>
    mkRow = \E -> return Q("tr")
      .add(Q("td")
        .text(E.nick))
      .add(Q("td")
        .klass("number2")
        .text(math.toIso(E.stocks, 0)))
      .add(Q("td")
        .klass("number")
        .text(math.toIso(E.price, 4)))
      .add(Q("td")
        .klass("number")
        .text(math.toIso(E.total, 2)))
    ;;
    return arr.map(arr.reverse(Sum), \E -> return mkRow(E););
  };

  // \[<rann>.] -> [<domo>.]
  annsTrs = \Ranns -> {
    // \<rann> -> <domo>
    mkRow = \Ra -> return Q("tr")
      .add(Q("td")
        .add(Ra.profits ? ui.led("#4080ff", 6) : ui.led("#ff8040", 6)))
      .add(Q("td").klass("frame").text(time.toIso(Ra.date)))
      .add(Q("td").klass("frame").text(Ra.nick))
      .add(Q("td").klass("number2").text(math.toIso(Ra.stocks, 0)))
      .add(Q("td").klass("number").text(math.toIso(Ra.price, 4)))
      .add(Q("td").klass("number2").text(math.toIso(Ra.total, 2)))
      .add(Q("td")
        .klass(Ra.profits ? "number" : "header")
        .text(Ra.profits ? math.toIso(Ra.profits!, 2) : ""))
      .add(Q("td")
        .klass(Ra.fees ? "number" : "header")
        .text(Ra.fees ? math.toIso(Ra.fees!, 2) : ""))
    ;;

    if (Ranns)
      return arr.map(arr.reverse(Ranns), \Ra -> return mkRow(Ra););

    return [Q("tr")
      .add(Q("td")
        .klass("frame")
        .text(II("Without Annotations")))
    ];
  };

  // isel can be report.all, report.withFees or investor index.
  // \<domo>, n -> ()
  mkReports = \td, isel -> {
    sel = isel == report.all
      ? "all"
      : isel == report.withFees
        ? "with"
        : "Inv-" + isel
    ;

    Lopts = [menu.toption("all", II("All"), \ -> mkReports(td, -1);)];
    for (i = 0:cts.investors) {
      name = "Inv-" + i;
      Lopts.push(menu.separator());
      Lopts.push(menu.toption(name, name, \ -> mkReports(td, i);));
    }
    Ropts = [
      menu.toption("with", II("With Fees"), \ -> mkReports(td, -2);)
    ];
    menuWg = menu.mk(Lopts, Ropts, sel, false);

    body = Q("div");
    ReportRs = year.getReport(Data, isel);

    if (!ReportRs[1]) {
      body.html(II("Fail making report") + "<br>" + ReportRs!);
      td
        .removeAll()
        .add(menuWg)
        .add(body)
      ;
      return;
    }

    Report = ReportRs!;
    body
      .add(Q("table")
        .klass("border")
        .att("align", "center")
        .add(Q("tr")
          .add(Q("td")
            .style("text-align: right; width: 80px")
            .text(II("Cost") + ":"))
          .add(Q("td")
            .klass("number")
            .text(math.toIso(Report.cost, 2))))
        .add(Q("tr")
          .add(Q("td")
            .style("text-align: right; width: 80px")
            .text(II("Profits") + ":"))
          .add(Q("td")
            .klass("number")
            .text(math.toIso(Report.profits, 2))))
        .add(Q("tr")
          .add(Q("td")
            .style("text-align: right; width: 80px")
            .text(II("Fees") + ":"))
          .add(Q("td")
            .klass(Report.fees ? "number" : "header")
            .text(Report.fees ? math.toIso(Report.fees!, 2) : ""))))
      .add(Q("div")
        .klass("head")
        .text(II("Stocks")))
      .add(Q("table")
        .klass("border")
        .att("align", "center")
        .add(Q("tr")
          .add(Q("td")
            .klass("header")
            .text(II("Nick")))
          .add(Q("td")
            .klass("header")
            .text(II("Stocks")))
          .add(Q("td")
            .klass("header")
            .text(II("Price")))
          .add(Q("td")
            .klass("header")
            .text(II("Total"))))
        .adds(sumaryTrs(Report.summary)))
      .add(Q("div")
        .klass("head")
        .text(II("Annotations")))
      .add(Q("table")
        .klass("border")
        .att("align", "center")
        .add(Q("tr")
          .add(Q("td")
            .klass("header")
            .text(""))
          .add(Q("td")
            .klass("header")
            .text(II("Date")))
          .add(Q("td")
            .klass("header")
            .text(II("Nick")))
          .add(Q("td")
            .klass("header")
            .text(II("Stocks")))
          .add(Q("td")
            .klass("header")
            .text(II("Price")))
          .add(Q("td")
            .klass("header")
            .text(II("Total")))
          .add(Q("td")
            .klass("header")
            .text(II("Profits")))
          .add(Q("td")
            .klass("header")
            .text(II("Fees"))))
        .adds(annsTrs(Report.anns)))
    ;

    td
      .removeAll()
      .setStyle("padding", "8px")
      .add(menuWg)
      .add(body)
    ;
  };

  Lopts = [];
  firstV = [true];
  for (myear = all.yearIds(AllData)) {
    if (firstV!) {
      firstV! = false;
    } else {
      arr.push(Lopts, menu.separator());
    }
    arr.push(Lopts, menu.toption(
      myear, myear, \ -> mk(wg, [myear]);
    ));
  }
  menuWg = menu.mk(Lopts, [], selYear, false);

  annsTd = Q("td")
    .klass("border")
    .style("width: 5px;vertical-align:top")
  ;
  MkAnns!(annsTd, []);

  reportsTd = Q("td")
    .klass("border")
    .style("vertical-align:top; padding-top: 3px; padding-left: 2px")
  ;
  mkReports(reportsTd, report.all);

  wg
    .removeAll()
    .add(menuWg)
    .add(Q("table")
      .klass("main")
      .add(Q("tr")
        .add(annsTd)
        .add(Q("td")
          .klass("border"))
        .add(reportsTd)))
  ;
};
