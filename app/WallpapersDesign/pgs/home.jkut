// Copyright 30-May-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Home page

import "libdm/modalBox";
import "data/image";
import "data/cts";
import "wgs/dimSelector";
import "wgs/tr";
import "i18n";

Q = ui.q;
II = i18n.tlt;

/// \<domo> -> ()
mk = async \wg -> {
  Rp = await client.send({
    prg: cts.appName,
    source: "Home",
    rq: "idata"
  });

  Images = arr.map(Rp.images, image.fromJs);
  Group = [0];

  // Control -------------------------------------------------------------------

  // \<event> -> ()
  save = async \ev ->
    if (ui.confirm(i18n.fmt(II("Save pictures in group %0?"), [Group!]))) {
      cts.BoxContent
        .removeAll()
        .add(ui.img("wait.gif"))
      ;
      modalBox.show(cts.Box, true);
      await client.send({
        prg: cts.appName,
        source: "Home",
        rq: "save",
        group: Group!
      });
      window.location.reload(true);
    }
  ;

  // \<domo> -> ()
  mkSave = async \td -> {
    td
      .removeAll()
      .add(ui.img("wait.gif"));
    Rp = await client.send({
      prg: cts.appName,
      source: "Home",
      rq: "idata2"
    });
    Duplicates = Rp.duplicates;
    Group! = Rp.group;

    if (!Duplicates) {
      td
        .removeAll()
        .add(ui.link(save)
          .klass("link")
          .text(i18n.fmt(II("Save in Group %0"), [Group!])))
      ;
    } else {
      td
        .removeAll()
        .html("<p>" + II("There are duplicated pictures") + ":</p><p>" +
            arr.join(Duplicates, "<br>") + "</p>")
      ;
    }
  };

  // \s -> ()
  changeDim = \dim -> {
    // \-> ()
    cancel = \ -> modalBox.show(cts.Box, false);;
    // \<dim> -> ()
    accept = async \dim -> {
      await client.send({
        prg: cts.appName,
        source: "Home",
        rq: "changeDim",
        width: dim.width,
        height: dim.height
      });
      window.location.reload(true);
    };

    dimSelector.mk(cts.BoxContent, dim, cancel, accept);
    modalBox.show(cts.Box, true);
  };

  // \<domo> -> ()
  mkDim = async \td -> {
    td
      .removeAll()
      .add(ui.img("wait.gif"));
    Rp = await client.send({
      prg: cts.appName,
      source: "Home",
      rq: "dim"
    });
    dim = "" + Rp.width + " x " + Rp.height;

    td
      .removeAll()
      .add(ui.link(\ev -> changeDim(dim);)
        .klass("link")
        .text(dim))
    ;
  };

  // View ----------------------------------------------------------------------

  if (!Images) {
    wg
      .removeAll()
      .add(Q("table")
        .att("align", "center")
        .add(Q("tr")
          .add(Q("td")
          .klass("frame")
          .text(II("There are no pictures to adjust")))))
    ;
    return;
  }

  TdSave = Q("td")
    .klass("frame")
    .style("text-aling:left;width:5px;white-space:nowrap")
  ;
  TdDim = Q("td")
    .klass("frame")
    .style("text-align:right;width:5px;white-space:nowrap")
  ;
  Trs = [];
  arr.push(Trs, Q("tr")
    .add(Q("td")
      .att("colspan", 5)
      .style(
          "pading-top:15px;" +
          "pading-bottom:10px"
        )
      .add(Q("table")
        .klass("main")
        .add(Q("tr")
          .add(TdSave)
          .add(Q("td"))
          .add(TdDim))))
  );
  arr.push(Trs, Q("tr")
    .add(Q("td")
      .att("colspan", 5)
      .add(Q("hr")))
  );

  mkSave(TdSave);
  mkDim(TdDim);
  for (ix = [0:arr.size(Images)]) arr.push(Trs, tr.mk(Images, ix));

  wg
    .removeAll()
    .add(Q("table")
      .att("align", "center")
      .adds(Trs))
    .add(cts.Box.wg)
  ;

};
