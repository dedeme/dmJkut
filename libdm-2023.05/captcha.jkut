// Copyright 19-Jun-2020 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Captcha widget.

Q = ui.q;

/// Constructor. Returns the following fields:
///   wg - <domo>: Component widget.
///   check - \->b: Function which returns 'true' if checks cells are ok.
///   increment - \->(): Function witch increment the try counter.
///   isUpLimit -> \->b: Function which return 'true' if the try counter
///                      is '>= counterLimit'.
///   reset -> \->(): Function which remove captcha data from memory.
/// Parameters:
///   storeId     : Captcha identifier.
///   counterLimit: Limit of try before show check cells.
///   zeroColor   : Color of 0 value in check cells (e.g. "#f0f0f0")
///   oneColor    : Color of 1 value in check cells (e.g. "#c0c0c0")
/// \s, n, s, s -> <captcha>
mk = \storeId, counterLimit, zeroColor, oneColor -> {
  wg = Q("div");
  now = time.now();
  Counter = [getCounter(storeId)];
  if (now - getTime(storeId) > 900000) {
    Counter! = 0;
    setCounter(storeId, 0);
    setTime(storeId, time.now());
  }
  ch0 = arr.fromIter(
    iter.map([0:4], \i -> return Q("input").att("type", "checkbox");)
  );
  ch1 = arr.fromIter(
    iter.map([0:4], \i -> return Q("input").att("type", "checkbox");)
  );

  // Control -------------------------------------------------------------------

  // Checks cells.
  // \-> b
  check = \ -> return arr.all(ch0, \ch -> return !ch.isChecked();) &
      arr.all(ch1, \ch -> return ch.isChecked();)
    ;;


  // Increments counter.
  // \-> ()
  increment = \ -> {
    setCounter(storeId, Counter! + 1);
    setTime(storeId, time.now());
  };

  // Returns true if tries counter is greater or equals to its limit.
  // \-> b
  isUpLimit = \ -> return Counter! >= counterLimit;;

  // Resets counter.
  // \-> ()
  reset = \ -> {
    resetCounter(storeId);
    resetTime(storeId);
  };


  // View ----------------------------------------------------------------------

  tds = arr.cat([
    arr.map(ch0, \ch -> return Q("td")
      .att("style", "border: 1px solid;background-color: " + zeroColor)
      .add(ch)
    ;),
    arr.map(ch1, \ch -> return Q("td")
      .att("style", "border: 1px solid;background-color: " + oneColor)
      .add(ch)
    ;)
  ]);

  arr.shuffle(tds);
  tds1 = arr.take(tds, 4);
  tds2 = arr.drop(tds, 4);

  wg
    .removeAll()
    .add(Q("table")
      .att("border", 0)
      .style("border: 1px solid;background-color: #fffff0")
      .add(Q("tr")
        .adds(tds1))
      .add(Q("tr")
        .adds(tds2)))
  ;

  return {wg, check, increment, isUpLimit, reset};
};

// \s -> n
getCounter = \id -> {
  N = storage.get(id + "_counter");
  return N ? math.fromStr(N!)! : 0;
};

// \s, n -> ()
setCounter = \id, n -> storage.put(id + "_counter", math.toStr(n));;

// \s -> ()
resetCounter = \id -> storage.del(id + "_counter");;

// \s -> n
getTime = \id -> {
  N = storage.get(id + "_time");
  return N ? math.fromStr(N!)! : time.now();
};

// \s, n -> ()
setTime = \id, n -> storage.put(id + "_time", math.toStr(n));;

// \s -> ()
resetTime = \id -> storage.del(id + "_time");;

