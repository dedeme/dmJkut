// Copyright 11-Jun-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Clock widget.

Q = ui.q;

/// Make a normal clock.
/// \-> x<clock>
mk = \ -> return mk2(false);;

/// Make a chronometer.
/// \-> x<clock>
mkChron = \ -> return mk2(true);;

// \b -> <clock>
mk2 = \isChron -> return {
  isChron,
  start: time.now(),
  width: 120,
  height: 120,
  bg: "#ffffff",
  number: "#000033",
  axis: "#446688",
  hhand: "#446688",
  mhand: "#446688",
  shand: "#000033"
};;

/// Returns clock width. (Default 120).
/// \<clock> -> n
width = \C -> return C.width;;

/// Sets theclock width.
/// \<clock>, n -> ()
setWidth = \C, v -> C.width = v;;

/// Returns clock height. (Default 120).
/// \<clock> -> n
height = \C -> return C.height;;

/// Sets theclock height.
/// \<clock>, n -> ()
setHeight = \C, v -> C.height = v;;

/// Returns background color. (Default "#ffffff").
/// \<clock> -> s
bg = \C -> return C.bg;;

/// Sets the background color.
/// \<clock>, s -> ()
setBg = \C, c -> C.bg = c;;

/// Returns numbers color. (Default "#000033").
/// \<clock> -> s
number = \C -> return C.number;;

/// Sets the numbers color.
/// \<clock>, s -> ()
setNumber = \C, c -> C.number = c;;

/// Returns axis color. (Default "#446688").
/// \<clock> -> s
axis = \C -> return C.axis;;

/// Sets the axis color.
/// \<clock>, s -> ()
setAxis = \C, c -> C.axis = c;;

/// Returns hours hand color. (Default "#446688").
/// \<clock> -> s
hhand = \C -> return C.hhand;;

/// Sets the hours hand color.
/// \<clock>, s -> ()
setHhand = \C, c -> C.hhand = c;;

/// Returns minutes hand color. (Default "#446688").
/// \<clock> -> s
mhand = \C -> return C.mhand;;

/// Sets the minutes hand color.
/// \<clock>, s -> ()
setMhand = \C, c -> C.mhand = c;;

/// Returns seconds hand color. (Default "#000033").
/// \<clock> -> s
shand = \C -> return C.shand;;

/// Sets the seconds hand color.
/// \<clock>, s -> ()
setShand = \C, c -> C.shand = c;;

/// Returns the clock widget.
/// \<clock> -> <domo>
wg = \C -> {
  cv = Q("canvas")
    .att("width", C.width)
    .att("height", C.height)
  ;
  el = cv.e;
  ctx = el.getContext("2d");
  radius0 = el.height / 2;
  ctx.translate(radius0, radius0);
  radius = radius0 * 0.90;

  // \ -> ()
  drawBack = \ -> {
    ctx.beginPath();
    ctx.arc(0, 0, radius, 0, 2 * Math.PI);
    ctx.fillStyle = C.bg;
    ctx.fill();
    grad = ctx.createRadialGradient(
      0, 0, radius * 0.95, 0, 0, radius * 1.05
    );
    grad.addColorStop(0, "#333");
    grad.addColorStop(0.5, "white");
    grad.addColorStop(1, "#333");
    ctx.strokeStyle = grad;
    ctx.lineWidth = radius * 0.1;
    ctx.stroke();
  };

  // \ -> ()
  drawBorder = \ -> {
    ctx.beginPath();
    ctx.arc(0, 0, radius * 0.93, 0, 2 * Math.PI);
    ctx.fillStyle = C.bg;
    ctx.fill();
  };

  // \ -> ()
  drawNumbers = \ -> {
    ctx.fillStyle = C.number;
    ctx.font = radius * 0.16 + "px sans-serif";
    ctx.textBaseline = "middle";
    ctx.textAlign = "center";
    for (num = 1:13) {
      ang = num * Math.PI / 6;
      ctx.rotate(ang);
      ctx.translate(0, -radius * 0.82);
      ctx.rotate(-ang);
      ctx.fillText(math.toStr(num), 0, 0);
      ctx.rotate(ang);
      ctx.translate(0, radius * 0.82);
      ctx.rotate(-ang);
    }
  };

  // \f, f, f, s -> ()
  drawHand = \pos, len, width, color -> {
    ctx.beginPath();
    ctx.lineWidth = width;
    ctx.lineCap = "round";
    ctx.moveTo(0, 0);
    ctx.rotate(pos);
    ctx.lineTo(0, -len);
    ctx.strokeStyle = color;
    ctx.stroke();
    ctx.rotate(-pos);
  };

  // \ -> ()
  drawTime = \ -> {
    now = C.isChron
      ? time.now() - C.start - 3600000
      : time.now()
    ;

    hour0 = time.hour(now) % 12;
    minute0 = time.minute(now);
    second0 = time.second(now);
    //hour
    hour = (hour0 * Math.PI / 6) +
      (minute0 * Math.PI / (6 * 60)) +
      (second0 * Math.PI / (360 * 60));
    drawHand(hour, radius * 0.5, radius * 0.07, C.hhand);
    //minute
    minute = (minute0 * Math.PI / 30) + (second0 * Math.PI / (30 * 60));
    drawHand(minute, radius * 0.8, radius * 0.07, C.mhand);
    // second
    second = second0 * Math.PI / 30;
    drawHand(second, radius * 0.9, radius * 0.02, C.shand);
  };

  // \ -> ()
  drawAxis = \ -> {
    ctx.beginPath();
    ctx.arc(0, 0, radius * 0.1, 0, 2 * Math.PI);
    ctx.fillStyle = C.axis;
    ctx.fill();
  };

  // \ -> ()
  paint = \ -> {
    drawBorder();
    drawNumbers();
    drawTime();
    drawAxis();
  };

  drawBack();
  paint();
  timer.run(timer.mk(1000), paint);

  return cv;
};

