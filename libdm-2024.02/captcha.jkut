// Copyright 18-Mar-2024 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Captcha widget.

Q = ui.q;

// Constructor
//   wg0        : Component widget.
//   checkFn    : Function which returns 'true' if checks cells are ok.
//   incrementFn: Function witch increments the try counter.
//   isUpLimitFn: Function which returns 'true' if counter is '>= counterLimit'.
//   resetFn    : Function which removes captcha data from memory.
// \<domo>, \->b, \->(), \->b, \->() -> <captcha>
mk0 : wg0, checkFn, incrementFn, isUpLimitFn, resetFn;

/// Return captcha widget.
/// \<captcha> -> <domo>
mkWg = \c -> return c[wg0];;

/// Returns 'true' if checks cells are ok.
/// \<captcha> -> b
check = \c -> return c[checkFn]();;

/// Increments the try counter.
/// \<captcha> -> ()
increment = \c -> return c[incrementFn]();;

/// Returns 'true' if counter is '>= counterLimit'.
/// \<captcha> -> b
isUpLimit = \c -> return c[isUpLimitFn]();;

/// Removes captcha data from memory.
/// \<captcha> -> ()
reset = \c -> return c[resetFn]();;

/// Constructor.
///   storeId     : Captcha identifier.
///   counterLimit: Limit of try before show check cells.
///   zeroColor   : Color of 0 value in check cells (e.g. "#f0f0f0")
///   oneColor    : Color of 1 value in check cells (e.g. "#c0c0c0")
/// \s, n, s, s -> <captcha>
mk = \storeId, counterLimit, zeroColor, oneColor -> {
  wg = Q("div");
  now = time.now();
  counterV = [getCounter(storeId)];
  if (now - getTime(storeId) > 900000) {
    counterV! = 0;
    setCounter(storeId, 0);
    setTime(storeId, time.now());
  }
  Ch0 = arr.fromIter(
    iter.map([0:4], \i -> return Q("input").att("type", "checkbox");)
  );
  Ch1 = arr.fromIter(
    iter.map([0:4], \i -> return Q("input").att("type", "checkbox");)
  );

  // Control -------------------------------------------------------------------

  // Checks cells.
  // \-> b
  check = \ -> return Ch0.all(\ch -> return !ch.isChecked();) &
      Ch1.all(\ch -> return ch.isChecked();)
    ;;


  // Increments counter.
  // \-> ()
  increment = \ -> {
    setCounter(storeId, counterV! + 1);
    setTime(storeId, time.now());
  };

  // Returns true if tries counter is greater or equals to its limit.
  // \-> b
  isUpLimit = \ -> return counterV! >= counterLimit;;

  // Resets counter.
  // \-> ()
  reset = \ -> {
    resetCounter(storeId);
    resetTime(storeId);
  };


  // View ----------------------------------------------------------------------

  Tds = arr.concat([
    Ch0.map(\ch -> return Q("td")
      .att("style", "border: 1px solid;background-color: " + zeroColor)
      .add(ch)
    ;),
    Ch1.map(\ch -> return Q("td")
      .att("style", "border: 1px solid;background-color: " + oneColor)
      .add(ch)
    ;)
  ]);

  Tds.shuffle();
  Tds1 = arr.take(Tds, 4);
  Tds2 = arr.drop(Tds, 4);

  wg
    .removeAll()
    .add(Q("table")
      .att("border", 0)
      .style("border: 1px solid;background-color: #fffff0")
      .add(Q("tr")
        .adds(Tds1))
      .add(Q("tr")
        .adds(Tds2)))
  ;

  return mk0(wg, check, increment, isUpLimit, reset);
};

// \s -> n
getCounter = \id -> {
  N = storage.get(id + "_counter");
  return !N ? 0 : math.fromStr(N!)!;
};

// \s, n -> ()
setCounter = \id, n -> storage.put(id + "_counter", math.toStr(n));;

// \s -> ()
resetCounter = \id -> storage.del(id + "_counter");;

// \s -> n
getTime = \id -> {
  N = storage.get(id + "_time");
  return !N ? time.now : math.fromStr(N!)!;
};

// \s, n -> ()
setTime = \id, n -> storage.put(id + "_time", math.toStr(n));;

// \s -> ()
resetTime = \id -> storage.del(id + "_time");;

