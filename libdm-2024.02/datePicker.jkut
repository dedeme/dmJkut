// Copyright 17-May-2023 ºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// DatePicker widget.

Q = ui.q;

/// Constructor.
///   isEs    : 'true' if language is spanish and false if it is english.
///   date    : DatePicker date.
///   fn      : Function to do when DatePicker is clicked.
///   dateView: Date of the first day of 'date'
///   floating: If DatePicker is style floating.
///   elMonth : 'span' to show the calendar month.
///   elYear  : 'span' to show the calendar year.
///   elDays  : Tds of table to show the calendar days.
///   exTr    : 'tr' 6th. row of calendar.
///   tr4     : 'tr' Last row of calendar
///   tb      : 'table' Table of days.
/// \b,[n]|[],(\->()),n,b,
///   <domo>,<domo>,<domo>,<domo>,<domo>,<domo> -> <datePicker>
mk0 : isEs, date, fn, dateView, floating, elMonth, elYear, elDays, exTr, tr4, tb;

/// Constructor
///   isEs: 'true' if language is spanish and false if it is english.
///   date: Initial date (e.g. 'time.now()').
///   fn  : Function to do when DatePicker is clicked.
///           - If 'none' is clicked an empty string is sent to 'fn'.
///           - If a day is clicked a date in format 'YYYYMMDD' is sent to 'fn'.
/// \b, n, (\s->()) -> x<datePicker>
mk = \isEs, date, fn -> return mk0(
    isEs, [date], fn,
    time.mkDate(1, time.month(date), time.year(date)), //dateView
    false, // floating
    Q("span"), // elMonth
    Q("span"), // elYear
    [], // elDays
    Q("tr"), // exTr
    Q("tr"), // tr4
    Q("table") // tb
  );;

/// Returns the selected date.
/// \<datePicker> -> [n]|[]
getDate = \dp -> return dp[date];;

/// Changes the selected date.
/// Change is not shown until 'datePicker.mkWg' is called.
/// \<datePicker>, n -> ()
setDate = \dp, newDate -> {
  dp[date] = [newDate];
  dp[dateView] = time.mkDate(1, time.month(newDate), time.year(newDate));
};

// \<datePicker> -> [s...]
months = \dp -> return dp[isEs]
    ? ["ene", "feb", "mar", "abr", "may", "jun", "jul",
      "ago", "sep", "oct", "nov", "dic"]
    : ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul",
      "Aug", "Sep", "Oct", "Nov", "Dec"]
  ;;

// \<datePicker> -> [s...]
weekDays = \dp -> return dp[isEs]
    ? ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"]
    : ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]
  ;;

// \<datePicker> -> dic
i18n = \dp -> return dp[isEs]
    ? {firstWeekDay: 1, today: "Hoy", none: "Nada"}
    : {firstWeekDay: 0, today: "Today", none: "None"}
  ;;

// \<datePicker>->()
load = \dp -> {
  dp[elMonth].html(months(dp)[time.month(dp[dateView]) - 1]);
  dp[elYear].html("" + time.year(dp[dateView]));

  ix0 = time.weekday(dp[dateView]) - i18n(dp).firstWeekDay;
  ix = ix0 < 0 ? 7 + ix0 : ix0;
  month = time.month(dp[dateView]);
  Date1 = [time.mkDate(time.day(dp[dateView]) - ix, month, time.year(dp[dateView]))];

  today = time.now();
  tyear = time.year(today);
  tmonth = time.month(today);
  tday = time.day(today);

  Dyear = [tyear];
  Dmonth = [tmonth];
  Dday = [tday];

  if (!!dp[date]) {
    Dyear! = time.year(dp[date]!);
    Dmonth! = time.month(dp[date]!);
    Dday! = time.day(dp[date]!);
  }

  ExtraRow = [false];
  iter.each([0:6], \i -> {
    if (i == 5 & time.month(Date1!) == month) ExtraRow! = true;
    iter.each([0:7], \j -> {
      d = dp[elDays][i][j].removeAll();
      year1 = time.year(Date1!);
      month1 = time.month(Date1!);
      day1 = time.day(Date1!);

      if (day1 == Dday! & month1 == Dmonth! & year1 == Dyear!) {
        d.klass("select");
      } else {
        d.klass("day");
        if (time.month(Date1!) != month) d.klass("dayOut");
        if (time.weekday(Date1!) == 6 | time.weekday(Date1!) == 0) {
          d.klass("weekend");
          if (time.month(Date1!) != month) d.klass("weekendOut");
        }
      }
      if (day1 == tday & month1 == tmonth & year1 == tyear)
        d.klass("today");

      ddate1 = Date1!;
      d.html("<span class='day'>" + time.day(ddate1) + "</span>");
      d.att("id", math.toStr(ddate1));
      Date1! = time.mkDate(
        time.day(Date1!) + 1, time.month(Date1!), time.year(Date1!)
      );
    });
  });

  if (dp[tb].getAtt("hasTrEx") == "true") {
    dp[tb].remove(dp[exTr]);
    dp[tb].att("hasTrEx", "false");
  }

  if (ExtraRow!) {
    dp[tb].remove(dp[tr4]);

    dp[tb].add(dp[exTr]).add(dp[tr4]);
    dp[tb].att("hasTrEx", "true");
  }
};

// \<datePicker> -> ()
previousMonth = \dp -> {
  dp[dateView] = time.mkDate(
    1, time.month(dp[dateView]) - 1, time.year(dp[dateView])
  );
  load(dp);
};

// \<datePicker> -> ()
nextMonth = \dp -> {
  dp[dateView] = time.mkDate(
    1, time.month(dp[dateView]) + 1, time.year(dp[dateView])
  );
  load(dp);
};

// \<datePicker> -> ()
previousYear = \dp -> {
  dp[dateView] = time.mkDate(
    1, time.month(dp[dateView]), time.year(dp[dateView]) - 1
  );
  load(dp);
};

// \<datePicker> -> ()
nextYear = \dp -> {
  dp[dateView] = time.mkDate(
    1, time.month(dp[dateView]), time.year(dp[dateView]) + 1
  );
  load(dp);
};

// \<datePicker> -> ()
today = \dp -> {
  today = time.now();
  dp[date]! = today;
  dp[dateView] = time.mkDate(1, time.month(today), time.year(today));
  load(dp);
};

// When 'none' is clicked an empty string is sent to 'fn'.
// \<datePicker> -> ()
none = \dp -> {
  dp[date] = [];
  load(dp);
  dp[fn]("");
};

// When a date is clicked it is sent to 'fn' in format 'YYYYMMDD'.
// \<datePicker>, n -> ()
clickDay = \dp, newDate -> {
  dp[date] = [newDate];
  load(dp);
  dp[fn](time.toStr(newDate));
};

/// Returns a <datePicker> widget.
///   dp: Date picker.
/// <datePicker> -> <domo>
mkWg = \dp -> {
  // \s, (\->()) -> ()
  mkArrow = \tx, f -> return Q("td")
    .klass("arrow")
    .add(Q("span")
      .html(tx)
      .on("click", \e -> f();))
  ;;

  // \n, s, (\->()), <domo>, s, (\->()) -> domo
  mkHeader = \colspan, txarr1, farr1, element, txarr2, farr2 -> return Q("td")
    .att("colspan", colspan)
    .add(Q("table")
      .klass("in")
      .add(Q("tr")
        .add(mkArrow(txarr1, farr1))
        .add(Q("td")
          .style("vertical-align:bottom")
          .add(element.klass("title")))
        .add(mkArrow(txarr2, farr2))))
  ;;

  dp[elMonth] = Q("span");
  dp[elYear] = Q("span");
  dp[elDays] = [];

  dp[tr4] = Q("tr")
    .add(Q("td")
      .att("colspan", 4)
      .klass("left")
      .add(Q("span").klass("link")
        .html(i18n(dp).today)
        .on("click", \e -> today(dp);)))
    .add(Q("td")
      .att("colspan", 3)
      .klass("right")
      .add(Q("span")
        .klass("link")
        .html(i18n(dp).none)
        .on("click", \e -> none(dp);)));

  dp[tb] = Q("table")
    .att("hasTrEx", "false")
    .klass("dmDatePicker")
    .add(Q("tr")
      .add(mkHeader(
        3, "&laquo",
        \ -> previousMonth(dp);,
        dp[elMonth],
        "&raquo;",
        \ -> nextMonth(dp);
      ))
      .add(Q("td"))
      .add(mkHeader(
        3, "&laquo",
        \ -> previousYear(dp);,
        dp[elYear],
        "&raquo;",
        \ -> nextYear(dp);
      )))
    .add(Q("tr")
      .adds(iter.map([0:7], \i -> {
        ix0 = i + i18n(dp).firstWeekDay;
        ix = ix0 > 6 ? ix0 - 7 : ix0;
        return Q("td")
          .html(weekDays(dp)[ix])
        ;
      })))
    .adds((\ -> {
        Rows = arr.fromIter(iter.map([0:5], \i -> {
          Tds = [];
          tr = Q("tr")
            .adds(iter.map([0:7], \j -> {
              td = Q("td");
              td.on("click", \e -> clickDay(dp, math.fromStr(td.getAtt("id"))!););
              Tds.push(td);
              return td;
            }))
          ;
          dp[elDays].push(Tds);
          return tr;
        }));
        Tds = [];
        dp[exTr] = Q("tr")
          .adds(iter.map([0:7], \i -> {
            td = Q("td");
            td.on("click", \e -> clickDay(dp, math.fromStr(td.getAtt("id"))!););
            Tds.push(td);
            return td;
          }))
        ;
        dp[elDays].push(Tds);
        return Rows;
      })())
    .add(dp[tr4]);
  load(dp);
  return Q("div")
    .style(dp[floating] ? "position:absolute" : "position:relative")
    .add(dp[tb])
  ;
};

/// Makes a DatePicker which depends on a button.
///   dp    : Date picker.
///   button: A Button.
/// <datePicker>, <domo> -> <domo>
mkButton = \dp, button -> {
  span = Q("span");
  IsShow = [false];

  // \<event> -> ()
  btAction = \ev -> {
    if (!IsShow!) {
      span.add(mkWg(dp));
      IsShow! = true;
      return;
    }
    span.removeAll();
    IsShow! = false;
  };
  button.on("click", btAction);

  previousFn = dp[fn];
  dp[fn] = \s -> {
    previousFn(s);
    span.removeAll();
    IsShow! = false;
  };

  dp[floating] = true;
  return Q("span")
    .add(button)
    .add(span)
  ;
};

/// Makes a DatePicker which depends on a text field.
///   dp       : Date picker.
///   textInput: A text input.
/// <datePicker>, <domo> -> <domo>
mkText = \dp, textInput -> {
  // \s -> s
  format = \s -> {
    d = time.fromStr(s)!;
    return dp[isEs] ? time.toIso(d) : time.toEn(d);
  };
  span = Q("span");
  IsShow = [false];

  // \<event> -> ()
  btAction = \ev -> {
    if (!IsShow!) {
      span.add(mkWg(dp));
      IsShow! = true;
      return;
    }
    span.removeAll();
    IsShow! = false;
  };

  Date = getDate(dp);
  val = !Date ? "" : format(time.toStr(Date!));
  textInput.value(val);
  textInput.on("click", btAction);
  textInput.on("keydown", \e -> do "e.preventDefault();";);

  previousFn = dp[fn];
  dp[fn] = \s -> {
    textInput.value(s == "" ? "" : format(s));
    previousFn(s);
    span.removeAll();
    IsShow! = false;
  };

  dp[floating] = true;
  return Q("span")
    .add(textInput)
    .add(span)
  ;
};
