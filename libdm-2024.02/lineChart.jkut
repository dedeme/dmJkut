// Copyright 26-May-2023 ºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Line chart.
/// NOTE: lineChart require at least two data.
///
/// LineChart atributes:
///   - exArea
///     -atts
///       - background: s
///       - border
///         - color:  s
///         - dotted: b
///         - width: n
///     - height: n
///     - width: n
///   - inPadding
///     - top: n
///     - right: n
///     - bottom: n
///     - left: n
///   - inAtts
///     - background: s
///     - border
///       - color:  s
///       - dotted: b
///       - width: n
///   - chartPadding
///     - top: n
///     - right: n
///     - bottom: n
///     - left: n
///   - labels
///     - show: b
///     - onPopup: b
///   - xAxis
///     - fontColor: s
///     - fontSize: n
///     - isMonospace: b
///     - isItalic: b
///     - isBold: b
///     - grid
///       - color:  s
///       - dotted: b
///       - width: n
///   - yAxis
///     - fontColor: s
///     - fontSize: n
///     - isMonospace: b
///     - isItalic: b
///     - isBold: b
///     - grid
///       - color:  s
///       - dotted: b
///       - width: n
///     - parts: n
///   -lang: s
///
/// <data> attributes:
///   - Labels: [s...]
///   - UnarySets: [<unarySet>...]
///     · line
///       - color:  s
///       - dotted: b
///       - width: n
///     . label: s
///     · value: n
///   - SetValues: [[[n]|[]...]...]
///   - SetAtts: [<line>...]
///     · line
///       - color:  s
///       - dotted: b
///       - width: n
///   - round: n
///   - maxMinRound: \n, n -> n
///   - drawGrid: \s, n -> b
///   - drawLabel: \s, n -> b
///   - mapLabel: \s, n -> s

Q = ui.q;

// PADDING

/// Playground to draw padding. Mutable.
/// \n, n, n, n -> <padding>
mkPadding = \top, right, bottom, left ->
  return {top, right, bottom, left};;

/// \<padding> -> <padding>
paddingCopy = \P -> return mkPadding(P.top, P.right, P.bottom, P.left);;

/// \<padding> -> [*.]
paddingToJs = \P -> return [P.top, P.right, P.bottom, P.left];;

/// \[*.] -> <padding>
paddingFromJs = \A -> return mkPadding(A[0], A[1], A[2], A[3]);;

/// \ -> <padding>
mkPaddingExample = \ -> return mkPadding(8, 10, 20, 60);;

// LINE

/// Line properties. Mutable.
/// \n, s, b -> <line>
mkLine = \width, color, dotted -> return {width, color, dotted};;

/// \<line> -> <line>
lineCopy = \L -> return mkLine(L.width, L.color, L.dotted);;

/// \<line> -> [*.]
lineToJs = \L -> return [L.width, L.color, L.dotted];;

/// \[*.] -> <line>
lineFromJs = \A -> return mkLine(A[0], A[1], A[2]);;

/// \ -> <line>
mkLineExample = \ -> return mkLine(1, "#002040", false);;

// AREA-ATTS

/// Attributtes of a chart area (extern or intern). Mutable.
/// \<line>, s -> <areaAtts>
mkAreaAtts = \border, background -> return {border, background};;

/// \<areaAtts> -> <areaAtts>
areaAttsCopy = \A -> return mkAreaAtts(lineCopy(A.border), A.background);;

/// \<areaAtts> -> [*.]
areaAttsToJs = \A -> return [lineToJs(A.border), A.background];;

/// \[*.] -> <areaAtts>
areaAttsFromJs = \A -> return mkAreaAtts(lineFromJs(A[0]), A[1]);;

/// \ -> <areaAtts>
mkAreaAttsExample = \ -> return mkAreaAtts(mkLineExample(), "#e9eaec");;

// AREA

/// External area attibutes. Mutable.
/// \n, n, <areaAtts> -> <area>
mkArea = \width, height, atts -> return {width, height, atts};;

/// \<area> -> <area>
areaCopy = \A -> return mkArea(A.width, A.height, areaAttsCopy(A.atts));;

/// \<area> ->[*.]
areaToJs = \A -> return [A.width, A.height, areaAttsToJs(A.atts)];;

/// \[*.] -> <area>
areaFromJs = \A -> return mkArea(A[0], A[1], areaAttsFromJs(A[2]));;

/// \ -> <area>
mkAreaExample = \ -> return mkArea(400, 200, mkAreaAttsExample());;

// UNARY-SET

/// Fixed data set with only one value. (No serializable). Mutable.
/// \s, n , <line> -> <unarySet>
mkUnarySet = \label, value, line -> return {label, value, line};;

/// \ -> <unarySet>
mkUnarySetExample = \ -> return mkUnarySet("Line", 0, mkLineExample());;

// DATA

/// Labels and datasets. (No serializable). Mutable.
/// <data> has the following fields:
///   Labels - [s...]: X axis labels.
///   SetValues - [[[n]|[]...]...]: Y data series.
///   SetAtts - [<line>...]: Y lines attibutes.
///   UnarySets - [<unarySet>...]: Fixed data set with only one value (empty by default).
///   round - n: Round of values to show. Beetwen 0 and 9, both inclusive (default 2).
///   maxMinRound - \n, n -> n: Round of chart maximum - minimum values.
///                      The function take maximun and minimum values of chart
///                       and returns an value beetwen -9 and 9, both inclusive:
///                      ..., -2 -> 0.001, -1 -> 0.01, 0 -> 0, 1 -> 10, 2 -> 100 ...
///                      default 0.
///   drawLabel - \s, n -> b: Function to draw labels.
///                           Default: '\label, index -> return true;'.
///                             label: Label to decide.
///                             index: Index of label.
///     Examples:
///       - To draw al labels:
///         drawLabel = \l, n -> return true;
///       - To draw one of each 5 lines:
///         drawLabel = \l, n -> return n % 5 == 0 ? true: false;
///       - To draw some labels:
///         drawLabel = \l, n -> return l.startsWith("-") ? true : false;
///   drawGrid: - \s, n -> b: Function to draw grid for labels.
///                           Default: '\label, index -> return false;'.
///                             label: Label to decide.
///                             index: Index of label.
///     Examples:
///       - To draw al lines:
///         drawGrid = \l, n -> return true;
///       - To draw one of each 5 lines:
///         drawGrid = \l, n -> return n % 5 == 0 ? true: false;
///       - To draw some labels:
///         drawGrid = \l, n -> return l.startsWith("-") ? true : false;
///   mapLabel: - \s, n -> s: Function to tune X labels texts.
///                           Default: '\label, index -> return label;'.
///                             label: X index label.
///                             index: Index of label.
///     Examples:
///       - To draw month of date type YYYYMMDD:
///         mapLabel = \l, n -> return l[4:6];
/// Paramters:
///   Labels: X axis labels.
///   SetValues: Y data series.
///   SetAtts: Y lines attibutes.
/// \[s.], [[([n]|[]).].], [<line>.] -> <data>
mkData = \Labels, SetValues, SetAtts -> {
    if (!Labels) throw("'Labels' does not have values");
    if (!SetValues) throw("'SetValues' does not have values");
    if (!SetValues[0]) throw("'SetValues[0]' does not have values");
    if (arr.size(SetValues) != arr.size(SetAtts))
      throw (
        "Number of values sets (" + arr.size(SetValues) +
        ") does not match number of attributes set (" + arr.size(SetAtts) + ")"
      );

    UnarySets = [];
    round = 2;
    maxMinRound = \mx, mn -> return 0;;
    drawGrid = \l, i -> return true;;
    drawLabel = \l, i -> return true;;
    mapLabel = \l, i -> return l;;

    return {
        Labels, SetValues, SetAtts, UnarySets, round, maxMinRound,
        drawGrid, drawLabel, mapLabel
      };
};

/// \ -> <data>
mkDataExample = \ -> {
  Labels = ["Mon", "Tue", "Wen", "Thu", "Fri", "Sat", "Sun"];
  setValues = [
    arr.map([1, 2, 9.54, 10.2, 6.2, -7, 7], \e -> return [e];),
    arr.map([2, -4, -2.15, -5.2, 7, 3, 4], \e -> return [e];)
  ];
  setAtts = [mkLineExample(),mkLineExample()];
  setAtts[0].color = "#000080";
  setAtts[1].color = "#800000";

  return mkData(Labels, setValues, setAtts);
};

// LABELS

/// Interior labels attributes.
///   show: If 'true', labels are shown.
///   onPopup: If 'true', label positions are corrected to compensate scroll.
/// \b, b -> <labels>
mkLabels = \show, onPopup -> return {show, onPopup};;

/// \<labels> -> <labels>
labelsCopy = \L -> return mkLabels(L.show, L.onPopup);;

/// \<labels> -> [*.]
labelsToJs = \L -> return [L.show, L.onPopup];;

/// \[*.] -> <labels>
labelsFromJs = \A -> return mkLine(A[0], A[1]);;

/// \ -> <labels>
mkLabelsExample = \ -> return mkLabels(true, false);;

// X

/// Properties of X axis (labels).
///   fontSize: Font size.
///   isMonospace: 'true' if font is 'monospace'. Otherswise it is 'sans'.
///   isItalic: 'true' if font is italic.
///   isBold: 'true' if font is bold.
///   fontColor: Font color.
///   grid: Attributes of grid lines.
/// \n, b, b, b, s, <line> -> <x>
mkX = \fontSize, isMonospace, isItalic, isBold, fontColor, grid -> return {
    fontSize, isMonospace, isItalic, isBold, fontColor, grid
  };;

/// \<x> -> <x>
xCopy = \X -> return mkX(
    X.fontSize, X.isMonospace, X.isItalic, X.isBold, X.fontColor, X.grid
  );;

/// \<x> -> [*.]
xToJs = \X -> return [
    X.fontSize, X.isMonospace, X.isItalic, X.isBold, X.fontColor, lineToJs(X.grid)
  ];;

/// \[*.] -> <x>
xFromJs = \A -> return mkX(
    A[0], A[1], A[3], A[4], lineFromJs(A[5])
  );;

/// \ -> <x>
mkXExample = \ -> return mkX(
    12, false, false, false, "#000000", mkLine(1, "#808080", true)
  );;

// Y

/// Properties of Y axis (values).
///   fontSize: Font size.
///   isMonospace: 'true' if font is 'monospace'. Otherswise it is 'sans'.
///   isItalic: 'true' if font is italic.
///   isBold: 'true' if font is bold.
///   fontColor: Font color.
///   grid: Attributes of grid lines.
///   parts: Parts to divide the chart horizontally (minimum 1).
/// \n, b, b, b, s, <line>, n -> <y>
mkY = \fontSize, isMonospace, isItalic, isBold, fontColor, grid, parts -> return {
    fontSize, isMonospace, isItalic, isBold, fontColor, grid, parts
  };;

/// \<y> -> <y>
yCopy = \Y -> return mkY(
    Y.fontSize, Y.isMonospace, Y.isItalic, Y.isBold, Y.fontColor, Y.grid, Y.parts
  );;

/// \<y> -> [*.]
yToJs = \Y -> return [
    Y.fontSize, Y.isMonospace, Y.isItalic, Y.isBold, Y.fontColor,
    lineToJs(Y.grid), Y.parts
  ];;

/// \[*.] -> <yAxis>
yFromJs = \A -> return mkY(
    A[0], A[1], A[3], A[4], lineFromJs(A[5]), A[6]
  );;

/// \ -> <xAxis>
mkYExample = \ -> return mkY(
    12, false, false, false, "#000000", mkLine(1, "#808080", true), 4
  );;

// LINE-CHART ------------------------------------------------------------------

/// Constructor
///   exArea: External area.
///   inPadding: Padding between the beginning of external area and the beginning of internal area.
///   inAtts: Attrubutes of internal area.
///   chartPadding: Padding between the beginning of internal area and chart plotting.
///   labels: Interior labels attributes (if they are shown or 'in popup'.
///   xAxis: X axis attributes.
///   yAxis: Y axis attributes.
///   lang: Valid values are "es" and "en".
/// \<area>, <padding>, <areaAtts>, <padding>, <labels>, <xAxis>, <yAxis>, s -> <lineChart>
mk = \exArea, inPadding, inAtts, chartPadding, labels, xAxis, yAxis, lang -> return {
    exArea, inPadding, inAtts, chartPadding, labels, xAxis, yAxis, lang
  };;

/// \<lineChart> -> <lineChart>
copy = \lC -> return mk(
    areaCopy(lC.exArea), paddingCopy(lC.inPadding), areaAttsCopy(lC.inAtts),
    paddingCopy(lC.chartPadding), labelsCopy(lC.labels), xCopy(lC.xAxis),
    yCopy(lC.yAxis), lC.lang
  );;

/// \<lineChart> -> [*.]
toJs = \lC -> return [
    areaToJs(lC.exArea), paddingToJs(lC.inPadding), areaAttsToJs(lC.inAtts),
    paddingToJs(lC.chartPadding), labelsToJs(lC.labels), xToJs(lC.xAxis),
    yToJs(lC.yAxis), lC.lang
  ];;

/// \[*.] -> <lineChart>
fromJs = \A -> return mk(
    areaFromJs(A[0]), paddingFromJs(A[1]), areaAttsFromJs(A[2]),
    paddingFromJs(A[3]), labelsFromJs(A[4]), xFromJs(A[5]), yFromJs(A[6]), A[7]
  );;

/// \ -> <lineChart>
mkExample = \ -> {
  inAtts = mkAreaAttsExample();
  inAtts.background = "#fbfdff";
  return mk(
    mkAreaExample(),
    mkPaddingExample(),
    inAtts,
    mkPadding(2, 4, 2, 4),
    mkLabelsExample(),
    mkXExample(),
    mkYExample(),
    "es"
  );
};

/// Returns <lineChart> widget.
///   lineChart: Model.
///   data: Chart datasets.
/// \<lineChart>, <data> -> <domo>
mkWg = \lC, data -> {
  // Value correction to plot.
  // \n -> n
  corr = \x -> return Math.floor(x) + 0.5;;

  // \n -> s
  decFmt = \n -> return lC.lang == "es"
      ? math.toIso(n, data.round)
      : math.toEn(n, data.round)
    ;;

  // [n...]
  HotLabels = [];
  // [n...]
  HotUnarySets = [];
  // [[[n]|[]...]...]
  HotSetValues = [];

  // [[n]|[]]
  Max = [[]];
  Min = [0.0];
  Gap = [0.0];

  // Set max, min and gap

  for (S = data.SetValues) for (Val = S) {
    if (!!Val) {
      if (!!Max!) {
        Max!! = Val! > Max!! ? Val! : Max!!;
        Min! = Val! < Min! ? Val! : Min!;
      } else {
        arr.push(Max!, Val!);
        Min! = Val!;
      }
    }
  }
  for (S = data.UnarySets) {
    if (!!Max!) {
      Max!! = S.value > Max!! ? S.value : Max!!;
      Min! = S.value < Min! ? S.value : Min!;
    } else {
      arr.push(Max!, S.value);
      Min! = S.value;
    }
  }
  if (!!Max!) {
    round = Math.pow(10, data.maxMinRound(Max!!, Min!));
    Max!! = (Math.round(Max!! / round) + 1) * round;
    Min! = (Math.round(Min! / round) - 1) * round;
    Gap! = Max!! - Min!;
  }

  // Set chart dimensions

  w = lC.exArea.width -
    lC.inPadding.left - lC.inPadding.right -
    lC.chartPadding.left - lC.chartPadding.right
  ;
  h = lC.exArea.height -
    lC.inPadding.top - lC.inPadding.bottom -
    lC.chartPadding.top - lC.chartPadding.bottom
  ;
  x0 = lC.inPadding.left + lC.chartPadding.left;
  xEnd = x0 + w;
  y0 = lC.exArea.height - lC.inPadding.bottom - lC.chartPadding.bottom;
  yEnd = y0 - h;

  // Start plot

  wg = Q("div");

  cv = Q("canvas")
    .att("width", lC.exArea.width)
    .att("height", lC.exArea.height)
    .style("background:" + lC.exArea.atts.background)
  ;
  cv2 = Q("canvas")
    .att("width", 0)
    .att("height", 0)
    .style(
        "border: 1px solid black;" +
        "background:" + lC.inAtts.background + ";" +
        "position: absolute;" +
        "visibility: hidden;"
      )
  ;
  cv2.on("mousemove", \ev ->
    if (
      ev.offsetX < cv2.getAtt("width") - 6 |
      ev.offsetY < cv2.getAtt("height") - 6
    ) cv2.setStyle("visibility", "hidden");
  );
  ctx = cv.e.getContext("2d");

  // External area.

  if (lC.exArea.atts.border.width > 0) {
    ctx.setLineDash(lC.exArea.atts.border.dotted ? [4, 2] : []);
    ctx.lineWidth = lC.exArea.atts.border.width;
    ctx.strokeStyle = lC.exArea.atts.border.color;
    ctx.beginPath();
    ctx.rect(
      corr(0),
      corr(0),
      Math.round(lC.exArea.width - 1),
      Math.round(lC.exArea.height - 1)
    );
    ctx.stroke();
  }

  // Internal area.

  ilf = lC.inPadding.left;
  itop = lC.inPadding.top;
  iw = lC.exArea.width - lC.inPadding.left - lC.inPadding.right - 1;
  ih = lC.exArea.height - lC.inPadding.top - lC.inPadding.bottom - 1;

  ctx.fillStyle = lC.inAtts.background;
  ctx.beginPath();
  ctx.rect(ilf, itop, iw, ih);
  ctx.fill();

  // Draw x

  ctx.fillStyle = lC.xAxis.fontColor;
  ctx.font = "" + lC.xAxis.fontSize + "px " +
    (lC.xAxis.isMonospace ? "monospace" : "sans") +
    (lC.xAxis.isItalic ? " italic" : "") +
    (lC.xAxis.isBold ? " bold" : "")
  ;
  for (i = 0:arr.size(data.Labels)) {
    l0 = data.Labels[i];

    if (!data.drawLabel(l0, i)) continue;
    l = data.mapLabel(l0, i);

    lw = ctx.measureText(l).width;
    ctx.fillText(l,
      x0  + i * w / (data.Labels.length - 1) - lw / 2,
      y0 + lC.chartPadding.bottom + lC.xAxis.fontSize
    );
  }

  for (i = 0:arr.size(data.Labels)) {
    l = data.Labels[i];
    cx = corr(x0 + i * w / (arr.size(data.Labels) - 1));

    arr.push(HotLabels, cx);

    if (i == 0 | i >= arr.size(data.Labels) | !data.drawGrid(l, i)) continue;

    ctx.setLineDash(lC.xAxis.grid.dotted ? [4, 2] : []);
    ctx.lineWidth = lC.xAxis.grid.width;
    ctx.strokeStyle = lC.xAxis.grid.color;
    ctx.beginPath();
    ctx.moveTo(cx, corr(y0 + lC.chartPadding.bottom));
    ctx.lineTo(cx, corr(yEnd - lC.chartPadding.top));
    ctx.stroke();
  }

  // Draw y

  ctx.fillStyle = lC.yAxis.fontColor;
  ctx.font = "" + lC.yAxis.fontSize + "px " +
    (lC.yAxis.isMonospace ? "monospace" : "sans") +
    (lC.yAxis.isItalic ? " italic" : "") +
    (lC.yAxis.isBold ? " bold" : "")
  ;

  parts = lC.yAxis.parts < 1 ? 1 : lC.yAxis.parts;
  for (i = 0:parts+1) {
    yVal = Min! + i * Gap! / parts;
    y = y0 - (yVal - Min!) * h / Gap!;

    n = decFmt(yVal);
    ms = ctx.measureText(n).width;
    ctx.fillText(
      n,
      lC.inPadding.left - 4 - ms,
      y + lC.yAxis.fontSize / 2.5
    );

    if (i == 0 | i == parts) continue;

    ctx.setLineDash(lC.yAxis.grid.dotted ? [4, 2] : []);
    ctx.lineWidth = lC.yAxis.grid.width;
    ctx.strokeStyle = lC.yAxis.grid.color;
    ctx.beginPath();
    ctx.moveTo(x0 - lC.chartPadding.left, corr(y));
    ctx.lineTo(xEnd + lC.chartPadding.right, corr(y));
    ctx.stroke();
  }

  // Draw unary lines data sets.
  for (Ul = data.UnarySets) {
    cy = y0 - (Ul.value - Min!) * h / Gap!;
    arr.push(HotUnarySets, corr(cy));

    ctx.setLineDash(Ul.line.dotted ? [4, 2] : []);
    ctx.lineWidth = Ul.line.width;
    ctx.strokeStyle = Ul.line.color;
    ctx.beginPath();
    ctx.moveTo(corr(x0), corr(cy));
    ctx.lineTo(corr(xEnd), corr(cy));
    ctx.stroke();
  }

  // Draw data sets

  if (!!Max!) {
    for (i = 0:arr.size(data.SetValues)) {
      S = data.SetValues[i];
      sSize = arr.size(S);
      // [[n]|[]..]
      HotSetRow = [];

      Cy0 = [0];
      IxStart = [0];
      for (j = 0:sSize) {
        Sval = S[j];
        if (!Sval) {
          arr.push(HotSetRow, []);
          continue;
        }
        IxStart! = j + 1;
        Cy0! = corr(y0 - (Sval! - Min!) * h / Gap!);
        arr.push(HotSetRow, [Cy0!]);
        break;
      }

      ctx.setLineDash(data.SetAtts[i].dotted ? [4, 2] : []);
      ctx.lineWidth = data.SetAtts[i].width;
      ctx.strokeStyle = data.SetAtts[i].color;
      ctx.beginPath();
      ctx.moveTo(corr(x0 + (IxStart! - 1) * w / (sSize - 1)), Cy0!);
      if (IxStart! >= sSize | !S[IxStart!]) {
        ctx.arc(
          corr(x0 + (IxStart! - 1) * w / (sSize - 1)), Cy0!,
          ctx.lineWidth / 2, 0, 2 * Math.PI
        );
      }
      J = [IxStart!];
      while (J! < sSize) {
        if (!!S[J!]) {
          v = S[J!]!;
          cy = corr(y0 - (v - Min!) * h / Gap!);
          arr.push(HotSetRow, [cy]);
          ctx.lineTo(corr(x0 + J! * w / (sSize - 1)), cy);
          J! += 1;
        } else {
          arr.push(HotSetRow, []);
          J! += 1;
          while (J! < sSize) {
            if (!!S[J!]) {
              v = S[J!]!;
              cy = corr(y0 - (v - Min!) * h / Gap!);
              arr.push(HotSetRow, [cy]);
              ctx.moveTo(corr(x0 + J! * w / (sSize - 1)), cy);
              J! += 1;
              if (J! >= sSize | !S[J!]) {
                ctx.arc(
                  corr(x0 + (J! - 1) * w / (sSize - 1)), cy,
                  ctx.lineWidth / 2, 0, 2 * Math.PI
                );
              }
              break;
            } else {
              arr.push(HotSetRow, []);
              J! += 1;
            }
          }
        }
      }
      ctx.stroke();

      arr.push(HotSetValues, HotSetRow);
    }
  }

  // Draw internal frame

  if (lC.inAtts.border.width > 0) {
    ctx.setLineDash(lC.inAtts.border.dotted ? [4, 2] : []);
    ctx.lineWidth = lC.inAtts.border.width;
    ctx.strokeStyle = lC.inAtts.border.color;
    ctx.beginPath();
    ctx.rect(corr(ilf), corr(itop), Math.round(iw), Math.round(ih));
    ctx.stroke();
  }

  // Movement

  cv.on("mousemove", \ev -> {
    cx = ev.offsetX;
    cy = ev.offsetY;

    // x = (cx - x0) * arr.size(data.Labels) / w;
    // y = Min! + (y0 - cy) * Gap! / h;

    UnarySetIx = [-1];
    UnarySetDif = [0];
    for (i = 0:arr.size(HotUnarySets)) {
      v = HotUnarySets[i];
      dif = Math.abs(v - cy);
      if (dif < 4 & (UnarySetIx! == -1 | dif < UnarySetDif!)) {
        UnarySetIx! = i;
        UnarySetDif! = dif;
      }
    }

    SetIx = [-1];
    SetValIx = [-1];
    SetDif = [0];
    for (i = 0:arr.size(data.SetValues)) {
      if (i < 0 | i > arr.size(HotSetValues)) continue;
      HotSetValuesRow = HotSetValues[i];
      Vs = data.SetValues[i];
      for (j = 0:arr.size(Vs)) {
        if (j < 0 | j > arr.size(HotSetValuesRow)) continue;
        HotSet = HotSetValuesRow[j];
        if (!HotSet) continue;

        xdif = HotLabels[j] - cx;
        ydif = HotSet! - cy;
        dif = Math.sqrt(xdif * xdif + ydif * ydif);

        if (dif < 4 & (SetIx! == -1 | dif <= SetDif!)) {
          SetIx! = i;
          SetValIx! = j;
          SetDif! = dif;
        }
      }
    }

    if (UnarySetIx! != -1 | SetIx! != -1) {
      yfirst = lC.yAxis.fontSize;
      ysecond = yfirst * 2 + yfirst / 4;
      ysize = yfirst * 2.75;

      Tx1 = [""];
      Tx2 = [""];
      Color = [""];

      if (SetIx! != -1) {
        Tx1! = data.Labels[SetValIx!];
        Tx2! = decFmt(data.SetValues[SetIx!][SetValIx!]!);
        Color! = data.SetAtts[SetIx!].color;
      } else {
        Tx1! = data.UnarySets[UnarySetIx!].label;
        Tx2! = decFmt(data.UnarySets[UnarySetIx!].value);
        Color! = data.UnarySets[UnarySetIx!].line.color;
      }

      ctx2 = cv2.e.getContext("2d");
      ctx2.font = "" + lC.yAxis.fontSize + "px " +
        (lC.yAxis.isMonospace ? "monospace" : "sans") +
        (lC.yAxis.isItalic ? " italic" : "") +
        (lC.yAxis.isBold ? " bold" : "")
      ;
      ms1 = ctx2.measureText(Tx1!).width;
      ms2 = ctx2.measureText(Tx2!).width;

      Margin1 = [4.0];
      Margin2 = [Math.abs(ms1 - ms2) / 2 + Margin1!];
      Ms = [ms1 + Margin1! * 2];
      if (ms2 > ms1) {
        Margin1! = Margin2!;
        Margin2! = 4;
        Ms! = ms2 + Margin2! * 2;
      }

      if (lC.labels.show) {
        posY = lC.labels.onPopup ? ev.clientY : ui.mouseY(ev);
        posX = lC.labels.onPopup ? ev.clientX : ui.mouseX(ev);
        cv2
          .att("height", ysize)
          .att("width", Ms!)
          .setStyle("top", "" + (posY - ysize) + "px")
          .setStyle("left", "" + (posX - Ms!) + "px")
          .setStyle("visibility", "visible")
        ;

        ctx3 = cv2.e.getContext("2d");
        ctx3.fillStyle = Color!;
        ctx3.font = "" + lC.yAxis.fontSize + "px " +
          (lC.yAxis.isMonospace ? "monospace" : "sans") +
          (lC.yAxis.isItalic ? " italic" : "") +
          (lC.yAxis.isBold ? " bold" : "")
        ;
        ctx3.fillText(Tx1!, Margin1!, yfirst);
        ctx3.fillText(Tx2!, Margin2!, ysecond);
      }
    } else {
      cv2.setStyle("visibility", "hidden");
    }
  });

  return wg.add(cv).add(cv2);
};

/// \-> <domo>
mkWgExample = \-> return mkWg(mkExample(), mkDataExample());;
