// Copyright 15-May-2023 ºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Log widget.
/// Show entries of a log with rows of type <logRow>.
///
/// Example of CLIENT: -----------------------------------------------
///
/// logDiv = Q("div");
///
/// // \(\[<logRow>...]->()) -> ()
/// load = async \fn -> {
///   Rp = await client.send({
///     prg: cts.appName,
///     source: "Home",
///     rq: "getLog"
///   });
///   fn(arr.map(Rp.log, log.logRowFromJs));
/// };
///
/// // \(\->()) -> ()
/// reset = async \fn -> {
///   await client.send({
///     prg: cts.appName,
///     source: "Home",
///     rq: "resetLog"
///   });
///   fn();
/// };
///
/// // \s -> s
/// tlt = \tx -> return switch (tx) {
///   "All log entries will be deleted.\nContinue?":
///     II("All log entries will be deleted.\nContinue?");
///   "2 Days": II("2 Days");
///   "All": II("All");
///   "Reload": II("Reload");
///   "Delete": II("Delete");
///   "Errors": II("Errors");
///   "Log": II("Log");
///   default: tx;
/// };;
///
/// log.mk(logDiv, load, reset, tlt, true, 100, 25);
///
/// Example of SERVER (in main.kut): --------------------------------
///
/// log.setPath(cts.logPath);
///
/// Example of SERVER (in homePg.kut): -------------------------------------
///
/// \m -> ()
/// process = \Rq -> {
///   switch (Rq.rq) {
///     ...
///     "getLog":
///       return rp.mkJs({
///         log: log.readJs()
///       });
///     "resetLog": {
///       log.reset();
///       return rp.mkEmpty();
///     }
///     ...
///   }
/// };

import "logRow";

Q = ui.q;

/// Creates and show a Log widget.
///   wg         : Container.
///   load       : Functión to call when reloading entries.
///                Log rows are sorted from before to after.
///   reset      : Function to call when clearing entries.
///   tlt        : I18n function.
///   minified   : if it is 'true', shows the widget minified.
///   lineWidth  : Sets the line width in characters. Good value 120.
///   linesNumber: Sets the lines number of widget. Good value 25.
/// \<domo>, \(\[<logRow>...] -> ()) -> (), \(\->()) -> (), \s -> s,
///   b, n, n -> ()
mk = async \wg, load, reset, tlt, minified, lineWidth, linesNumber -> {
  Rows = [];
  await load(\:arr Rs -> Rs.each(\LgRow -> Rows.push(LgRow);););

  Minified = [minified];
  Is2Days = [false];
  IsErrors = [true];

  tableFrame = "background-color: rgb(240, 245, 250);" +
    "border: 1px solid rgb(110,130,150);" +
    "font-family: sans;font-size: 14px;" +
    "padding: 4px;border-radius: 4px;"
  ;

  Show = [[]];
  View1 = [[]];
  View2 = [[]];

  // Control -------------------------------------------------------------------

  // \ ->()
  on2Days = \ -> {
    Is2Days! = true;
    View1!();
  };

  // \ ->()
  onAllD = \ -> {
    Is2Days! = false;
    View1!();
  };

  // \ ->()
  onReload = \ -> load(\Rs -> {
      Rows.clear();
      for (E = Rs) Rows.push(E);
      Show!();
    });;

  // \ ->()
  onDelete = \ ->
    if (ui.confirm(tlt("All log entries will be deleted.\nContinue?")))
      reset(\ -> onReload(););;

  // \ ->()
  onErrors = \ -> {
    IsErrors! = true;
    View1!();
  };

  // \ ->()
  onAll = \ -> {
    IsErrors! = false;
    View1!();
  };

  // View ----------------------------------------------------------------------

  // \ -> <domo>
  led = \ -> {
    warns = Rows.size() != 0;
    errs = Rows.any(\:logRow E -> return E.isError;);
    return Q("td")
      .style("text-align:center;width:20%")
      .add(Q("span")
        .style(
            "border: 1px solid rgb(110,130,150);" +
            "border-radius: 8px;" +
            "background: " +
              (!!errs ? "#e04040" : !!warns ? "#e0e040" : "#ffffff") + ";" +
            "cursor:pointer"
          )
        .html("&nbsp;&nbsp;")
        .on("click", \ev -> {
            Minified! = !Minified!;
            Show!();
          }))
    ;
  };

  // \-> ()
  view1 = \ -> {
    // \b, s, (\->()) -> <domo>
    mkOption = \isSel, id, action -> {
      frame = "background-color: rgb(250, 250, 250);" +
        "border: 1px solid rgb(110,130,150);" +
        "padding: 4px;border-radius: 4px;"
      ;
      link = "text-decoration: none;color: #000080;" +
        "font-weight: normal;cursor:pointer;"
      ;
      r = isSel
        ? Q("span").style(frame)
        : ui.link(\ev -> action();).style(link)
      ;
      return r.text(id);
    };

    lmenu = Q("div");
    rmenu = Q("div");
    area = Q("textarea").att("spellcheck", false)
      .att("readOnly", true)
      .att("rows", linesNumber).att("cols", lineWidth + 5);

    lmenu
      .add(Q("span")
        .add(mkOption(Is2Days!, tlt("2 Days"), \ -> on2Days();)))
      .add(Q("span").html(" · "))
      .add(Q("span")
        .add(mkOption(!Is2Days!, tlt("All"), \ -> onAllD();)))
    ;

    rmenu
      .add(Q("span")
        .add(mkOption(false, tlt("Reload"), \ -> onReload();)))
      .add(Q("span").html(" · "))
      .add(Q("span")
        .add(mkOption(false, tlt("Delete"), \ -> onDelete();)))
      .add(Q("span").html(" | "))
      .add(Q("span")
        .add(mkOption(IsErrors!, tlt("Errors"), \ -> onErrors();)))
      .add(Q("span").html(" · "))
      .add(Q("span")
        .add(mkOption(!IsErrors!, tlt("All"), \ -> onAll();)))
    ;
    today = time.now();
    Log = Rows.reverse();
    area.value(
      arr.join(
        arr.map(
          arr.filter(
            Log,
            \:logRow E -> return
              (Is2Days! ? time.dfDays(today, E.date()) < 3 : true) &
              (IsErrors! ? E.isError : true)
            ;
          ),
          \:logRow E -> return E.format(lineWidth);
        ), "\n"
      )
    );

    wg
      .removeAll()
      .add(Q("div").klass("head").style("padding-bottom:10px").text(tlt("Log")))
      .add(Q("table").att("align", "center").style(tableFrame)
        .add(Q("tr")
          .add(Q("td").style("text-align:left;width:40%")
            .add(lmenu))
          .add(led())
          .add(Q("td").style("text-align:right;widht:80%")
            .add(rmenu)))
        .add(Q("tr").add(Q("td").att("colspan", 3)))
        .add(Q("tr")
          .add(Q("td").att("colspan", 3).add(area))))
    ;
  };
  View1! = view1;

  // \ -> ()
  view2 = \ -> wg
      .removeAll()
      .add(Q("div").klass("head").style("padding-bottom:10px").text(tlt("Log")))
      .add(Q("table").att("align", "center").style(tableFrame)
        .add(Q("tr")
          .add(Q("tr")
            .add(led()))))
  ;;
  View2! = view2;

  Show! = \ -> if (Minified!) view2(); else view1();;

  Show!();
};
